@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inherits LayoutComponentBase

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="bb-page">

    <AuthorizeView>
        <Authorized>
            <Sidebar @ref="_sidebar"
                     ImageSrc="./images/melodee-logo-small.png"
                     Title="Melodee"
                     DataProvider="SidebarDataProvider"/>
        </Authorized>
    </AuthorizeView>

    <main>
        <div class="bb-top-row px-4 d-flex justify-content-between">
            <Icon Name="IconName.List" role="button" @onclick="ToggleSidebar"/>
            <AuthorizeView>
                <Authorized>
                    <div>
                        <img src="images\avatar.png" alt="Avatar" class="avatar">
                        @context.User.Identity.Name
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !AuthService.IsLoggedIn)
        {
            var url = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).ToString();
            var isLoginUrl = url.Contains("/account/login");
            var restoredFromState = await AuthService.GetStateFromTokenAsync();
            if (restoredFromState && isLoginUrl)
            {
                NavigationManager.NavigateTo("/");
            }
            else if (restoredFromState)
            {
                NavigationManager.Refresh();
            }
        }
    }

    Sidebar? _sidebar;
    IEnumerable<NavItem>? _navItems;

    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (_navItems is null)
        {
            _navItems = GetNavItems();
        }
        return await Task.FromResult(request.ApplyTo(_navItems));
    }

    private IEnumerable<NavItem> GetNavItems()
    {
        _navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "/", IconName = IconName.House, Text = "Dashboard" },

            new NavItem { Id = "10", IconName = IconName.Server, Text = "Data" },
            new NavItem { Id = "11", Href = "/artists", IconName = IconName.PersonCircle, Text = "Artists", ParentId="10"},
            new NavItem { Id = "12", Href = "/albums", IconName = IconName.Vinyl, Text = "Albums", ParentId="10"},
            new NavItem { Id = "13", Href = "/playlists", IconName = IconName.MusicNoteList, Text = "Playlists", ParentId="10"},
            new NavItem { Id = "14", Href = "/songs", IconName = IconName.MusicNote, Text = "Songs", ParentId="10"},
            new NavItem { Id = "15", Href = "/shares", IconName = IconName.Share, Text = "Shares", ParentId="10"},
            new NavItem { Id = "16", Href = "/users", IconName = IconName.People, Text = "Users", ParentId="10"},

            new NavItem { Id = "50", IconName = IconName.Activity, Text = "Activity" },
            new NavItem { Id = "51",Href = "/logs", IconName = IconName.Hdd, Text = "Logs", ParentId = "50" },
            new NavItem { Id = "52",Href = "/scanhistory", IconName = IconName.Eyeglasses, Text = "Scan History", ParentId = "50"},


            new NavItem { Id = "60", IconName = IconName.FileMusic, Text = "Media" },
            new NavItem { Id = "61", Href = "/inbound", IconName = IconName.Folder2Open, Text = "Inbound", ParentId="60"},
            new NavItem { Id = "62", Href = "/library", IconName = IconName.Folder2, Text = "Library", ParentId="60"},
            new NavItem { Id = "63", Href = "/staging", IconName = IconName.Folder2, Text = "Staging", ParentId="60"},

            new NavItem { Id = "70",Href = "/settings", IconName = IconName.Sliders, Text = "Settings" },

        };

        return _navItems;
    }


    private void ToggleSidebar()
    {
        _sidebar?.ToggleSidebar();
    }
}



