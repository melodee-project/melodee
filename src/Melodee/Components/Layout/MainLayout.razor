@implements IDisposable

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Http
@inject AuthenticationStateProvider AuthenticationStateProvider


@inherits LayoutComponentBase

<div class="bb-page">

    @if (IsUserAuthenticated())
    {
        <Sidebar @ref="sidebar"
                 ImageSrc="./images/melodee-logo-small.png"
                 Title="Melodee"
                 DataProvider="SidebarDataProvider"/>
    }
    <main>
        <div class="bb-top-row px-4 d-flex justify-content-between">
            <Icon Name="IconName.List" role="button" @onclick="ToggleSidebar" />
            <a href="/about" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>

</div>
<CascadingValue TValue="System.Threading.Tasks.Task<AuthenticationState>" Value="@_currentAuthenticationStateTask" ChildContent="@ChildContent" />

@code {
    private Task<AuthenticationState>? _currentAuthenticationStateTask;

    /// <summary>
    /// The content to which the authentication state should be provided.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        _currentAuthenticationStateTask = AuthenticationStateProvider
            .GetAuthenticationStateAsync();
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> newAuthStateTask)
    {
        _ = InvokeAsync(() =>
        {
            _currentAuthenticationStateTask = newAuthStateTask;
            StateHasChanged();
        });
    }

    void IDisposable.Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

    Sidebar sidebar = default!;
    IEnumerable<NavItem> navItems = [];

    //private bool IsUserAuthenticated => HttpContextAccessor.HttpContext?.User?.Identity?.IsAuthenticated ?? false;

    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
        {
            navItems = GetNavItems();
        }
        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private IEnumerable<NavItem> GetNavItems()
    {
        navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "/", IconName = IconName.House, Text = "Dashboard" },

            new NavItem { Id = "10", IconName = IconName.Server, Text = "Data" },
            new NavItem { Id = "11", Href = "/artists", IconName = IconName.PersonCircle, Text = "Artists", ParentId="10"},
            new NavItem { Id = "12", Href = "/albums", IconName = IconName.Vinyl, Text = "Albums", ParentId="10"},
            new NavItem { Id = "13", Href = "/playlists", IconName = IconName.MusicNoteList, Text = "Playlists", ParentId="10"},
            new NavItem { Id = "14", Href = "/songs", IconName = IconName.MusicNote, Text = "Songs", ParentId="10"},
            new NavItem { Id = "15", Href = "/shares", IconName = IconName.Share, Text = "Shares", ParentId="10"},
            new NavItem { Id = "16", Href = "/users", IconName = IconName.People, Text = "Users", ParentId="10"},

            new NavItem { Id = "50", IconName = IconName.Activity, Text = "Activity" },
            new NavItem { Id = "51",Href = "/logs", IconName = IconName.Hdd, Text = "Logs", ParentId = "50" },
            new NavItem { Id = "52",Href = "/scanhistory", IconName = IconName.Eyeglasses, Text = "Scan History", ParentId = "50"},


            new NavItem { Id = "60", IconName = IconName.FileMusic, Text = "Media" },
            new NavItem { Id = "61", Href = "/inbound", IconName = IconName.Folder2Open, Text = "Inbound", ParentId="60"},
            new NavItem { Id = "62", Href = "/library", IconName = IconName.Folder2, Text = "Library", ParentId="60"},
            new NavItem { Id = "63", Href = "/staging", IconName = IconName.Folder2, Text = "Staging", ParentId="60"},

            new NavItem { Id = "70",Href = "/settings", IconName = IconName.Sliders, Text = "Settings" },

        };

        return navItems;
    }

    private async Task<bool> IsUserAuthenticated()
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // return authState?.User?.Identity?.IsAuthenticated ?? false;
        var user =
    }

    private async Task ToggleSidebar()
    {
        if (await IsUserAuthenticated())
        {
            sidebar.ToggleSidebar();
        }
    }
}



