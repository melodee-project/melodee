@using System.Reactive.Linq
@using System.Reactive.Subjects
@using Melodee.Common.Models.SearchEngines
@inject AlbumImageSearchEngineService ImageSearchEngineService
@inject IHttpClientFactory HttpClientFactory
@inject ISettingService SettingService
@inject Serilog.ILogger Logger

<div class="album-cover-search-container">

    <div class="form">
        <div class="form-group">

            <div class="mb-2">
                <label>Delete any cover images for album
                    <input type="checkbox" @bind="_doDeleteExistingCoverImages"/>
                </label>
            </div>
        </div>
        <div class="form-group">
            <div class="mb-2">
                <InputText @bind-Value="_artistName" class="form-control" @onkeyup="DoSearch"/>
                <InputText @bind-Value="_albumYear" class="form-control" @onkeyup="DoSearch"/>
                <InputText @bind-Value="_albumName" class="form-control" @onkeyup="DoSearch"/>
            </div>
        </div>
    </div>

    <div class="cover-search-images-container">
        @if (_loading)
        {
            <Spinner/>
        }
        @foreach (var result in _results)
        {
            <div class="@(_selectedResult == result ? "selected" : string.Empty) cover-search-image-container">
                <img @onclick="() => _selectedResult = result" class="rounded cover-search-image" src="@result.UrlValue" alt="@result.Title"/>
            </div>
        }
    </div>
    <div class="mt-2">
        <Button Color="ButtonColor.Secondary" @onclick="() => SelectOrCancelClicked(false)">Cancel</Button>
        <Button Color="ButtonColor.Primary" @onclick="() => SelectOrCancelClicked(true)">Select</Button>
    </div>
</div>

@code {
    private bool _loading;
    private int _maxResults = 10;
    private readonly Subject<(string?, string?, string?)> _searchEvents = new Subject<(string?, string?, string?)>();
    private string? _albumYear;
    private string? _artistName;
    private string? _albumName;
    private bool _doDeleteExistingCoverImages = true;
    private ImageSearchResult[] _results = [];
    private ImageSearchResult? _selectedResult;

    [Parameter] public Common.Models.Album Album { get; set; } = default!;

    [Parameter] public EventCallback<ImageSearchResult?> OnUpdateCallback { get; set; }

    private void DoSearch()
    {
       _searchEvents.OnNext((_artistName,_albumName,_albumYear));
    }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _maxResults = (await SettingService.GetValueAsync<int?>(SettingRegistry.SearchEngineDefaultPageSize)).Data ?? (await SettingService.GetValueAsync<int>(SettingRegistry.DefaultsPageSize)).Data;
        _albumYear = string.Empty;
        _albumName = Album.AlbumTitle();
        _artistName = Album.Artist.Name;
        _searchEvents.Throttle(TimeSpan.FromMilliseconds(800)).Subscribe(async void (text) =>
        {
            try
            {
                _results = (await ImageSearchEngineService.DoSearchAsync(new AlbumQuery
                {
                    Name = text.Item2 ?? string.Empty,
                    Artist = text.Item1,
                    Year = SafeParser.ToNumber<int>(text.Item3)
                }, _maxResults)).Data;
                _loading = false;
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                Logger.Error(e, "Artist [{Artist}] Album [{Album}] Year [{Year}]", _artistName, _albumName, _albumYear);
            }
        });
        _searchEvents.OnNext((_artistName,_albumName,_albumYear));
    }

    private async Task SelectOrCancelClicked(bool clickedSelected)
    {
        if (!clickedSelected)
        {
            await OnUpdateCallback.InvokeAsync(null);
        }
        if (OnUpdateCallback.HasDelegate && _selectedResult != null)
        {
            _selectedResult.DoDeleteExistingCoverImages = _doDeleteExistingCoverImages;
            await OnUpdateCallback.InvokeAsync(_selectedResult);
        }
    }

}
