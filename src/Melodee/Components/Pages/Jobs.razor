@page "/jobs"
@using Melodee.ViewModels
@using Quartz
@using Quartz.Impl.Matchers

@inject IScheduler Scheduler

<div class="job-status-container">
    <table class="table table-striped">
        <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Next Run</th>
            <th scope="col">Last Run</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var job in _jobs)
        {
            <tr>
                <td>@job.Name</td>
                <td>@job.NextFireTime</td>
                <td>@job.PreviousFireTime</td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {

    private List<JobStatus> _jobs = new List<JobStatus>();

    private async Task RefreshJobs()
    {
        _jobs.Clear();

        var jobGroups = await Scheduler.GetJobGroupNames();
        var triggerGroups = await Scheduler.GetTriggerGroupNames();

        foreach (string group in jobGroups)
        {
            var groupMatcher = GroupMatcher<JobKey>.GroupContains(group);
            var jobKeys = await Scheduler.GetJobKeys(groupMatcher);
            foreach (var jobKey in jobKeys)
            {
                var detail = Scheduler.GetJobDetail(jobKey);
                var triggers = await Scheduler.GetTriggersOfJob(jobKey);
                foreach (ITrigger trigger in triggers)
                {
                    var nextFireTime = trigger.GetNextFireTimeUtc();
                    var previousFireTime = trigger.GetPreviousFireTimeUtc();
                    _jobs.Add(new JobStatus(group,
                        jobKey.Name,
                        trigger.Key.Name,
                        trigger.Key.Group,
                        trigger.GetType().Name,
                        Scheduler.GetTriggerState(trigger.Key).ToString()!,
                        nextFireTime?.LocalDateTime.ToString() ?? "---",
                        previousFireTime?.LocalDateTime.ToString() ?? "---"));
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshJobs();
    }

}
