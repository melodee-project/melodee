@page "/album/{libraryApiKey:guid}/{uniqueId:long}/{returnUrl}"
@using System.Security.Principal
@using Melodee.Common.Models.SearchEngines
@using Melodee.Plugins.Conversion.Image
@using Melodee.Plugins.Validation

@inject AlbumDiscoveryService AlbumsDiscoverer
@inject DefaultImages DefaultImages
@inject DirectoryProcessorService DirectoryProcessorService
@inject ISerializer Serializer
@inject ILibraryService LibraryService
@inject MainLayoutProxyService MainLayoutProxyService
@inject MediaEditService MediaEditService
@inject NavigationManager NavManager
@inject Serilog.ILogger Logger
@inject ISettingService SettingService

<PageTitle>Album Detail</PageTitle>

<Toasts class="p-3" Messages="_messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight"/>

<div class="album-edit-container container">
<p class="font-monospace fs-6"><Badge Color="AlbumBadgeColor()">@(_album?.Status.ToString())</Badge> @(_albumFullPath ?? "Loading...")</p>
<Ribbon OnClick="OnRibbonItemClick">
    <RibbonTab Title="Actions" Active="true">
        <Content>
            <RibbonItem Name="SaveAlbum" IconSize="IconSize.x5" IconColor="IconColor.Primary" IconName="IconName.Save">Save</RibbonItem>
            <RibbonItem Name="DoMagic" IconSize="IconSize.x5" IconColor="IconColor.Secondary" IconName="IconName.Magic">Do Magic</RibbonItem>
            <RibbonItem Name="DeleteAlbum" IconSize="IconSize.x5" IconColor="IconColor.Danger" IconName="IconName.Trash">Delete</RibbonItem>
            <RibbonItem Name="MoveToLibrary" IconSize="IconSize.x5" IconColor="IconColor.Warning" IconName="IconName.FolderSymlink">Move to Library</RibbonItem>
            <RibbonItem Name="ReProcess" IconSize="IconSize.x5" IconColor="IconColor.Warning" IconName="IconName.Cpu">Re-Process</RibbonItem>

            @* <RibbonItemGroup Text="Album"> *@
            @*     <RibbonItem Name="MergeArtist" IconSize="IconSize.x5" IconColor="IconColor.Secondary" IconName="IconName.Pencil">Set year to current</RibbonItem> *@
            @* </RibbonItemGroup> *@
            @* <RibbonItemGroup Text="Artist"> *@
            @*     <RibbonItem Name="MergeArtist" IconSize="IconSize.x5" IconColor="IconColor.Secondary" IconName="IconName.Pencil">Remove artist from song titles</RibbonItem> *@
            @* </RibbonItemGroup> *@
            @* <RibbonItemGroup Text="Songs"> *@
            @*     <RibbonItem Name="MergeArtist" IconSize="IconSize.x5" IconColor="IconColor.Primary" IconName="IconName.Pencil">Promote song artist</RibbonItem> *@
            @*     <RibbonItem Name="MergeArtist" IconSize="IconSize.x5" IconColor="IconColor.Primary" IconName="IconName.Pencil">Renumber songs</RibbonItem> *@
            @*     <RibbonItem Name="MergeArtist" IconSize="IconSize.x5" IconColor="IconColor.Secondary" IconName="IconName.Pencil">Remove featuring artist from song titles</RibbonItem> *@
            @*     <RibbonItem Name="MergeArtist" IconSize="IconSize.x5" IconColor="IconColor.Secondary" IconName="IconName.Pencil">Trim song titles</RibbonItem> *@
            @* </RibbonItemGroup> *@
        </Content>
    </RibbonTab>
    <RibbonTab Title="Cover Image">
        <Content>
            <RibbonItem Name="ChangeCoverImage" IconSize="IconSize.x5" IconColor="IconColor.Secondary" IconName="IconName.FileImage">Change</RibbonItem>
            <RibbonItem Name="DeleteAlbumImages" IconSize="IconSize.x5" IconColor="IconColor.Danger" IconName="IconName.Trash2">Remove</RibbonItem>
            <RibbonItem Name="SearchForAlbumImage" IconSize="IconSize.x5" IconColor="IconColor.Primary" IconName="IconName.Search">Search</RibbonItem>
        </Content>
    </RibbonTab>
</Ribbon>
<Tabs EnableFadeEffect="true" Class="mt-1">
<Tab  Name="AlbumTab" Active="true">
    <TitleTemplate>
        <Icon Name="IconName.Vinyl"/> Album
    </TitleTemplate>
    <Content>
        <div class="row mt-2">
            <div class="col-3">
                <img alt="@_albumEdit.Artist" class="cover-image m-1" src="@_albumCoverBase64"/>
            </div>
            <div class="col-9">

                @* TODO do something about original artist maybe show in red or "old value" or somethting, see "Black Folk - Black Folk Don't Die" turns into "Black Folk - Don't Die"  *@

                <EditForm EditContext="_editFormEditContext" class="form-login mt-2" FormName="AlbumEdit">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>Artist Name</label>
                        <div class="mb-2">
                            <InputText @bind-Value="_albumEdit.Artist" class="form-control"/>
                            <ValidationMessage For="() => _albumEdit.Artist"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Album Title</label>
                        <div class="mb-2">
                            <InputText @bind-Value="_albumEdit.Title" class="form-control"/>
                            <ValidationMessage For="() => _albumEdit.Title"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Genre</label>
                        <div class="mb-2">
                            <InputText @bind-Value="_albumEdit.Genre" class="form-control"/>
                            <ValidationMessage For="() => _albumEdit.Genre"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Year</label>
                        <div class="mb-2">
                            <InputNumber @bind-Value="_albumEdit.Year" class="form-control"/>
                            <ValidationMessage For="() => _albumEdit.Year"/>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </Content>
</Tab>
<Tab  Name="DiscsTab">
    <TitleTemplate>
        <Icon Name="IconName.Disc"/> Discs <Badge Color="BadgeColor.Info">@(_album?.Songs?.GroupBy(x => x.MediaNumber()).Count() ?? 0)</Badge>
    </TitleTemplate>
    <Content>
        <div class="row mt-2">
            <div class="col-5">
                <div class="table-responsive">
                    <table class="table table-striped table-bordered table-sm table-hover">
                        <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Title</th>
                            <th scope="col">Song Count</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var disc in _albumEdit.Discs)
                        {
                            <tr role='button' class="@(SelectedDiscClass(disc))" @onclick="() => _selectedDisc = disc">
                                <td class="number-container">@disc.DiscNumber.ToStringPadLeft(_maximumMediaNumberLength)</td>
                                <td>@disc.PartTitles</td>
                                <td>@disc.SongCount.ToStringPadLeft(_maximumTrackNumberLength)</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-7">
                <EditForm Model="_selectedDisc" class="form-login mt-2" FormName="DiscEdit">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>Disc Number</label>
                        <div class="mb-2">
                            <InputNumber @bind-Value="_selectedDisc.DiscNumber" class="form-control"/>
                            <ValidationMessage For="() => _selectedSong.DiscNumber"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>SubTitle</label>
                        <div class="mb-2">
                            <InputText @bind-Value="_selectedDisc.PartTitles" class="form-control"/>
                            <ValidationMessage For="() => _selectedSong.PartTitles"/>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </Content>
</Tab>
<Tab  Name="SongTab">
    <TitleTemplate>
        <Icon Name="IconName.MusicNote"/> Songs <Badge Color="BadgeColor.Info">@(_album?.Songs?.Count() ?? 0)</Badge>
    </TitleTemplate>
    <Content>
        <div class="row mt-2">
            <div class="col-5">
                <div class="table-responsive">
                    <table class="table table-striped table-bordered table-sm table-hover">
                        <thead>
                        <tr>
                            <th scope="col">Disc #</th>
                            <th scope="col">#</th>
                            <th scope="col">Title</th>
                            <th scope="col">Duration</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var song in _albumEdit.Songs)
                        {
                            <tr role='button' class="@(SelectedSongClass(song))" @onclick="() => _selectedSong = song">
                                <td class="number-container">@song.DiscNumber.ToStringPadLeft(_maximumMediaNumberLength)</td>
                                <td class="number-container">@song.SongNumber.ToStringPadLeft(_maximumTrackNumberLength)</td>
                                <td>@song.Title</td>
                                <td>@song.Duration</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-7">
                Song File: <span class="text-nerdy text-wrap">@_selectedSong.FullFileName</span>
                <EditForm Model="_selectedSong" class="form-login mt-2" FormName="SongEdit">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>Disc Number</label>
                        <div class="mb-2">
                            <InputNumber @bind-Value="_selectedSong.DiscNumber" class="form-control"/>
                            <ValidationMessage For="() => _selectedSong.DiscNumber"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Song Number</label>
                        <div class="mb-2">
                            <InputNumber @bind-Value="_selectedSong.SongNumber" class="form-control"/>
                            <ValidationMessage For="() => _selectedSong.SongNumber"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Song Title</label>
                        <div class="mb-2">
                            <InputText @bind-Value="_selectedSong.Title" class="form-control"/>
                            <ValidationMessage For="() => _selectedSong.Title"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Song Artist</label>
                        <div class="mb-2">
                            <InputText @bind-Value="_selectedSong.SongArtist" class="form-control"/>
                            <ValidationMessage For="() => _selectedSong.SongArtist"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Subtitle/Description</label>
                        <div class="mb-2">
                            <InputText @bind-Value="_selectedSong.PartTitles" class="form-control"/>
                            <ValidationMessage For="() => _selectedSong.PartTitles"/>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </Content>
</Tab>
<Tab Name="FilesTab">
    <TitleTemplate>
        <Icon Name="IconName.Files"/> Files <Badge Color="BadgeColor.Info">@(_albumEdit.AlbumDirectoryFiles.Count())</Badge>
    </TitleTemplate>
    <Content>
        <div class="row mt-2">
            <div class="col">
                <table class="table table-striped table-bordered table-sm">
                    <tbody>
                    @foreach (var albumDirectoryFile in _albumEdit.AlbumDirectoryFiles.OrderBy(x => x.FileType).ThenBy(x => x.FileSystemInfo.Name))
                    {
                        <tr>
                            <td style="width:10%;">@albumDirectoryFile.FileType</td>
                            <td style="width:85%;" class="text-wrap">@albumDirectoryFile.FileSystemInfo.Name</td>
                            <td style="width:5%;">
                                <span role="button" @onclick="_ => DeleteAlbumDirectoryFile(albumDirectoryFile)">
                                    <Icon Name="IconName.Trash"/>
                                </span>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </Content>
</Tab>
<Tab Name="IssuesTab">
    <TitleTemplate>
        <Icon Name="IconName.EmojiAngry" Color="InfoTabIconColor()"/> Issues  <Badge Color="InfoTabBadgeColor()">@(_issues.Count())</Badge>
    </TitleTemplate>
    <Content>
        <div class="row mt-2">
            <div class="col">
                <table class="table table-striped table-bordered table-sm">
                    <tbody>
                    @foreach (var info in _issues.OrderBy(x => x.SortOrder))
                    {
                        <tr>
                            <td style="width:10%;"> <Icon Color="InfoMessageColor(info)" Name="IconName.EmojiAngry"/> @info.Severity.ToString()</td>
                            <td style="width:90%;">@info.Message</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </Content>
</Tab>
<Tab Name="InfoTab">
    <TitleTemplate>
        <Icon Name="IconName.InfoSquare"/> Info
    </TitleTemplate>
    <Content>
        <div class="row mt-2">
            <div class="col-2">
                <input type="text" placeholder="Filter" @oninput="FilterChanged"/>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <table class="table table-striped table-bordered table-sm">
                    <tbody>
                    @foreach (var info in _filteredInfo.OrderBy(x => x.Key))
                    {
                        <tr>
                            <td style="width:40%;">@info.Key</td>
                            <td style="width:60%;">@info.Value</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </Content>
</Tab>
</Tabs>
</div>

<ConfirmDialog @ref="_confirmDialog" />
<Modal @ref="_changeAlbumImageModal" Title="Change album image" IsVerticallyCentered="true" />
<Modal @ref="_albumCoverSearchModal" Title="Search for album image" IsVerticallyCentered="true" />


@code {
    private string? _albumCoverBase64;
    private string? _albumFullPath;

    private IImageValidator _imageValidator;
    private ImageConvertor _imageConvertor;

    private EditContext? _editFormEditContext;
    private readonly List<ToastMessage> _messages = [];
    private List<KeyValuePair<string, object?>> _info = [];
    private List<KeyValuePair<string, object?>> _filteredInfo = [];
    private List<ValidationResultMessage> _issues = [];

    private DiscEdit _selectedDisc = new DiscEdit();
    private SongEdit _selectedSong = new SongEdit();

    private ConfirmDialog _confirmDialog = default!;

    private Modal _changeAlbumImageModal = default!;

    private Modal _albumCoverSearchModal = default!;

    private AlbumEdit _albumEdit = new AlbumEdit
    {
        Artist = string.Empty,
        Discs = [],
        Title = string.Empty,
        Year = DateTime.MinValue.Year,
        Songs = [],
        AlbumDirectoryFiles = []
    };

    private Common.Models.Album? _album;

    private short _maximumTrackNumberLength;
    private short _maximumMediaNumberLength;
    private string _formattingDateTimeDisplayActivityFormat = null!;

    [Parameter] public Guid LibraryApiKey { get; set; }

    [Parameter] public Guid Id { get; set; }

    [Parameter] public string? ReturnUrl { get; set; }

    private async Task OnRibbonItemClick(RibbonItemEventArgs args)
    {
        try
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
            switch (args.Name)
            {
                case "ChangeCoverImage":
                    await ShowChangeAlbumImageModal();
                    break;

                case "DeleteAlbumImages":
                    await DeleteAllAlbumImages();
                    break;

                case "MoveToLibrary":
                    await MoveAlbumToLibrary();
                    break;

                case "DeleteAlbum":
                    await DeleteAsync();
                    break;

                case "DoMagic":
                    await DoMagic();
                    break;

                case "ReProcess":
                    await ReProcess();
                    break;

                case "SearchForAlbumImage":
                    await SearchForAlbumImage();
                    break;

                case "SaveAlbum":
                    await SaveAlbum();
                    break;
            }
        }
        catch (Exception exception)
        {
            Logger.Error(exception, "Error performing [{Action}] on album [{albumInfo}]", args.Name, _album?.ToString());
            _messages.Add(
                new ToastMessage
                {
                    Type = ToastType.Danger,
                    Title = $"Error performing [{args.Name}]",
                    HelpText = $"{DateTime.Now}",
                    Message = exception.ToString()
                });
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
    }

    private async Task SearchForAlbumImage()
    {
        await _albumCoverSearchModal.ShowAsync<AlbumCoverSearch>(title: "Searching for album cover", parameters: new Dictionary<string, object>
        {
            { "Album", _album },
            { "OnUpdateCallback", EventCallback.Factory.Create<ImageSearchResult?>(this, SaveImageSearchResult) }
        });
    }

    private async Task SaveImageSearchResult(ImageSearchResult? selectedImageSearchResult)
    {
        if (selectedImageSearchResult == null)
        {
            await _albumCoverSearchModal.HideAsync();
            return;
        }
        var saveResult = await MediaEditService.SaveImageUrlAsCoverAsync(_album.Directory, _album.Id, selectedImageSearchResult.MediaUrl, selectedImageSearchResult.DoDeleteExistingCoverImages);
        if (saveResult.IsSuccess)
        {
            NavManager.Refresh(true);
        }
        else
        {
            _messages.Add(
                new ToastMessage
                {
                    Type = ToastType.Danger,
                    Title = $"Error saving image for album!",
                    Message = string.Join("<br />", saveResult.Messages) + "<br />" + string.Join("<br />", saveResult.Errors.ToString())
                });
        }
        await _albumCoverSearchModal.HideAsync();
        return;
    }

    private async Task MoveAlbumToLibrary()
    {
        var library = await LibraryService.GetLibraryAsync();
        var result = await LibraryService.MoveAlbumsToLibrary(library.Data, [_album]);
        if (result.IsSuccess)
        {
            NavManager.NavigateTo(ReturnUrl?.FromBase64() ?? "/");
        }
        else
        {
            _messages.Add(
                new ToastMessage
                {
                    Type = ToastType.Danger,
                    Title = $"Error moving album to library!",
                    Message = string.Join("<br />", result.Messages) + "<br />" + string.Join("<br />", result.Errors.ToString())
                });
        }
    }

    private async Task DeleteAllAlbumImages()
    {
        foreach (var file in ImageHelper.ImageFilesInDirectory(_album!.Directory!.FullName(), SearchOption.AllDirectories))
        {
            File.Delete(file);
        }
        if (_album.Songs?.Any() ?? false)
        {
            var configuration = await SettingService.GetMelodeeConfigurationAsync();
            var editSongPlugin = new AtlMetaTag(new MetaTagsProcessor(configuration, Serializer), _imageConvertor, _imageValidator, configuration);
            foreach (var song in _album.Songs)
            {
                await editSongPlugin.RemoveImagesAsync(_album.Directory!, song);
            }
        }
        if (_album.Images?.Any() ?? false)
        {
            _album.Images = [];
            await SaveAlbumMelodeeDataFile();
        }
        else
        {
            NavManager.ReloadPage();
        }
    }

    private async Task ShowChangeAlbumImageModal()
    {
        await _changeAlbumImageModal.ShowAsync<AlbumImageEdit>(title: "Changing album image", parameters: new Dictionary<string, object>
        {
            { "Album", _album },
            { "OnUpdateCallback", EventCallback.Factory.Create<Common.Models.Album>(this, SaveAlbumMelodeeDataFile) }
        });
    }

    private async Task SaveAlbumMelodeeDataFile()
    {
        if (_album != null)
        {
            var albumDirectoryName = _album.ToDirectoryName();
            if (albumDirectoryName.Nullify() != null)
            {
                var configuration = await SettingService.GetMelodeeConfigurationAsync();
                var serialized = Serializer.Serialize(_album);
                var library = (await LibraryService.GetByApiKeyAsync(LibraryApiKey)).Data!;
                var albumStagingDirInfo = new DirectoryInfo(Path.Combine(library.Path, albumDirectoryName));
                var jsonName = Path.Combine(albumStagingDirInfo.FullName, _album.ToMelodeeJsonName(configuration, true));
                await File.WriteAllTextAsync(jsonName, serialized);
                NavManager.ReloadPage();
            }
        }
    }

    private async Task DoMagic()
    {
        var confirmation = await _confirmDialog.ShowAsync(
            title: "Continue to do magic?",
            message1: "This will process the album based on configuration settings and validations and change data. There is no undo.",
            message2: "After magic this page will be reloaded. Do you want to proceed?");

        if (confirmation)
        {
            var result = await MediaEditService.DoMagic(_album.Directory, _album!.Id);
            if (result.IsSuccess)
            {
                NavManager.ReloadPage();
            }
            else
            {
                _messages.Add(
                    new ToastMessage
                    {
                        Type = ToastType.Danger,
                        Title = $"Error doing magic!",
                        Message = string.Join("<br />", result.Messages) + "<br />" + string.Join("<br />", result.Errors.ToString())
                    });
            }
        }
    }

    private async Task DeleteAsync()
    {
        var confirmation = await _confirmDialog.ShowAsync(
            title: "Sure you want to delete?",
            message1: "This will delete everything about this album. There is no undo.",
            message2: "Do you want to proceed?", new ConfirmDialogOptions
            {
                YesButtonColor = ButtonColor.Danger
            });

        if (confirmation)
        {
            Directory.Delete(_album!.Directory!.FullName(), true);
            NavManager.NavigateTo(ReturnUrl?.FromBase64() ?? "/");
        }
    }

    private async Task ReProcess()
    {
        //TODO this is borked
        throw new NotImplementedException();

        // var startTicks = Stopwatch.GetTimestamp();
        //
        // await DirectoryProcessorService.InitializeAsync();
        //
        // var result = await DirectoryProcessorService.ProcessDirectoryAsync(new FileSystemDirectoryInfo
        // {
        //     Path = _album!.Directory!.FullName(),
        //     Name = _album!.Directory!.Name
        // }, null);
        //
        // if (result.IsSuccess)
        // {
        //     var message = "ℹ️ Re-Processed directory [{DirectoryName}] in [{ElapsedTime}]";
        //     Logger.Debug(message, _album!.Directory!.FullName(), Stopwatch.GetElapsedTime(startTicks));
        //     NavManager.ReloadPage();
        // }
        // else
        // {
        //     _messages.Add(
        //         new ToastMessage
        //         {
        //             Type = ToastType.Danger,
        //             Title = $"Error re-processing album",
        //             Message = string.Join("<br />", result.Messages) + "<br />" + string.Join("<br />", result.Errors.ToString())
        //         });
        // }
    }

    private async Task SaveAlbum()
    {
        if (_editFormEditContext != null && _editFormEditContext.Validate())
        {
            MainLayoutProxyService.ToggleSpinnerVisible();

            try
            {
                var configuration = await SettingService.GetMelodeeConfigurationAsync();

                // Save album
                var library = (await LibraryService.GetByApiKeyAsync(LibraryApiKey)).Data!;
                var album = await AlbumsDiscoverer.AlbumByUniqueIdAsync(library.ToFileSystemDirectoryInfo(), Id);

                album.SetTagValue(MetaTagIdentifier.Album, _albumEdit.Title);
                album.SetTagValue(MetaTagIdentifier.Artist, _albumEdit.Artist);
                album.SetTagValue(MetaTagIdentifier.OrigAlbumYear, _albumEdit.Year);

                if (album.Songs != null)
                {
                    var editSongPlugin = new AtlMetaTag(new MetaTagsProcessor(configuration, Serializer), _imageConvertor, _imageValidator, configuration);
                    foreach (var song in album.Songs)
                    {
                        album.SetSongTagValue(song.Id, MetaTagIdentifier.Album, _albumEdit.Title);
                        album.SetSongTagValue(song.Id, MetaTagIdentifier.Artist, _albumEdit.Artist);
                        album.SetSongTagValue(song.Id, MetaTagIdentifier.OrigAlbumYear, _albumEdit.Year);
                        await editSongPlugin.UpdateSongAsync(album.Directory!, song);
                    }
                }

                var serialized = Serializer.Serialize(album);
                var albumDirectoryName = album.ToDirectoryName();
                if (albumDirectoryName.Nullify() != null)
                {
                    var albumStagingDirInfo = new DirectoryInfo(Path.Combine(library.Path, albumDirectoryName));
                    var jsonName = Path.Combine(albumStagingDirInfo.FullName, album.ToMelodeeJsonName(configuration, true));
                    await File.WriteAllTextAsync(jsonName, serialized);
                    NavManager.NavigateTo(ReturnUrl?.FromBase64() ?? "/");
                }
            }
            catch (Exception exception)
            {
                Logger.Error(exception, "Unable to save album [{albumInfo}]", _album?.ToString());
                _messages.Add(
                    new ToastMessage
                    {
                        Type = ToastType.Danger,
                        Title = $"Error saving Album",
                        HelpText = $"{DateTime.Now}",
                        Message = $"Unable to save Album edits [{exception}]",
                    });
            }
            finally
            {
                MainLayoutProxyService.ToggleSpinnerVisible();
            }
        }
    }

    protected override void OnInitialized()
    {
        _editFormEditContext = new(_albumEdit);
    }

    protected override async Task OnInitializedAsync()
    {
        var configuration = await SettingService.GetMelodeeConfigurationAsync();
        _imageValidator = new ImageValidator(configuration);
        _imageConvertor = new ImageConvertor(configuration);

        var library = (await LibraryService.GetByApiKeyAsync(LibraryApiKey)).Data!;
        await AlbumsDiscoverer.InitializeAsync();
        await MediaEditService.InitializeAsync();
        _album = await AlbumsDiscoverer.AlbumByUniqueIdAsync(library.ToFileSystemDirectoryInfo(), Id);
        _albumEdit = new AlbumEdit
        {
            Artist = _album.Artist.Name,
            Discs = _album.Songs?.GroupBy(x => x.MediaNumber()).Select(x => new DiscEdit
            {
                DiscNumber = x.Key < 1 ? 1 : x.Key,
                PartTitles = x.First().MediaSubTitle(),
                SongCount = x.Count()
            }).ToArray() ?? [],
            AlbumDirectoryFiles = _album.Directory!.AllFileInfos().Select(x => new FileEdit
            {
                FileSystemInfo = x,
                FileType = x.Extension
            }).ToArray(),
            Title = _album.AlbumTitle() ?? string.Empty,
            Year = _album.AlbumYear() ?? DateTime.MinValue.Year,
            Songs = _album.Songs?.OrderBy(x => x.MediaNumber()).ThenBy(x => x.SongNumber()).Select(x => new SongEdit
            {
                DiscNumber = x.MediaNumber() < 1 ? 1 : x.MediaNumber(),
                Duration = x.DurationTimeShort(),
                FullFileName = x.File.FullName(_album.Directory),
                IsSelected = x.SortOrder == 1,
                PartTitles = x.SubTitle(),
                SongArtist = x.SongArtist(),
                SongNumber = x.SongNumber() < 1 ? 1 : x.SongNumber(),
                Title = x.Title()
            }).ToArray() ?? []
        };
        _selectedSong = _albumEdit.Songs.FirstOrDefault() ?? new SongEdit();
        _selectedDisc = _albumEdit.Discs.FirstOrDefault() ?? new DiscEdit();
        _editFormEditContext = new(_albumEdit);
        _albumFullPath = _album.Directory?.FullName();
        _albumCoverBase64 = await _album.CoverImageBase64Async() ?? DefaultImages.AlbumCoverBase64;
        _info = [];
        _maximumTrackNumberLength = SafeParser.ToNumber<short>((await SettingService.GetValueAsync(SettingRegistry.ValidationMaximumSongNumber, 1000)).Data.ToString().Length);
        _maximumMediaNumberLength = SafeParser.ToNumber<short>((await SettingService.GetValueAsync(SettingRegistry.ValidationMaximumMediaNumber, 500)).Data.ToString().Length);
        _formattingDateTimeDisplayActivityFormat = (await SettingService.GetValueAsync(SettingRegistry.FormattingDateTimeDisplayActivityFormat, MelodeeConfiguration.FormattingDateTimeDisplayActivityFormatDefault).ConfigureAwait(false)).Data!;
        _info.Add(new KeyValuePair<string, object?>("Album: Created", _album.Created.ToString(_formattingDateTimeDisplayActivityFormat)));
        _info.Add(new KeyValuePair<string, object?>("Album: Display Summary", _album.DisplaySummary));
        _info.Add(new KeyValuePair<string, object?>("Album: Status", _album.Status.ToString()));
        _info.Add(new KeyValuePair<string, object?>("Album: Sort Name", _album.MetaTagValue<string?>(MetaTagIdentifier.SortAlbum)));
        _info.Add(new KeyValuePair<string, object?>("Album: Unique Id", _album.Id));
        _info.Add(new KeyValuePair<string, object?>("Album: Via Plugins", string.Join(", ", _album.ViaPlugins)));
        if (_album.Tags != null)
        {
            foreach (var tag in _album.Tags.OrderBy(x => x.SortOrder))
            {
                _info.Add(new KeyValuePair<string, object?>($"Album: {tag.IdentifierDescription}", tag.Value));
            }

            if (_album.Songs != null)
            {
                foreach (var song in _album.Songs.OrderBy(x => x.SortOrder))
                {
                    _info.Add(new KeyValuePair<string, object?>($"Song: {song.SongNumber().ToStringPadLeft(_maximumTrackNumberLength)}: File", song.File.ToString()));
                    _info.Add(new KeyValuePair<string, object?>($"Song: {song.SongNumber().ToStringPadLeft(_maximumTrackNumberLength)}: Unique Id", song.Id));
                    _info.Add(new KeyValuePair<string, object?>($"Song: {song.SongNumber().ToStringPadLeft(_maximumTrackNumberLength)}", song.DisplaySummary));
                    if (song.Tags != null)
                    {
                        foreach (var tag in song.Tags.OrderBy(x => x.SortOrder))
                        {
                            _info.Add(new KeyValuePair<string, object?>($"Song: {song.SongNumber().ToStringPadLeft(_maximumTrackNumberLength)}: {tag.IdentifierDescription}", tag.Value));
                        }
                    }

                    if (song.MediaAudios != null)
                    {
                        foreach (var tag in song.MediaAudios.OrderBy(x => x.SortOrder))
                        {
                            _info.Add(new KeyValuePair<string, object?>($"Song: {song.SongNumber().ToStringPadLeft(_maximumTrackNumberLength)}: {tag.Identifier.ToString()}", tag.Value));
                        }
                    }
                }
            }
        }
        _filteredInfo = _info;
        _issues = _album.ValidationMessages.ToList();
        MainLayoutProxyService.ToggleSpinnerVisible(false);
    }

    private void FilterChanged(ChangeEventArgs args)
    {
        var filterValue = args.Value?.ToString()?.ToUpperInvariant();
        _filteredInfo = filterValue != null ? _info.Where(x => x.Key.ToUpperInvariant().Contains(filterValue) || (x.Value != null && x.Value.ToString()!.ToUpperInvariant().Contains(filterValue))).ToList() : _info;
    }

    private string SelectedSongClass(SongEdit song) => song == _selectedSong ? "selected" : string.Empty;

    private object SelectedDiscClass(DiscEdit disc) => disc == _selectedDisc ? "selected" : string.Empty;

    private void DeleteAlbumDirectoryFile(FileEdit albumDirectoryFile)
    {
        try
        {
            albumDirectoryFile.FileSystemInfo.Delete();
            _albumEdit.AlbumDirectoryFiles = _albumEdit.AlbumDirectoryFiles.Where(x => x != albumDirectoryFile).ToArray();
        }
        catch (Exception exception)
        {
            Logger.Error(exception, "Unable to delete file [{FileName}]", albumDirectoryFile.FileSystemInfo.FullName);
            _messages.Add(
                new ToastMessage
                {
                    Type = ToastType.Danger,
                    Title = $"Error deleting file",
                    HelpText = $"{DateTime.Now}",
                    Message = $"Unable to delete file [{ albumDirectoryFile.FileSystemInfo.FullName}] Error [{exception.Message}].",
                });
        }
    }

    private IconColor InfoMessageColor(ValidationResultMessage info)
    {
        return info.Severity switch
        {
            ValidationResultMessageSeverity.Critical => IconColor.Danger,
            _ => IconColor.Warning
        };
    }

    private IconColor InfoTabIconColor()
        => _issues.Any(x => x.Severity == ValidationResultMessageSeverity.Critical) ? IconColor.Danger : IconColor.Warning;

    private BadgeColor AlbumBadgeColor()
    {
        if (_album != null)
        {
            switch (_album.Status)
            {
                case AlbumStatus.Ok:
                    return BadgeColor.Success;

                case AlbumStatus.New:
                    return BadgeColor.Info;
            }
        }
        return BadgeColor.Warning;
    }

    private BadgeColor InfoTabBadgeColor()
        => _issues.Any(x => x.Severity == ValidationResultMessageSeverity.Critical) ? BadgeColor.Danger : BadgeColor.Warning;

}
