@page "/staging"

@using System.Diagnostics
@using Melodee.Common.Models.Cards
@using FilterOperator = Melodee.Common.Filtering.FilterOperatorInfo

@inject AlbumDiscoveryService AlbumsDiscoverer
@inject DefaultImages DefaultImages
@inject LibraryService LibraryService
@inject MainLayoutProxyService MainLayoutProxyService
@inject NavigationManager NavManager
@inject Serilog.ILogger Logger
@inject SettingService SettingService

<PageTitle>Staging</PageTitle>

<Toasts class="p-3" Messages="_messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight"/>

<div class="staging-container grid-container">
    <p class="font-monospace fs-6">@(_libraryFolderName ?? "Loading...")</p>
    <Ribbon OnClick="OnRibbonItemClick">
        <RibbonTab Title="Actions" Active="true">
            <Content>
                <RibbonItem Name="RefreshDirectory" IconSize="IconSize.x5" IconColor="IconColor.Primary" IconName="IconName.ArrowClockwise">Refresh</RibbonItem>
                <RibbonItem Name="DeleteSelected" IconSize="IconSize.x5" IconColor="IconColor.Danger" IconName="IconName.Trash">Delete</RibbonItem>
                <RibbonItem Name="MoveToLibrary" IconSize="IconSize.x5" IconColor="IconColor.Warning" IconName="IconName.FolderSymlink">Move To Library</RibbonItem>
                <RibbonItem Name="PurgeDirectory" IconSize="IconSize.x5" IconColor="IconColor.Danger" IconName="IconName.FileEarmarkX">Purge</RibbonItem>
            </Content>
        </RibbonTab>
    </Ribbon>

    <div class="mt-2">
        <Grid @ref="_grid"
              TItem="AlbumCard"
              Class="table table-hover table-bordered table-striped"
              DataProvider="AlbumDataProvider"
              AllowRowClick="true"
              AllowFiltering="true"
              AllowPaging="true"
              AllowSorting="true"
              PageSize="_defaultPageSize"
              OnRowDoubleClick="OnRowDoubleClick"
              AllowSelection="true"
              SelectionMode="GridSelectionMode.Multiple"
              SelectedItemsChanged="OnSelectedItemsChanged"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="AlbumCard" ColumnClass="@(x => "ml-2 cover-image-column")" Filterable="false" Sortable="false" HeaderText="Cover" PropertyName="Cover" SortString="Title" SortKeySelector="item => item.Title">
                    <img alt="@context.Title" class="cover-image" src="@(context.ImageBase64 ?? DefaultImages.ReleaseCover)"/>
                </GridColumn>
                <GridColumn TItem="AlbumCard" HeaderText="Artist" PropertyName="Artist" SortString="Artist" SortKeySelector="item => item.Artist">
                    @context.Artist
                </GridColumn>
                <GridColumn TItem="AlbumCard" HeaderText="Year" PropertyName="Year" SortString="Year" SortKeySelector="item => item.Year">
                    @context.Year
                </GridColumn>
                <GridColumn TItem="AlbumCard" HeaderText="Title" PropertyName="Title" SortString="Title" SortKeySelector="item => item.Title">
                    @context.Title
                </GridColumn>
                <GridColumn TItem="AlbumCard" HeaderText="Duration" PropertyName="Duration" SortString="Duration" SortKeySelector="item => item.Duration">
                    @context.Duration
                </GridColumn>
                <GridColumn TItem="AlbumCard" di HeaderText="Duration" PropertyName="Duration" SortString="Duration" SortKeySelector="item => item.Duration">
                    @context.Duration
                </GridColumn>
                <GridColumn TItem="AlbumCard" HeaderText="Song #" PropertyName="SongCount" SortString="SongCount" SortKeySelector="item => item.SongCount">
                    @context.SongCount
                </GridColumn>
            </GridColumns>

        </Grid>
    </div>
</div>

<ConfirmDialog @ref="_confirmDeleteDialog" />

@code {
    private readonly List<ToastMessage> _messages = [];
    private int _libraryId;
    private Guid _libraryApiKey;
    private string? _libraryFolderName;
    private Grid<AlbumCard> _grid = default!;
    private short _defaultPageSize;
    private string _formattingDateTimeDisplayActivityFormat = null!;
    private ConfirmDialog _confirmDeleteDialog = default!;
    private HashSet<AlbumCard> _selectedAlbumCards = new();

    private void OnRowDoubleClick(GridRowEventArgs<AlbumCard> args)
    {
        NavManager.NavigateTo($"/album/{_libraryApiKey}/{args.Item.UniqueId}/{"/staging".ToBase64()}");
    }

    private Task OnSelectedItemsChanged(HashSet<AlbumCard> albumCards)
    {
        _selectedAlbumCards = albumCards.Any() ? albumCards : [];
        return Task.CompletedTask;
    }

    private async Task ShowConfirmDeleteAsync()
    {
        var confirmation = await _confirmDeleteDialog.ShowAsync(
            title: "Sure you want to delete?",
            message1: "This will delete everything about selected albums.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            foreach (var selected in _selectedAlbumCards)
            {
                if (selected.DirectoryName != null)
                {
                    Directory.Delete(selected.DirectoryName, true);
                    Logger.Debug("Deleted Staging Directory [{0}]", selected.DirectoryName);
                }
            }
            await _grid.RefreshDataAsync();
        }
    }

    private async Task ShowConfirmMoveToLibraryAsync()
    {
        var startTicks = Stopwatch.GetTimestamp();
        var confirmation = await _confirmDeleteDialog.ShowAsync(
            title: "Move selected albums to Library?",
            message1: $"This will move all {_selectedAlbumCards.Count.ToStringPadLeft(4)} selected albums to the Library.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            foreach (var selected in _selectedAlbumCards)
            {
                if (selected.DirectoryName != null)
                {
                    Directory.Delete(selected.DirectoryName, true);
                    Logger.Debug("Deleted Staging Directory [{0}]", selected.DirectoryName);
                }
            }
            _messages.Add(
                new ToastMessage
                {
                    Type = ToastType.Info,
                    Title = $"Moved {_selectedAlbumCards.Count.ToStringPadLeft(4)} albums to the Library.",
                    HelpText = $"{DateTime.Now}",
                    Message = $"Moving albums total elapsed time { Stopwatch.GetElapsedTime(startTicks).ToString(_formattingDateTimeDisplayActivityFormat) }.",
                });
            await _grid.RefreshDataAsync();
        }
    }

    private async Task ShowConfirmPurgeAsync()
    {
        var confirmation = await _confirmDeleteDialog.ShowAsync(
            title: "Sure you want to purge?",
            message1: "This will delete all history and all albums in Staging library.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            await LibraryService.PurgeLibraryAsync(_libraryId);
            await _grid.RefreshDataAsync();
        }
    }

    private async Task OnRibbonItemClick(RibbonItemEventArgs args)
    {
        if (args.Name == "DeleteSelected" && _selectedAlbumCards.Count > 0)
        {
            await ShowConfirmDeleteAsync();
        }
        if (args.Name == "MoveToLibrary" && _selectedAlbumCards.Count > 0)
        {
            await ShowConfirmMoveToLibraryAsync();
        }
        if (args.Name == "PurgeDirectory")
        {
            await ShowConfirmPurgeAsync();
        }
        if (args.Name == "RefreshDirectory")
        {
            await _grid.RefreshDataAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var library = (await LibraryService.GetStagingLibraryAsync()).Data!;
        _libraryFolderName = library.Path;
        _libraryId = library.Id;
        _libraryApiKey = library.ApiKey;
        _defaultPageSize = (await SettingService.GetValueAsync<short>(SettingRegistry.DefaultsPageSize, 10)).Data!;
        _formattingDateTimeDisplayActivityFormat = (await SettingService.GetValueAsync(SettingRegistry.FormattingDateTimeDisplayActivityFormat, MelodeeConfiguration.FormattingDateTimeDisplayActivityFormatDefault)).Data!;
        StateHasChanged();
    }

    private async Task<GridDataProviderResult<AlbumCard>> AlbumDataProvider(GridDataProviderRequest<AlbumCard> request)
    {
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            if (_libraryFolderName == null)
            {
                return new GridDataProviderResult<AlbumCard> { Data = [], TotalCount = 0 };
            }

            Dictionary<string, string>? sorting = null;
            if (request.Sorting.Any())
            {
                sorting = request.Sorting.ToDictionary(x => x.SortString, x => x.SortDirection == SortDirection.Descending ? PagedRequest.OrderDescDirection : PagedRequest.OrderAscDirection);
            }

            FilterOperator[]? filters = null;
            if (request.Filters.Any())
            {
                filters = request.Filters.Select(x => new Melodee.Common.Filtering.FilterOperatorInfo(x.PropertyName, SafeParser.ToEnum<Melodee.Common.Filtering.FilterOperator>(x.Operator.ToString()), x.Value)).ToArray();
            }

            await AlbumsDiscoverer.InitializeAsync();
            var result = await AlbumsDiscoverer.AlbumsGridsForDirectoryAsync(new FileSystemDirectoryInfo
            {
                Path = _libraryFolderName,
                Name = _libraryFolderName
            }, new PagedRequest
            {
                FilterBy = filters,
                Page = request.PageNumber,
                PageSize = SafeParser.ToNumber<short>(request.PageSize),
                OrderBy = sorting
            });
            return new GridDataProviderResult<AlbumCard> { Data = result.Data, TotalCount = result.TotalCount };
        }
        catch (Exception e)
        {
            Logger.Error(e, "Library Folder [{0}]", _libraryFolderName);
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
        return new GridDataProviderResult<AlbumCard> { Data = [], TotalCount = 0 };
    }
}

