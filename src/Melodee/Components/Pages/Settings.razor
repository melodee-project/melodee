@page "/settings"
@using FilterOperator = Melodee.Common.Filtering.FilterOperatorInfo

@inject ISerializer Serializer
@inject Serilog.ILogger Logger
@inject SettingService SettingService
@inject ModalService ModalService

<PageTitle>Settings</PageTitle>

<div class="inbound-container">
    <div class="loading-container @(_isLoading ? string.Empty  : "d-none")">
        <Spinner />
    </div>
    <div>
        <Grid @ref="_grid"
              TItem="Setting"
              Class="table table-hover table-bordered table-striped"
              DataProvider="SettingDataProvider"
              AllowRowClick="true"
              AllowFiltering="true"
              AllowPaging="true"
              AllowSorting="true"
              OnRowDoubleClick="OnRowDoubleClick"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="Setting" HeaderText="Key" PropertyName="Key" IsDefaultSortColumn="true" SortKeySelector="item => item.Key">
                    @context.Key
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="Category" PropertyName="Category" Filterable="false" SortKeySelector="item => item.Category">
                    @context.Category
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="Value" PropertyName="Value" Filterable="false" SortKeySelector="item => item.Value">
                    @context.Value
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="Description" PropertyName="Description" Filterable="false" SortKeySelector="item => item.Description">
                    @context.Description
                </GridColumn>
            </GridColumns>

        </Grid>
    </div>
</div>


@code {

    private Grid<Setting> _grid = default!;
    private short _defaultPageSize;
    private bool _isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _defaultPageSize = (await SettingService.GetValueAsync<short>(SettingRegistry.DefaultsPageSize))?.Data ?? 10;
        StateHasChanged();
    }

    private async Task OnRowDoubleClick(GridRowEventArgs<Setting> args)
    {
        await ModalService.ShowAsync(new ModalOption { Type = ModalType.Primary, Title = "Setting Detail", Message = Serializer.Serialize(args.Item) ?? string.Empty });
    }

    private async Task<GridDataProviderResult<Setting>> SettingDataProvider(GridDataProviderRequest<Setting> request)
    {
        _isLoading = true;
        try
        {
            Dictionary<string, string>? sorting = null;
            if (request.Sorting.Any())
            {
                sorting = request.Sorting.ToDictionary(x => x.SortString, x => x.SortDirection.ToString());
            }

            FilterOperator[]? filters = null;
            if (request.Filters.Any())
            {
                filters = request.Filters.Select(x => new Melodee.Common.Filtering.FilterOperatorInfo(x.PropertyName, SafeParser.ToEnum<Melodee.Common.Filtering.FilterOperator>(x.Operator.ToString()), x.Value)).ToArray();
            }

            var result = await SettingService.ListAsync(new PagedRequest
            {
                FilterBy = filters,
                Page = request.PageNumber,
                PageSize = SafeParser.ToNumber<short>(request.PageSize),
                OrderBy = sorting
            }, request.CancellationToken);
            return new GridDataProviderResult<Setting> { Data = result.Data, TotalCount = result.TotalCount };
        }
        catch (Exception e)
        {
            Logger.Error(e, "Loading Settings");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
        return new GridDataProviderResult<Setting>();
    }

}
