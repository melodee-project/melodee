@page "/settings"
@using FFMpegCore.Enums
@using Melodee.Common.Constants
@using Melodee.Common.Data.Models
@using Melodee.Common.Models
@using Melodee.Common.Utility

@inject Serilog.ILogger Logger
@inject SettingService SettingService

<PageTitle>Settings</PageTitle>

<div class="inbound-container">
    <Ribbon OnClick="OnRibbonItemClick">
        <RibbonTab Title="Settings">
            <Content>
                <RibbonItemGroup>
                    <RibbonItem Name="NewSetting" IconColor="IconColor.Success" IconName="IconName.PlusSquare" IconSize="IconSize.x2" IsFirstItem="true">New</RibbonItem>
                    <RibbonItem Name="EditSetting" IconColor="IconColor.Primary" IconName="IconName.PencilSquare" IconSize="IconSize.x2">Edit</RibbonItem>
                </RibbonItemGroup>
            </Content>
        </RibbonTab>
    </Ribbon>

    <div class="mt-2">
        <Grid @ref="grid"
              TItem="Setting"
              Class="table table-hover table-bordered table-striped"
              DataProvider="SettingDataProvider"
              AllowFiltering="true"
              AllowPaging="true"
              AllowSorting="true"
              SelectionMode="GridSelectionMode.Multiple"
              SelectedItemsChanged="OnSelectedItemsChanged"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="Setting" HeaderText="Key" PropertyName="Key">
                    @context.Key
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="Category" PropertyName="Category">
                    @context.Category
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="Value" PropertyName="Value">
                    @context.Value
                </GridColumn>
            </GridColumns>

        </Grid>
    </div>
</div>


@code {

    string? selectedRibbonItem;
    string? _libraryFolderName = "Loading...";
    private Grid<Setting> grid = default!;
    private short _defaultPageSize;

    private void OnRibbonItemClick(RibbonItemEventArgs args)
    {
        selectedRibbonItem = args.Name;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _libraryFolderName = (await SettingService.GetValueAsync<string>(SettingRegistry.DirectoryInbound))?.Data;
        _defaultPageSize = (await SettingService.GetValueAsync<short>(SettingRegistry.DefaultsPageSize))?.Data ?? 10;
        StateHasChanged();
    }

    private Task OnSelectedItemsChanged(HashSet<Setting> employees)
    {
        // selectedEmployees = employees is not null && employees.Any() ? employees : new();
        return Task.CompletedTask;
    }

    private async Task<GridDataProviderResult<Setting>> SettingDataProvider(GridDataProviderRequest<Setting> request)
    {
        string sortString = "";
        SortDirection sortDirection = SortDirection.None;
        if (request.Sorting.Any())
        {
            sortString = request.Sorting.FirstOrDefault()!.SortString;
            sortDirection = request.Sorting.FirstOrDefault()!.SortDirection;
        }

        string? filter = null;
        if (request.Filters.Any())
        {
            filter = request.Filters.First().Value;
        }
        var result = await SettingService.ListAsync(new PagedRequest
        {
            Filter = filter,
            Order = sortDirection.ToString(),
            Page = request.PageNumber,
            PageSize = SafeParser.ToNumber<short>(request.PageSize),
            Sort = sortString
        }, request.CancellationToken);
        return new GridDataProviderResult<Setting> { Data = result.Data, TotalCount = result.TotalCount };
    }

}
