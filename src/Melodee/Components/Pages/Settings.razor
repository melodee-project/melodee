@page "/settings"
@using FluentValidation.Internal
@using Melodee.Common.Extensions
@using FilterOperator = Melodee.Common.Filtering.FilterOperatorInfo

@inject Serilog.ILogger Logger
@inject SettingService SettingService

<PageTitle>Settings</PageTitle>

<div class="inbound-container">
    <div class="loading-container @(_isLoading ? string.Empty : "d-none")">
        <Spinner/>
    </div>
    <div>
        <Grid @ref="_grid"
              TItem="Setting"
              Class="table table-hover table-bordered table-striped"
              DataProvider="SettingDataProvider"
              AllowRowClick="true"
              AllowFiltering="true"
              AllowPaging="true"
              AllowSorting="true"
              OnRowDoubleClick="OnRowDoubleClick"
              PageSize="_defaultPageSize"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="Setting" HeaderText="Key" PropertyName="Key" IsDefaultSortColumn="true" SortKeySelector="item => item.Key">
                    @context.Key
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="Category" PropertyName="Category" Filterable="false" SortKeySelector="item => item.CategoryValue">
                    @context.CategoryValue
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="Value" PropertyName="Value" Filterable="false" SortKeySelector="item => item.Value">
                    @context.Value
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="Comment" PropertyName="Comment" Filterable="false" SortKeySelector="item => item.Comment">
                    @context.Comment
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="Action" HeaderTextAlignment="Alignment.Center">
                    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
                        <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="async () => await EditSettingAsync(context)"> Edit </Button>
                    </div>
                </GridColumn>
            </GridColumns>

        </Grid>
    </div>
</div>
<Modal @ref="_dictionaryModal" />
<Modal @ref="_editModal" Title="Edit Setting" />

@code {
    private Modal _dictionaryModal = default!;
    private Modal _editModal = default!;
    private Grid<Setting> _grid = default!;
    private short _defaultPageSize = 25;
    private bool _isLoading = true;
    private IMelodeeConfiguration _configuration = new MelodeeConfiguration([]);

    private async Task EditSettingAsync(Setting setting)
    {
        var parameters = new Dictionary<string, object>
        {
            { "Setting", setting },
            { "OnUpdateCallback", EventCallback.Factory.Create<Setting>(this, RefreshGrid) }
        };
        await _editModal.ShowAsync<SettingEdit>(title: "Editing Setting", parameters: parameters);
    }

    private async Task RefreshGrid(Setting employee)
    {
        await _editModal.HideAsync();
        await _grid.RefreshDataAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        _configuration = await SettingService.GetMelodeeConfigurationAsync();
        _defaultPageSize = _configuration.GetValue<short>(SettingRegistry.DefaultsPageSize);
    }

    private async Task OnRowDoubleClick(GridRowEventArgs<Setting> args)
    {
        var parameters = new Dictionary<string, object>
        {
            { "ModelDictionary", args.Item.ToDictionary() }
        };
        await _dictionaryModal.ShowAsync<DictionaryModal>(title: "Setting Detail", parameters: parameters);
    }

    private async Task<GridDataProviderResult<Setting>> SettingDataProvider(GridDataProviderRequest<Setting> request)
    {
        _isLoading = true;
        try
        {
            Dictionary<string, string>? sorting = null;
            if (request.Sorting.Any())
            {
                sorting = request.Sorting.ToDictionary(x => x.SortKeySelector.GetMember().Name, x => x.SortDirection == SortDirection.Descending ? PagedRequest.OrderDescDirection :  PagedRequest.OrderAscDirection);
            }

            FilterOperator[]? filters = null;
            if (request.Filters.Any())
            {
                filters = request.Filters.Select(x => new Melodee.Common.Filtering.FilterOperatorInfo(x.PropertyName, SafeParser.ToEnum<Melodee.Common.Filtering.FilterOperator>(x.Operator.ToString()), x.Value)).ToArray();
            }

            var result = await SettingService.ListAsync(new PagedRequest
            {
                FilterBy = filters,
                Page = request.PageNumber,
                PageSize = SafeParser.ToNumber<short>(request.PageSize),
                OrderBy = sorting
            }, request.CancellationToken);
            return new GridDataProviderResult<Setting> { Data = result.Data, TotalCount = result.TotalCount };
        }
        catch (Exception e)
        {
            Logger.Error(e, "Loading Settings");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
        return new GridDataProviderResult<Setting>();
    }

}
