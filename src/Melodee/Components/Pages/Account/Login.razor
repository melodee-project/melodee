@page "/account/login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using Melodee.ViewModels
@inject NavigationManager NavManager

@attribute [AllowAnonymous]

<style>
    .login-container {
        display: -ms-flexbox;
        display: -webkit-box;
        display: flex;
        -ms-flex-align: center;
        -ms-flex-pack: center;
        -webkit-box-align: center;
        align-items: center;
        -webkit-box-pack: center;
        justify-content: center;
        padding-top: 40px;
        padding-bottom: 40px;
        background-color: #f5f5f5;
    }
    .form-login {
        width: 100%;
        max-width: 330px;
        padding: 15px;
        margin: 0 auto;
    }
    .form-login .checkbox {
        font-weight: 400;
    }
    .form-login .form-control {
        position: relative;
        box-sizing: border-box;
        height: auto;
        padding: 10px;
        font-size: 16px;
    }
    .form-login .form-control:focus {
        z-index: 2;
    }
    .form-login input[type="email"] {
        margin-bottom: -1px;
        border-bottom-right-radius: 0;
        border-bottom-left-radius: 0;
    }
    .form-login input[type="password"] {
        margin-bottom: 10px;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
    }
</style>

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

<div class="text-center">
    <p>ðŸš¨ Please login or register.</p>
</div>

<div class="text-center login-container">
    <EditForm Model="@UserCredentials" class="form-login" OnValidSubmit="ClickLogin">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <label for="inputEmail" class="sr-only">Email address</label>
            <input type="email" id="inputEmail" @bind="UserCredentials.EmailAddress" class="form-control" placeholder="Email address" required autofocus>
            <ValidationMessage For="@(() => UserCredentials.EmailAddress)"/>
        </div>
        <div class="form-group">
            <label for="inputPassword" class="sr-only">Password</label>
            <input type="password" id="inputPassword" @bind="UserCredentials.Password" class="form-control" placeholder="Password" required>
            <ValidationMessage For="@(() => UserCredentials.Password)"/>
        </div>
        <div class="checkbox mb-3">
            <label>
                <input type="checkbox" @bind="UserCredentials.RememberMe" value="remember-me"> Remember me
            </label>
        </div>
        <button disabled="@loading" class="btn btn-lg btn-primary btn-block" type="submit">
            @if (loading)
            {
                <Spinner/>
            }
            Login
        </button>
        <NavLink href="account/register" class="btn btn-link">Register</NavLink>
    </EditForm>
</div>


@code {
    private List<ToastMessage> messages = new List<ToastMessage>();
    private bool loading;

    [CascadingParameter] public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] public Credential UserCredentials { get; set; } = new Credential();

    [SupplyParameterFromQuery] [Parameter] public string? ReturnUrl { get; set; }

    public async Task ClickLogin()
    {

        loading = true;
        try
        {
           // await AccountService.Login(model);
           // var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";

           var claims = new List<Claim>();
           claims.Add(new Claim(ClaimTypes.Name, "test")); // add more claims

           var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

           var principal = new ClaimsPrincipal(claimsIdentity);

           // Sign in the user
           await HttpContext.SignInAsync(principal);

           NavManager.NavigateTo(ReturnUrl ?? "/");
        }
        catch (Exception ex)
        {
            messages.Add(
                new ToastMessage
                {
                    Type = ToastType.Danger,
                    Title = "Unable to login",
                    HelpText = $"{DateTime.Now}",
                    Message = $"Melodee is unable to log you in. Perhaps you are banned?",
                });

            loading = false;
            StateHasChanged();
        }
    }
}
