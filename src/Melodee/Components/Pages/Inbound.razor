@page "/inbound"

@using Melodee.Common.Models.Cards
@using Melodee.Services.Scanning
@using FilterOperator = Melodee.Common.Filtering.FilterOperatorInfo

@inject MainLayoutProxyService MainLayoutProxyService
@inject Serilog.ILogger Logger
@inject SettingService SettingService
@inject AlbumDiscoveryService AlbumsDiscoverer

<PageTitle>Inbound</PageTitle>

<div class="inbound-container grid-container">
    <Ribbon OnClick="OnRibbonItemClick">
        <RibbonTab Title="@(_libraryFolderName ?? "Loading...")">
            <Content>
                <RibbonItemGroup Text="Actions">
                    <RibbonItem Name="RefreshDirectory" IconColor="IconColor.Primary" IconName="IconName.ArrowClockwise" IconSize="IconSize.x2">Refresh</RibbonItem>
                    <RibbonItem Name="ProcessDirectory" IconColor="IconColor.Primary" IconName="IconName.Cpu" IconSize="IconSize.x2">Process</RibbonItem>
                    <RibbonItem Name="DeleteSelected" IconColor="IconColor.Danger" IconName="IconName.Trash" IconSize="IconSize.x2">Delete</RibbonItem>
                    <RibbonItem Name="PurgeDirectory" IconColor="IconColor.Danger" IconName="IconName.FileEarmarkX" IconSize="IconSize.x2">Purge</RibbonItem>
                </RibbonItemGroup>
            </Content>
        </RibbonTab>
    </Ribbon>

    <div class="mt-2">
        <Grid @ref="_grid"
              TItem="AlbumCard"
              Class="table table-hover table-bordered table-striped"
              DataProvider="AlbumDataProvider"
              AllowRowClick="true"
              AllowFiltering="true"
              AllowPaging="true"
              AllowSorting="true"
              PageSize="_defaultPageSize"
              AllowSelection="true"
              SelectionMode="GridSelectionMode.Multiple"
              SelectedItemsChanged="OnSelectedItemsChanged"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="AlbumCard" ColumnClass="@(x => "ml-2 cover-image-column")" Filterable="false" Sortable="false" HeaderText="Cover" PropertyName="Cover" SortString="Title" SortKeySelector="item => item.Title">
                    <img alt="@context.Title" class="cover-image" src="@(context.ImageBase64 ?? _defaultReleaseCover)"/>
                </GridColumn>
                <GridColumn TItem="AlbumCard" HeaderText="Artist" PropertyName="Artist" SortString="Artist" SortKeySelector="item => item.Artist">
                    @context.Artist
                </GridColumn>
                <GridColumn TItem="AlbumCard" HeaderText="Year" PropertyName="Year" SortString="Year" SortKeySelector="item => item.Year">
                    @context.Year
                </GridColumn>
                <GridColumn TItem="AlbumCard" HeaderText="Title" PropertyName="Title" SortString="Title" SortKeySelector="item => item.Title">
                    @context.Title
                </GridColumn>
                <GridColumn TItem="AlbumCard" HeaderText="Song #" PropertyName="SongCount" SortString="SongCount" SortKeySelector="item => item.SongCount">
                    @context.SongCount
                </GridColumn>
            </GridColumns>

        </Grid>
    </div>
</div>

<ConfirmDialog @ref="_confirmDeleteDialog" />

@code {
    private string? _selectedRibbonItem;
    private string? _libraryFolderName;
    private Grid<AlbumCard> _grid = default!;
    private short _defaultPageSize;
    private string? _defaultReleaseCover;
    private ConfirmDialog _confirmDeleteDialog = default!;
    private HashSet<AlbumCard> _selectedAlbumCards = new();

    private Task OnSelectedItemsChanged(HashSet<AlbumCard> albumCards)
    {
        _selectedAlbumCards = albumCards.Any() ? albumCards : [];
        return Task.CompletedTask;
    }

    private async Task ShowConfirmDeleteAsync()
    {
        var confirmation = await _confirmDeleteDialog.ShowAsync(
            title: "Sure you want to delete?",
            message1: "This will delete the selected Melodee JSON Data files (melodee.json).",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            foreach (var selected in _selectedAlbumCards)
            {
                File.Delete(selected.MelodeeDataFileName);
                Logger.Debug("Deleted Melodee Data File [{0}]", selected.MelodeeDataFileName);
            }
            await _grid.RefreshDataAsync();
        }
    }

    private async Task OnRibbonItemClick(RibbonItemEventArgs args)
    {
        _selectedRibbonItem = args.Name;
        if (args.Name == "DeleteSelected")
        {
            await ShowConfirmDeleteAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _libraryFolderName = (await SettingService.GetValueAsync<string>(SettingRegistry.DirectoryInbound))!.Data!;
        _defaultPageSize = (await SettingService.GetValueAsync<short>(SettingRegistry.DefaultsPageSize))?.Data ?? 10;
        _defaultReleaseCover = $"data:image/jpeg;base64,{ Convert.ToBase64String(await File.ReadAllBytesAsync("wwwroot/images/release.jpg"))}";
        StateHasChanged();
    }

    private async Task<GridDataProviderResult<AlbumCard>> AlbumDataProvider(GridDataProviderRequest<AlbumCard> request)
    {
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            if (_libraryFolderName == null)
            {
                return new GridDataProviderResult<AlbumCard> { Data = [], TotalCount = 0 };
            }

            Dictionary<string, string>? sorting = null;
            if (request.Sorting.Any())
            {
                sorting = request.Sorting.ToDictionary(x => x.SortString, x => x.SortDirection == SortDirection.Descending ? PagedRequest.OrderDescDirection : PagedRequest.OrderAscDirection);
            }

            FilterOperator[]? filters = null;
            if (request.Filters.Any())
            {
                filters = request.Filters.Select(x => new Melodee.Common.Filtering.FilterOperatorInfo(x.PropertyName, SafeParser.ToEnum<Melodee.Common.Filtering.FilterOperator>(x.Operator.ToString()), x.Value)).ToArray();
            }

            await AlbumsDiscoverer.InitializeAsync();
            var result = await AlbumsDiscoverer.AlbumsGridsForDirectoryAsync(new FileSystemDirectoryInfo
            {
                Path = _libraryFolderName,
                Name = _libraryFolderName
            }, new PagedRequest
            {
                FilterBy = filters,
                Page = request.PageNumber,
                PageSize = SafeParser.ToNumber<short>(request.PageSize),
                OrderBy = sorting
            });
            return new GridDataProviderResult<AlbumCard> { Data = result.Data, TotalCount = result.TotalCount };
        }
        catch (Exception e)
        {
            Logger.Error(e, "Library Folder [{0}]", _libraryFolderName);
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
        return new GridDataProviderResult<AlbumCard> { Data = [], TotalCount = 0 };
    }
}

