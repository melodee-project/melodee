// <auto-generated />
using System;
using Melodee.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melodee.Common.Migrations
{
    [DbContext(typeof(MelodeeDbContext))]
    partial class MelodeeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AlbumStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("AlbumType")
                        .HasColumnType("smallint");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<short?>("DiscCount")
                        .HasColumnType("smallint");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.PrimitiveCollection<string[]>("Genres")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompilation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MetaDataStatus")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("Moods")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<LocalDate?>("OriginalReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<LocalDate>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<double?>("ReplayGain")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReplayPeak")
                        .HasColumnType("double precision");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("ArtistId", "Name")
                        .IsUnique();

                    b.HasIndex("ArtistId", "NameNormalized")
                        .IsUnique();

                    b.HasIndex("ArtistId", "SortName")
                        .IsUnique();

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<short>("DiscNumber")
                        .HasColumnType("smallint");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId", "DiscNumber")
                        .IsUnique();

                    b.ToTable("AlbumDiscs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumCount")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.Property<int>("MetaDataStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<string>("RealName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Roles")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SongCount")
                        .HasColumnType("integer");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("LibraryId");

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameNormalized");

                    b.HasIndex("SortName");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.ArtistRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<int>("ArtistRelationType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("RelatedArtistId")
                        .HasColumnType("integer");

                    b.Property<Instant?>("RelationEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("RelationStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("RelatedArtistId");

                    b.HasIndex("ArtistId", "RelatedArtistId")
                        .IsUnique();

                    b.ToTable("ArtistRelation");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<string>("ContributorName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ContributorType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MetaTagIdentifier")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SubRole")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("ArtistId", "MetaTagIdentifier", "AlbumId")
                        .IsUnique();

                    b.HasIndex("ContributorName", "MetaTagIdentifier", "AlbumId")
                        .IsUnique();

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("ArtistCount")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastScanAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("SongCount")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Libraries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("23334954-0f0c-45b0-9327-34db9b5f7a19"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            Description = "Files in this directory are scanned and Album information is gathered via processing.",
                            IsLocked = false,
                            Name = "Inbound",
                            Path = "/storage/inbound/",
                            SortOrder = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("ee664ae1-5599-4028-9df3-f65baf15a2ed"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            Description = "The staging directory to place processed files into (Inbound -> Staging -> Library).",
                            IsLocked = false,
                            Name = "Staging",
                            Path = "/storage/staging/",
                            SortOrder = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("308bd9ba-f57d-4fa1-94ab-b8a2bcfbe16e"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            Description = "The library directory to place processed, reviewed and ready to use music files into.",
                            IsLocked = false,
                            Name = "Storage",
                            Path = "/storage/library/",
                            SortOrder = 0,
                            Type = 3
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = new Guid("8b3c29ae-ed89-46a1-8976-f537e2e133ce"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            Description = "Library where user images are stored.",
                            IsLocked = false,
                            Name = "User Images",
                            Path = "/storage/images/users/",
                            SortOrder = 0,
                            Type = 4
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<int?>("ForAlbumId")
                        .HasColumnType("integer");

                    b.Property<int?>("ForArtistId")
                        .HasColumnType("integer");

                    b.Property<int>("FoundAlbumsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundArtistsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundSongsCount")
                        .HasColumnType("integer");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsCurrentSong")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayQueId")
                        .HasColumnType("integer");

                    b.Property<double>("Position")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayQues");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Hostname")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxBitRate")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("ScrobbleEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("TranscodingId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "Client", "UserAgent");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedUserIds")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasCustomImage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.HasKey("SongId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId", "PlaylistId")
                        .IsUnique();

                    b.ToTable("PlaylistSong");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.RadioStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("HomePageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StreamUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.ToTable("RadioStations");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByUserAgent")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("ByUserId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FoundAlbumsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundArtistsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundOtherItems")
                        .HasColumnType("integer");

                    b.Property<int>("FoundSongsCount")
                        .HasColumnType("integer");

                    b.Property<double>("SearchDurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("SearchQuery")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("SearchHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Category");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("f2c46bbb-148c-4d8b-a36d-deee397b5ba1"),
                            Comment = "Add a default filter to show only albums with this or less number of songs.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "filtering.lessThanSongCount",
                            SortOrder = 0,
                            Value = "3"
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("214159c6-872c-4f6f-93ce-7be5dd5931c8"),
                            Comment = "Add a default filter to show only albums with this or less duration.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "filtering.lessThanDuration",
                            SortOrder = 0,
                            Value = "720000"
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("d07c54b5-6be0-46ac-97b8-559de1f70970"),
                            Comment = "Maximum number of albums to scan when processing inbound directory.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.stagingDirectoryScanLimit",
                            SortOrder = 0,
                            Value = "250"
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = new Guid("5b6a4c75-33e3-40b3-877f-325b062b1e5a"),
                            Comment = "Default page size when view including pagination.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "defaults.pagesize",
                            SortOrder = 0,
                            Value = "100"
                        },
                        new
                        {
                            Id = 6,
                            ApiKey = new Guid("d8112f1e-a081-47e5-a347-96c6c8488566"),
                            Comment = "Amount of time to display a Toast then auto-close (in milliseconds.)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "userinterface.toastAutoCloseTime",
                            SortOrder = 0,
                            Value = "2000"
                        },
                        new
                        {
                            Id = 300,
                            ApiKey = new Guid("069d2885-b909-419d-af29-02e72e081eac"),
                            Category = 3,
                            Comment = "Short Format to use when displaying full dates.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayFormatShort",
                            SortOrder = 0,
                            Value = "yyyyMMdd HH\\:mm"
                        },
                        new
                        {
                            Id = 301,
                            ApiKey = new Guid("3b441661-6474-4176-a460-9537eb70d0f3"),
                            Category = 3,
                            Comment = "Format to use when displaying activity related dates (e.g., processing messages)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayActivityFormat",
                            SortOrder = 0,
                            Value = "hh\\:mm\\:ss\\.ffff"
                        },
                        new
                        {
                            Id = 9,
                            ApiKey = new Guid("e8993f32-54af-4b32-ac40-e22836fcf18b"),
                            Comment = "List of ignored articles when scanning media (pipe delimited).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.ignoredArticles",
                            SortOrder = 0,
                            Value = "THE|EL|LA|LOS|LAS|LE|LES|OS|AS|O|A"
                        },
                        new
                        {
                            Id = 500,
                            ApiKey = new Guid("d72fdf63-5729-4444-b68e-cf71f52dfbc0"),
                            Category = 5,
                            Comment = "Is Magic processing enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "magic.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 501,
                            ApiKey = new Guid("e10efda9-dcc2-43a6-a211-f11e6c8f58c9"),
                            Category = 5,
                            Comment = "Renumber songs when doing magic processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "magic.doRenumberSongs",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 502,
                            ApiKey = new Guid("a6c65da0-50b8-43a5-a49d-be6c1575a4c0"),
                            Category = 5,
                            Comment = "Remove featured artists from song artist when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongArtist",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 503,
                            ApiKey = new Guid("f27dca77-0764-486d-9e87-d65ecfec71eb"),
                            Category = 5,
                            Comment = "Remove featured artists from song title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 504,
                            ApiKey = new Guid("c7708604-cc56-47d9-b38e-4e7d50432970"),
                            Category = 5,
                            Comment = "Replace song artist separators with standard ID3 separator ('/') when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "magic.doReplaceSongsArtistSeparators",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 505,
                            ApiKey = new Guid("c061b9ba-a862-44f3-81ef-a76f6cb8f71e"),
                            Category = 5,
                            Comment = "Set the song year to current year if invalid or missing when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "magic.doSetYearToCurrentIfInvalid",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 506,
                            ApiKey = new Guid("5032cb39-e129-499c-b555-a14520b578e4"),
                            Category = 5,
                            Comment = "Remove unwanted text from album title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "magic.doRemoveUnwantedTextFromAlbumTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 507,
                            ApiKey = new Guid("ccc3a6dc-748b-4c2b-bd3f-b73c26c545a4"),
                            Category = 5,
                            Comment = "Remove unwanted text from song titles when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "magic.doRemoveUnwantedTextFromSongTitles",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 200,
                            ApiKey = new Guid("4d0b9898-aab1-4efa-8f2e-1fce8cb5e4ce"),
                            Category = 2,
                            Comment = "Enable Melodee to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "conversion.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 201,
                            ApiKey = new Guid("efaa1246-1d27-4958-ad1f-7d57d23eac44"),
                            Category = 2,
                            Comment = "Bitrate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "conversion.bitrate",
                            SortOrder = 0,
                            Value = "384"
                        },
                        new
                        {
                            Id = 202,
                            ApiKey = new Guid("7f98b85a-0ca9-439b-9cdc-d2e76a5d8fbd"),
                            Category = 2,
                            Comment = "Vbr to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "conversion.vbrLevel",
                            SortOrder = 0,
                            Value = "4"
                        },
                        new
                        {
                            Id = 203,
                            ApiKey = new Guid("83b60502-0636-4483-95ec-8f16ae7cfa42"),
                            Category = 2,
                            Comment = "Sampling rate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "conversion.samplingRate",
                            SortOrder = 0,
                            Value = "48000"
                        },
                        new
                        {
                            Id = 700,
                            ApiKey = new Guid("17138209-50ea-4a10-ad55-68ad7a4a5aa6"),
                            Category = 7,
                            Comment = "Process of CueSheet files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "plugin.cueSheet.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 701,
                            ApiKey = new Guid("0837e23c-9961-4730-8924-62ba64d43f1c"),
                            Category = 7,
                            Comment = "Process of M3U files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "plugin.m3u.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 702,
                            ApiKey = new Guid("50c7d4b3-4be6-44b2-a1ec-72b07a6b6b77"),
                            Category = 7,
                            Comment = "Process of NFO files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "plugin.nfo.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 703,
                            ApiKey = new Guid("59f86f7c-bec1-4549-9be6-331cfbf9adbd"),
                            Category = 7,
                            Comment = "Process of Simple File Verification (SFV) files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "plugin.simpleFileVerification.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 704,
                            ApiKey = new Guid("5aed33d2-92ea-42e8-b755-a4fa500131b9"),
                            Category = 7,
                            Comment = "If true then all comments will be removed from media files.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.doDeleteComments",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 26,
                            ApiKey = new Guid("b59ef0b4-db74-4441-b18c-105404d0a51d"),
                            Comment = "Fragments of artist names to replace (JSON Dictionary).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.artistNameReplacements",
                            SortOrder = 0,
                            Value = "{'AC/DC': ['AC; DC', 'AC;DC', 'AC/ DC', 'AC DC'] , 'Love/Hate': ['Love; Hate', 'Love;Hate', 'Love/ Hate', 'Love Hate'] }"
                        },
                        new
                        {
                            Id = 27,
                            ApiKey = new Guid("790a4e2b-0698-402b-afdc-0b65d75adbd9"),
                            Comment = "If OrigAlbumYear [TOR, TORY, TDOR] value is invalid use current year.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.doUseCurrentYearAsDefaultOrigAlbumYearValue",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 28,
                            ApiKey = new Guid("10d19e32-598f-430f-ba09-6631a55a4ae0"),
                            Comment = "Delete original files when processing. When false a copy if made, else original is deleted after processed.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.doDeleteOriginal",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 29,
                            ApiKey = new Guid("cc4cd6d9-2bc1-4c3a-a261-543eca62635f"),
                            Comment = "Extension to add to file when converted, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.convertedExtension",
                            SortOrder = 0,
                            Value = "_converted"
                        },
                        new
                        {
                            Id = 30,
                            ApiKey = new Guid("b9348e46-8897-4579-870a-41b015f57937"),
                            Comment = "Extension to add to file when processed, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.processedExtension",
                            SortOrder = 0,
                            Value = "_processed"
                        },
                        new
                        {
                            Id = 31,
                            ApiKey = new Guid("8ff8a128-f854-43dc-962d-95f9298f6dd5"),
                            Comment = "Extension to add to file to indicate other files in the same category where processed and this file was skipped during processing, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.skippedExtension",
                            SortOrder = 0,
                            Value = "_skipped"
                        },
                        new
                        {
                            Id = 32,
                            ApiKey = new Guid("5e27018a-9f2f-4d04-a806-52eda7ace91e"),
                            Comment = "When processing over write any existing Melodee data files, otherwise skip and leave in place.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.doOverrideExistingMelodeeDataFiles",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 34,
                            ApiKey = new Guid("adff723b-ba40-482f-904a-d2a5d733ff56"),
                            Comment = "The maximum number of files to process, set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.maximumProcessingCount",
                            SortOrder = 0,
                            Value = "0"
                        },
                        new
                        {
                            Id = 35,
                            ApiKey = new Guid("c7918e8c-86b7-4166-acee-7a0dee531808"),
                            Comment = "Maximum allowed length of album directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.maximumAlbumDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 36,
                            ApiKey = new Guid("3aed57a4-2306-400f-b64a-c28f8dc9dd0c"),
                            Comment = "Maximum allowed length of artist directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.maximumArtistDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 37,
                            ApiKey = new Guid("f3617cb6-01cd-41ef-8e17-3e89d7283b0a"),
                            Comment = "Fragments to remove from album titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.albumTitleRemovals",
                            SortOrder = 0,
                            Value = "['^', '~', '#']"
                        },
                        new
                        {
                            Id = 38,
                            ApiKey = new Guid("f5235dc0-ca73-4545-8eb7-4a193ecafac9"),
                            Comment = "Fragments to remove from song titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.songTitleRemovals",
                            SortOrder = 0,
                            Value = "[';', '(Remaster)', 'Remaster']"
                        },
                        new
                        {
                            Id = 39,
                            ApiKey = new Guid("7534b85a-1046-4c98-a0a0-14a71173b89e"),
                            Comment = "Continue processing if an error is encountered.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.doContinueOnDirectoryProcessingErrors",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 41,
                            ApiKey = new Guid("17f58688-9c03-409a-8dd1-4c19cb90de37"),
                            Comment = "Is scripting enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "scripting.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 42,
                            ApiKey = new Guid("b76fbb9f-1b6d-40e5-ab83-f6c181d7100b"),
                            Comment = "Script to run before processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "scripting.preDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 43,
                            ApiKey = new Guid("c0eaa911-0e24-4d51-ae50-ec09867f4904"),
                            Comment = "Script to run after processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "scripting.postDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 44,
                            ApiKey = new Guid("af395e2b-8114-462f-8da7-39af6fc827fd"),
                            Category = 13,
                            Comment = "The maximum value a media number can have for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "validation.maximumMediaNumber",
                            SortOrder = 0,
                            Value = "999"
                        },
                        new
                        {
                            Id = 45,
                            ApiKey = new Guid("031cc967-f97a-4f1d-8ad4-5b49a50bce8f"),
                            Comment = "Don't create performer contributors for these performer names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.ignoredPerformers",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 46,
                            ApiKey = new Guid("7a8b32a4-d680-438b-85a1-f52bb4072ec0"),
                            Comment = "Don't create production contributors for these production names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.ignoredProduction",
                            SortOrder = 0,
                            Value = "['www.t.me;pmedia_music']"
                        },
                        new
                        {
                            Id = 47,
                            ApiKey = new Guid("92d52c24-d451-446c-a3ab-0323a48dc5a0"),
                            Comment = "Don't create publisher contributors for these artist names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.ignoredPublishers",
                            SortOrder = 0,
                            Value = "['P.M.E.D.I.A','PMEDIA','PMEDIA GROUP']"
                        },
                        new
                        {
                            Id = 49,
                            ApiKey = new Guid("4141938f-24ea-4332-b490-1b37f748567a"),
                            Comment = "Private key used to encrypt/decrypt passwords for Subsonic authentication. Use https://generate-random.org/encryption-key-generator?count=1&bytes=32&cipher=aes-256-cbc&string=&password= to generate a new key.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "encryption.privateKey",
                            SortOrder = 0,
                            Value = "H+Kiik6VMKfTD2MesF1GoMjczTrD5RhuKckJ5+/UQWOdWajGcsEC3yEnlJ5eoy8Y"
                        },
                        new
                        {
                            Id = 50,
                            ApiKey = new Guid("cf64b448-145e-423a-974b-e99d1b59e9c8"),
                            Comment = "Prefix to apply to indicate an album directory is a duplicate album for an artist. If left blank the default of '__duplicate_' will be used.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "processing.duplicateAlbumPrefix",
                            SortOrder = 0,
                            Value = "_duplicate_ "
                        },
                        new
                        {
                            Id = 1300,
                            ApiKey = new Guid("8c51e629-ddfd-4537-9c6d-7d5166892404"),
                            Category = 13,
                            Comment = "The maximum value a song number can have for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "validation.maximumSongNumber",
                            SortOrder = 0,
                            Value = "9999"
                        },
                        new
                        {
                            Id = 1301,
                            ApiKey = new Guid("e30d6175-78ef-4309-87c2-a8c80a5a6b2f"),
                            Category = 13,
                            Comment = "Minimum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "validation.minimumAlbumYear",
                            SortOrder = 0,
                            Value = "1860"
                        },
                        new
                        {
                            Id = 1302,
                            ApiKey = new Guid("26b96363-5240-4267-8b77-1b392debbe47"),
                            Category = 13,
                            Comment = "Maximum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "validation.maximumAlbumYear",
                            SortOrder = 0,
                            Value = "2150"
                        },
                        new
                        {
                            Id = 100,
                            ApiKey = new Guid("67569c03-77e7-4896-a34e-e095870fb268"),
                            Category = 1,
                            Comment = "OpenSubsonic server supported Subsonic API version.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonic.serverSupportedVersion",
                            SortOrder = 0,
                            Value = "1.16.1"
                        },
                        new
                        {
                            Id = 101,
                            ApiKey = new Guid("1e09dd84-f889-4824-974b-1f71fda2d942"),
                            Category = 1,
                            Comment = "OpenSubsonic server name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.type",
                            SortOrder = 0,
                            Value = "Melodee"
                        },
                        new
                        {
                            Id = 102,
                            ApiKey = new Guid("0af4ff92-cc62-4ece-8915-0014599feb70"),
                            Category = 1,
                            Comment = "OpenSubsonic server actual version. [Ex: 1.2.3 (beta)]",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.version",
                            SortOrder = 0,
                            Value = "1.0.1 (beta)"
                        },
                        new
                        {
                            Id = 103,
                            ApiKey = new Guid("04a2628e-16cc-4b7e-92ef-3786a9c0c8e6"),
                            Category = 1,
                            Comment = "OpenSubsonic email to use in License responses.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServerLicenseEmail",
                            SortOrder = 0,
                            Value = "noreply@localhost.lan"
                        },
                        new
                        {
                            Id = 104,
                            ApiKey = new Guid("33b00777-4c58-4050-b03a-9d57821337ed"),
                            Category = 1,
                            Comment = "Limit the number of artists to include in an indexes request, set to zero for 32k per index (really not recommended with tens of thousands of artists and mobile clients timeout downloading indexes, a user can find an artist by search)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.index.artistLimit",
                            SortOrder = 0,
                            Value = "1000"
                        },
                        new
                        {
                            Id = 53,
                            ApiKey = new Guid("48af8ff3-c3cd-4c08-8153-d96046d4d3a6"),
                            Comment = "Processing batching size. Allowed range is between [250] and [1000]. ",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "defaults.batchSize",
                            SortOrder = 0,
                            Value = "250"
                        },
                        new
                        {
                            Id = 902,
                            ApiKey = new Guid("c1585059-d308-46ca-a95d-73eb90655bae"),
                            Category = 9,
                            Comment = "User agent to send with Search engine requests.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.userAgent",
                            SortOrder = 0,
                            Value = "Mozilla/5.0 (X11; Linux x86_64; rv:131.0) Gecko/20100101 Firefox/131.0"
                        },
                        new
                        {
                            Id = 903,
                            ApiKey = new Guid("8b2a1ef6-9991-4f09-b95b-3ed260dd6297"),
                            Category = 9,
                            Comment = "Default page size when performing a search engine search.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.defaultPageSize",
                            SortOrder = 0,
                            Value = "20"
                        },
                        new
                        {
                            Id = 904,
                            ApiKey = new Guid("1bddc9ae-58c5-49fc-853d-ae5ee1150fde"),
                            Category = 9,
                            Comment = "Is MusicBrainz search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 905,
                            ApiKey = new Guid("5a37352e-fd20-478c-a7a7-37cbf8a114fb"),
                            Category = 9,
                            Comment = "Storage path to hold MusicBrainz downloaded files and SQLite db.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.storagePath",
                            SortOrder = 0,
                            Value = "/melodee_test/search-engine-storage/musicbrainz/"
                        },
                        new
                        {
                            Id = 906,
                            ApiKey = new Guid("aa232f10-3a7d-4e8f-a7cb-bc27c7b016ef"),
                            Category = 9,
                            Comment = "Maximum number of batches import from MusicBrainz downloaded db dump (this setting is usually used during debugging), set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importMaximumToProcess",
                            SortOrder = 0,
                            Value = "0"
                        },
                        new
                        {
                            Id = 907,
                            ApiKey = new Guid("e9a09801-c8ec-4d6b-abc4-dc6d19023999"),
                            Category = 9,
                            Comment = "Number of records to import from MusicBrainz downloaded db dump before commiting to local SQLite database.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importBatchSize",
                            SortOrder = 0,
                            Value = "50000"
                        },
                        new
                        {
                            Id = 908,
                            ApiKey = new Guid("9feee50b-845b-419e-8fe7-d1f6f71c0341"),
                            Category = 9,
                            Comment = "Timestamp of when last MusicBrainz import was successful.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importLastImportTimestamp",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 910,
                            ApiKey = new Guid("f894e4b4-7062-4999-ace9-b2c41edc253d"),
                            Category = 9,
                            Comment = "Is Spotify search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 911,
                            ApiKey = new Guid("5e4d7188-478b-488b-9a81-b2cc325d1a9f"),
                            Category = 9,
                            Comment = "ApiKey used used with Spotify. See https://developer.spotify.com/ for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.apiKey",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 912,
                            ApiKey = new Guid("f2256a26-4568-43d3-b385-f2fec3bfb042"),
                            Category = 9,
                            Comment = "Shared secret used with Spotify. See https://developer.spotify.com/ for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.sharedSecret",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 913,
                            ApiKey = new Guid("5544c2cd-3c1d-4acf-a6d3-2bea9b72d2e7"),
                            Category = 9,
                            Comment = "Token obtained from Spotify using the ApiKey and the Secret, this json contains expiry information.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.accessToken",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 914,
                            ApiKey = new Guid("7418289d-3fee-4b56-ada6-1b5602fa0121"),
                            Category = 9,
                            Comment = "Is ITunes search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.itunes.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 915,
                            ApiKey = new Guid("216ce024-533c-4ee8-ba42-d1a51f143891"),
                            Category = 9,
                            Comment = "Is LastFM search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.lastFm.Enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 916,
                            ApiKey = new Guid("487a1c8c-8b9b-4d60-93f7-d1f98361019c"),
                            Category = 9,
                            Comment = "When performing a search engine search, the maximum allowed page size.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.maximumAllowedPageSize",
                            SortOrder = 0,
                            Value = "1000"
                        },
                        new
                        {
                            Id = 917,
                            ApiKey = new Guid("8ccdcbc4-aef1-4561-b703-b9d927598a82"),
                            Category = 9,
                            Comment = "Refresh albums for artists from search engine database every x days, set to zero to not refresh.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "searchEngine.artistSearchDatabaseRefreshInDays",
                            SortOrder = 0,
                            Value = "14"
                        },
                        new
                        {
                            Id = 400,
                            ApiKey = new Guid("3a662e0a-555d-4deb-a7ce-538b1789acbc"),
                            Category = 4,
                            Comment = "Include any embedded images from media files into the Melodee data file.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "imaging.doLoadEmbeddedImages",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 401,
                            ApiKey = new Guid("caadbec0-aa68-4c17-a906-fa1ffa1ab6a7"),
                            Category = 4,
                            Comment = "Small image size (square image, this is both width and height).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "imaging.smallSize",
                            SortOrder = 0,
                            Value = "300"
                        },
                        new
                        {
                            Id = 402,
                            ApiKey = new Guid("405a171b-a069-4deb-8d1a-b2541cd04c63"),
                            Category = 4,
                            Comment = "Medium image size (square image, this is both width and height).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "imaging.mediumSize",
                            SortOrder = 0,
                            Value = "600"
                        },
                        new
                        {
                            Id = 403,
                            ApiKey = new Guid("2bc1bd48-d8a5-42ea-8920-06e00bbbbc7a"),
                            Category = 4,
                            Comment = "Large image size (square image, this is both width and height), if larger than will be resized to this image, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "imaging.largeSize",
                            SortOrder = 0,
                            Value = "1600"
                        },
                        new
                        {
                            Id = 404,
                            ApiKey = new Guid("6eaa3943-def8-4511-9420-b6a0e8c6c2d5"),
                            Category = 4,
                            Comment = "Maximum allowed number of images for an album, this includes all image types (Front, Rear, etc.), set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "imaging.maximumNumberOfAlbumImages",
                            SortOrder = 0,
                            Value = "25"
                        },
                        new
                        {
                            Id = 405,
                            ApiKey = new Guid("c346f7fa-02ff-4df8-b50f-b8d9623830b7"),
                            Category = 4,
                            Comment = "Maximum allowed number of images for an artist, set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "imaging.maximumNumberOfArtistImages",
                            SortOrder = 0,
                            Value = "25"
                        },
                        new
                        {
                            Id = 406,
                            ApiKey = new Guid("b6099392-6564-4e0d-9ed2-ea62263290f6"),
                            Category = 4,
                            Comment = "Images under this size are considered invalid, set to zero to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "imaging.minimumImageSize",
                            SortOrder = 0,
                            Value = "300"
                        },
                        new
                        {
                            Id = 1200,
                            ApiKey = new Guid("d30d34b0-3790-4e9f-93f2-1caeb30c1c96"),
                            Category = 12,
                            Comment = "Default format for transcoding.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "transcoding.default",
                            SortOrder = 0,
                            Value = "raw"
                        },
                        new
                        {
                            Id = 1201,
                            ApiKey = new Guid("d337c30b-e48e-4201-85ea-68e6b2914232"),
                            Category = 12,
                            Comment = "Default command to transcode MP3 for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "transcoding.command.mp3",
                            SortOrder = 0,
                            Value = "{ 'format': 'Mp3', 'bitrate: 192, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -f mp3 -' }"
                        },
                        new
                        {
                            Id = 1202,
                            ApiKey = new Guid("0ebf23c6-a7ab-4e1f-a13d-c5b4ff882c05"),
                            Category = 12,
                            Comment = "Default command to transcode using libopus for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "transcoding.command.opus",
                            SortOrder = 0,
                            Value = "{ 'format': 'Opus', 'bitrate: 128, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -c:a libopus -f opus -' }"
                        },
                        new
                        {
                            Id = 1203,
                            ApiKey = new Guid("617e9bd2-a1f4-423f-8de1-4e8a43e9f40c"),
                            Category = 12,
                            Comment = "Default command to transcode to aac for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "transcoding.command.aac",
                            SortOrder = 0,
                            Value = "{ 'format': 'Aac', 'bitrate: 256, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -c:a aac -f adts -' }"
                        },
                        new
                        {
                            Id = 1000,
                            ApiKey = new Guid("834e9131-8afb-4c49-9923-446689ac15eb"),
                            Category = 10,
                            Comment = "Is scrobbling enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "scrobbling.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 1001,
                            ApiKey = new Guid("5de845f9-b404-4ac4-90e2-44219e67fd33"),
                            Category = 10,
                            Comment = "Is scrobbling to Last.fm enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.Enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 1002,
                            ApiKey = new Guid("be544180-e8f8-4cc4-b0b6-f2ca3ed7cada"),
                            Category = 10,
                            Comment = "ApiKey used used with last FM. See https://www.last.fm/api/authentication for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.apiKey",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 1003,
                            ApiKey = new Guid("b1d8628b-26e9-4265-9595-46ed743c8f3d"),
                            Category = 10,
                            Comment = "Shared secret used with last FM. See https://www.last.fm/api/authentication for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.sharedSecret",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 1100,
                            ApiKey = new Guid("ac301a52-40ad-4cb6-8dd9-c00b322905bf"),
                            Category = 11,
                            Comment = "Base URL for Melodee to use when building shareable links and image urls (e.g., 'https://server.domain.com:8080', 'http://server.domain.com').",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "system.baseUrl",
                            SortOrder = 0,
                            Value = "** REQUIRED: THIS MUST BE EDITED **"
                        },
                        new
                        {
                            Id = 1101,
                            ApiKey = new Guid("fe624a88-dfac-45ec-9637-ef35c12acfb8"),
                            Category = 11,
                            Comment = "Is downloading enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "system.isDownloadingEnabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 1400,
                            ApiKey = new Guid("c0e47052-03d9-4efe-86b3-7f364e6dca69"),
                            Category = 14,
                            Comment = "Cron expression to run the artist housekeeping job, set empty to disable. Default of '0 0 0/1 1/1 * ? *' will run every hour. See https://www.freeformatter.com/cron-expression-generator-quartz.html",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "jobs.artistHousekeeping.cronExpression",
                            SortOrder = 0,
                            Value = "0 0 0/1 1/1 * ? *"
                        },
                        new
                        {
                            Id = 1401,
                            ApiKey = new Guid("a8aa99cb-6fe9-45d6-976c-8edbc05eb032"),
                            Category = 14,
                            Comment = "Cron expression to run the library process job, set empty to disable. Default of '0 */10 * ? * *' Every 10 minutes. See https://www.freeformatter.com/cron-expression-generator-quartz.html",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "jobs.libraryProcess.cronExpression",
                            SortOrder = 0,
                            Value = "0 */10 * ? * *"
                        },
                        new
                        {
                            Id = 1402,
                            ApiKey = new Guid("9a34b097-cc8d-42b6-bb7d-528aed716ba9"),
                            Category = 14,
                            Comment = "Cron expression to run the library scan job, set empty to disable. Default of '0 0 0 * * ?' will run every day at 00:00. See https://www.freeformatter.com/cron-expression-generator-quartz.html",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "jobs.libraryInsert.cronExpression",
                            SortOrder = 0,
                            Value = "0 0 0 * * ?"
                        },
                        new
                        {
                            Id = 1403,
                            ApiKey = new Guid("82932e68-68a7-4b56-8730-8e685662f83c"),
                            Category = 14,
                            Comment = "Cron expression to run the musicbrainz database house keeping job, set empty to disable. Default of '0 0 12 1 * ?' will run first day of the month. See https://www.freeformatter.com/cron-expression-generator-quartz.html",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "jobs.musicbrainzUpdateDatabase.cronExpression",
                            SortOrder = 0,
                            Value = "0 0 12 1 * ?"
                        },
                        new
                        {
                            Id = 1404,
                            ApiKey = new Guid("80822a0f-5e61-4ec6-bc66-f7d979d78035"),
                            Category = 14,
                            Comment = "Cron expression to run the artist search engine house keeping job, set empty to disable. Default of '0 0 0 * * ?' will run every day at 00:00. See https://www.freeformatter.com/cron-expression-generator-quartz.html",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389450686018676L),
                            IsLocked = false,
                            Key = "jobs.artistSearchEngineHousekeeping.cronExpression",
                            SortOrder = 0,
                            Value = "0 0 0 * * ?"
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDownloadable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastVisitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("ShareIds")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VisitCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumDiscId")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("BPM")
                        .HasColumnType("integer");

                    b.Property<int>("BitDepth")
                        .HasColumnType("integer");

                    b.Property<int>("BitRate")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<int?>("ChannelCount")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.PrimitiveCollection<string[]>("Genres")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVbr")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lyrics")
                        .HasMaxLength(62000)
                        .HasColumnType("character varying(62000)");

                    b.PrimitiveCollection<string[]>("Moods")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PartTitles")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<double?>("ReplayGain")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReplayPeak")
                        .HasColumnType("double precision");

                    b.Property<int>("SamplingRate")
                        .HasColumnType("integer");

                    b.Property<int>("SongNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TitleNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TitleSort")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("Title");

                    b.HasIndex("AlbumDiscId", "SongNumber")
                        .IsUnique();

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmailNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("HasCommentRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCoverArtRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasDownloadRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasJukeboxRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPlaylistRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPodcastRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSettingsRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasShareRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasStreamRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasUploadRole")
                        .HasColumnType("boolean");

                    b.Property<string>("HatedGenres")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEditor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScrobblingEnabled")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastActivityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastFmSessionKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Instant?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PasswordEncrypted")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "AlbumId")
                        .IsUnique();

                    b.ToTable("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("ArtistId");

                    b.HasIndex("UserId", "ArtistId")
                        .IsUnique();

                    b.ToTable("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Discs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.ArtistRelation", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("RelatedArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Artist", "RelatedArtist")
                        .WithMany()
                        .HasForeignKey("RelatedArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("RelatedArtist");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Bookmarks")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Contributors")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Contributors")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Contributors")
                        .HasForeignKey("SongId");

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Library", "Library")
                        .WithMany("ScanHistories")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("PlayQues")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("PlayQues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", null)
                        .WithMany("Playlists")
                        .HasForeignKey("SongId");

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Playlist", "Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Shares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.AlbumDisc", "AlbumDisc")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumDiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlbumDisc");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("UserAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserAlbums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("UserArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserArtists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("UserSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserSongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("Discs");

                    b.Navigation("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Contributors");

                    b.Navigation("RelatedArtists");

                    b.Navigation("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Navigation("ScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Contributors");

                    b.Navigation("PlayQues");

                    b.Navigation("Playlists");

                    b.Navigation("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("PlayQues");

                    b.Navigation("Players");

                    b.Navigation("Playlists");

                    b.Navigation("Shares");

                    b.Navigation("UserAlbums");

                    b.Navigation("UserArtists");

                    b.Navigation("UserSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
