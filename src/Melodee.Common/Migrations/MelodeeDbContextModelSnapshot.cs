// <auto-generated />
using System;
using Melodee.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melodee.Common.Migrations
{
    [DbContext(typeof(MelodeeDbContext))]
    partial class MelodeeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AlbumStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("AlbumType")
                        .HasColumnType("smallint");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.PrimitiveCollection<string[]>("Genres")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompilation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MetaDataStatus")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("Moods")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<LocalDate?>("OriginalReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<LocalDate>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<double?>("ReplayGain")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReplayPeak")
                        .HasColumnType("double precision");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("ArtistId", "Name")
                        .IsUnique();

                    b.HasIndex("ArtistId", "NameNormalized")
                        .IsUnique();

                    b.HasIndex("ArtistId", "SortName")
                        .IsUnique();

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumCount")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.Property<int>("MetaDataStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<string>("RealName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Roles")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SongCount")
                        .HasColumnType("integer");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("LibraryId");

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameNormalized");

                    b.HasIndex("SortName");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.ArtistRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<int>("ArtistRelationType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("RelatedArtistId")
                        .HasColumnType("integer");

                    b.Property<Instant?>("RelationEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("RelationStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("RelatedArtistId");

                    b.HasIndex("ArtistId", "RelatedArtistId")
                        .IsUnique();

                    b.ToTable("ArtistRelation");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<string>("ContributorName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ContributorType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MetaTagIdentifier")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SubRole")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("ArtistId", "MetaTagIdentifier", "AlbumId")
                        .IsUnique();

                    b.HasIndex("ContributorName", "MetaTagIdentifier", "AlbumId")
                        .IsUnique();

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("ArtistCount")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastScanAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("SongCount")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Libraries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("7e78f282-eeeb-4ab0-835a-85393a04e574"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            Description = "Files in this directory are scanned and Album information is gathered via processing.",
                            IsLocked = false,
                            Name = "Inbound",
                            Path = "/storage/inbound/",
                            SortOrder = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("50c385f0-e4c5-4be5-90fd-8f9f42d91c99"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            Description = "The staging directory to place processed files into (Inbound -> Staging -> Library).",
                            IsLocked = false,
                            Name = "Staging",
                            Path = "/storage/staging/",
                            SortOrder = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("da615c00-2f35-46dd-93a3-87c3a92b91d6"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            Description = "The library directory to place processed, reviewed and ready to use music files into.",
                            IsLocked = false,
                            Name = "Storage",
                            Path = "/storage/library/",
                            SortOrder = 0,
                            Type = 3
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = new Guid("b158b8a2-8cde-42a9-a922-b5fd996f1b1b"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            Description = "Library where user images are stored.",
                            IsLocked = false,
                            Name = "User Images",
                            Path = "/storage/images/users/",
                            SortOrder = 0,
                            Type = 4
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<int?>("ForAlbumId")
                        .HasColumnType("integer");

                    b.Property<int?>("ForArtistId")
                        .HasColumnType("integer");

                    b.Property<int>("FoundAlbumsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundArtistsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundSongsCount")
                        .HasColumnType("integer");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsCurrentSong")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayQueId")
                        .HasColumnType("integer");

                    b.Property<double>("Position")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayQues");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Hostname")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxBitRate")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("ScrobbleEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("TranscodingId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "Client", "UserAgent");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedUserIds")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasCustomImage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.HasKey("SongId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId", "PlaylistId")
                        .IsUnique();

                    b.ToTable("PlaylistSong");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.RadioStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("HomePageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StreamUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.ToTable("RadioStations");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByUserAgent")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("ByUserId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FoundAlbumsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundArtistsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundOtherItems")
                        .HasColumnType("integer");

                    b.Property<int>("FoundSongsCount")
                        .HasColumnType("integer");

                    b.Property<double>("SearchDurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("SearchQuery")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("SearchHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Category");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("183e17db-d55a-4d45-9e11-b3c16f4d0071"),
                            Comment = "Add a default filter to show only albums with this or less number of songs.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "filtering.lessThanSongCount",
                            SortOrder = 0,
                            Value = "3"
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("df55f94e-9704-405b-b34a-ef0bf62788cc"),
                            Comment = "Add a default filter to show only albums with this or less duration.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "filtering.lessThanDuration",
                            SortOrder = 0,
                            Value = "720000"
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("7836d7a3-1c3e-4cea-adc9-032445a1c57a"),
                            Comment = "Maximum number of albums to scan when processing inbound directory.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.stagingDirectoryScanLimit",
                            SortOrder = 0,
                            Value = "250"
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = new Guid("14494761-1203-4d6f-ab5d-5f35360a5e56"),
                            Comment = "Default page size when view including pagination.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "defaults.pagesize",
                            SortOrder = 0,
                            Value = "100"
                        },
                        new
                        {
                            Id = 6,
                            ApiKey = new Guid("5952a2c2-f75f-41a2-9e73-6c4bde40753b"),
                            Comment = "Amount of time to display a Toast then auto-close (in milliseconds.)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "userinterface.toastAutoCloseTime",
                            SortOrder = 0,
                            Value = "2000"
                        },
                        new
                        {
                            Id = 300,
                            ApiKey = new Guid("3c314b0e-5b20-463a-acdb-b424453704aa"),
                            Category = 3,
                            Comment = "Short Format to use when displaying full dates.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayFormatShort",
                            SortOrder = 0,
                            Value = "yyyyMMdd HH\\:mm"
                        },
                        new
                        {
                            Id = 301,
                            ApiKey = new Guid("20a9b888-2547-4b23-8c06-f784a4dbd7cc"),
                            Category = 3,
                            Comment = "Format to use when displaying activity related dates (e.g., processing messages)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayActivityFormat",
                            SortOrder = 0,
                            Value = "hh\\:mm\\:ss\\.ffff"
                        },
                        new
                        {
                            Id = 9,
                            ApiKey = new Guid("998422d2-9b63-48a2-92d3-daf8a8ed79cb"),
                            Comment = "List of ignored articles when scanning media (pipe delimited).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.ignoredArticles",
                            SortOrder = 0,
                            Value = "THE|EL|LA|LOS|LAS|LE|LES|OS|AS|O|A"
                        },
                        new
                        {
                            Id = 500,
                            ApiKey = new Guid("7710cfff-178e-40e5-a391-0ff34bc66b8d"),
                            Category = 5,
                            Comment = "Is Magic processing enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "magic.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 501,
                            ApiKey = new Guid("c452ef59-4f3d-4f7c-92cf-4febcb705e01"),
                            Category = 5,
                            Comment = "Renumber songs when doing magic processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "magic.doRenumberSongs",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 502,
                            ApiKey = new Guid("03b6aaeb-c2cd-4b2c-8b6f-1894e496f94b"),
                            Category = 5,
                            Comment = "Remove featured artists from song artist when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongArtist",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 503,
                            ApiKey = new Guid("e21c5982-72ff-4859-95ea-89f6733438c8"),
                            Category = 5,
                            Comment = "Remove featured artists from song title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 504,
                            ApiKey = new Guid("6b620ceb-d4ad-4070-8b76-ab73e7e7bb62"),
                            Category = 5,
                            Comment = "Replace song artist separators with standard ID3 separator ('/') when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "magic.doReplaceSongsArtistSeparators",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 505,
                            ApiKey = new Guid("65c0dbcd-4d10-4533-94df-fdb6ae36f7a5"),
                            Category = 5,
                            Comment = "Set the song year to current year if invalid or missing when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "magic.doSetYearToCurrentIfInvalid",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 506,
                            ApiKey = new Guid("897a25cd-632a-41fc-a3eb-2ceaeca4cec1"),
                            Category = 5,
                            Comment = "Remove unwanted text from album title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "magic.doRemoveUnwantedTextFromAlbumTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 507,
                            ApiKey = new Guid("6deb25eb-8d36-4fc0-a90a-8a99029e693c"),
                            Category = 5,
                            Comment = "Remove unwanted text from song titles when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "magic.doRemoveUnwantedTextFromSongTitles",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 200,
                            ApiKey = new Guid("f91fa7f7-a7f3-4ec4-a10e-b56e37daf311"),
                            Category = 2,
                            Comment = "Enable Melodee to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "conversion.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 201,
                            ApiKey = new Guid("788c3bce-a407-4546-8774-21f40d720f52"),
                            Category = 2,
                            Comment = "Bitrate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "conversion.bitrate",
                            SortOrder = 0,
                            Value = "384"
                        },
                        new
                        {
                            Id = 202,
                            ApiKey = new Guid("f2d7844a-3674-496e-86ba-ec70d464f9e9"),
                            Category = 2,
                            Comment = "Vbr to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "conversion.vbrLevel",
                            SortOrder = 0,
                            Value = "4"
                        },
                        new
                        {
                            Id = 203,
                            ApiKey = new Guid("376dec8c-eca9-4c76-9b79-43ff668a7ea0"),
                            Category = 2,
                            Comment = "Sampling rate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "conversion.samplingRate",
                            SortOrder = 0,
                            Value = "48000"
                        },
                        new
                        {
                            Id = 700,
                            ApiKey = new Guid("349201e8-e463-4ba5-b9a7-19a92f9c3868"),
                            Category = 7,
                            Comment = "Process of CueSheet files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "plugin.cueSheet.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 701,
                            ApiKey = new Guid("878416b5-3a9e-4542-a7fe-d8753331169d"),
                            Category = 7,
                            Comment = "Process of M3U files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "plugin.m3u.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 702,
                            ApiKey = new Guid("e2f72825-6b45-4611-9ad9-518ab7fb470d"),
                            Category = 7,
                            Comment = "Process of NFO files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "plugin.nfo.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 703,
                            ApiKey = new Guid("af1e0baa-31bd-4c84-a300-2e57737edef5"),
                            Category = 7,
                            Comment = "Process of Simple File Verification (SFV) files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "plugin.simpleFileVerification.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 704,
                            ApiKey = new Guid("b173527c-c4b8-4c00-9b15-dfafde935226"),
                            Category = 7,
                            Comment = "If true then all comments will be removed from media files.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.doDeleteComments",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 26,
                            ApiKey = new Guid("d94c8ca4-0e95-4b6f-994a-01c64f54c9c2"),
                            Comment = "Fragments of artist names to replace (JSON Dictionary).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.artistNameReplacements",
                            SortOrder = 0,
                            Value = "{'AC/DC': ['AC; DC', 'AC;DC', 'AC/ DC', 'AC DC'] , 'Love/Hate': ['Love; Hate', 'Love;Hate', 'Love/ Hate', 'Love Hate'] }"
                        },
                        new
                        {
                            Id = 27,
                            ApiKey = new Guid("07c75d0a-3dab-4493-8717-1a2b0d1f757a"),
                            Comment = "If OrigAlbumYear [TOR, TORY, TDOR] value is invalid use current year.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.doUseCurrentYearAsDefaultOrigAlbumYearValue",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 28,
                            ApiKey = new Guid("309f4150-0aeb-4964-af20-c141aeb883ea"),
                            Comment = "Delete original files when processing. When false a copy if made, else original is deleted after processed.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.doDeleteOriginal",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 29,
                            ApiKey = new Guid("6fd611e1-1c72-4ddc-a36f-c9d7f4f0578f"),
                            Comment = "Extension to add to file when converted, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.convertedExtension",
                            SortOrder = 0,
                            Value = "_converted"
                        },
                        new
                        {
                            Id = 30,
                            ApiKey = new Guid("cadc9f0c-9361-413c-ab73-80e09edebbcf"),
                            Comment = "Extension to add to file when processed, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.processedExtension",
                            SortOrder = 0,
                            Value = "_processed"
                        },
                        new
                        {
                            Id = 31,
                            ApiKey = new Guid("fd1870b6-464c-4b76-a04b-ff5fdbaae6f3"),
                            Comment = "Extension to add to file to indicate other files in the same category where processed and this file was skipped during processing, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.skippedExtension",
                            SortOrder = 0,
                            Value = "_skipped"
                        },
                        new
                        {
                            Id = 32,
                            ApiKey = new Guid("e078b0bd-9a88-4a0a-bfa1-e4a9beb3e255"),
                            Comment = "When processing over write any existing Melodee data files, otherwise skip and leave in place.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.doOverrideExistingMelodeeDataFiles",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 34,
                            ApiKey = new Guid("da99e1a1-e074-43ca-b2a3-567ea0d1c48e"),
                            Comment = "The maximum number of files to process, set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.maximumProcessingCount",
                            SortOrder = 0,
                            Value = "0"
                        },
                        new
                        {
                            Id = 35,
                            ApiKey = new Guid("3655d8cd-f30b-4e78-8ef2-6a5fe5017339"),
                            Comment = "Maximum allowed length of album directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.maximumAlbumDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 36,
                            ApiKey = new Guid("1b498504-b5e7-4b48-b270-7b64cc6cb305"),
                            Comment = "Maximum allowed length of artist directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.maximumArtistDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 37,
                            ApiKey = new Guid("3e13190f-6a71-46a3-8aba-9f198b701aec"),
                            Comment = "Fragments to remove from album titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.albumTitleRemovals",
                            SortOrder = 0,
                            Value = "['^', '~', '#']"
                        },
                        new
                        {
                            Id = 38,
                            ApiKey = new Guid("c0f9d18b-b0ff-4554-b6e9-fe87d20b6362"),
                            Comment = "Fragments to remove from song titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.songTitleRemovals",
                            SortOrder = 0,
                            Value = "[';', '(Remaster)', 'Remaster']"
                        },
                        new
                        {
                            Id = 39,
                            ApiKey = new Guid("67978df6-39b7-4568-b623-7fad4893fa2e"),
                            Comment = "Continue processing if an error is encountered.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.doContinueOnDirectoryProcessingErrors",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 41,
                            ApiKey = new Guid("0f62dcc1-0a04-400b-abed-509ca1a1f0fa"),
                            Comment = "Is scripting enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "scripting.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 42,
                            ApiKey = new Guid("90915ff3-5362-4736-a44f-ef45aa731c21"),
                            Comment = "Script to run before processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "scripting.preDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 43,
                            ApiKey = new Guid("a3c88c3d-c4b3-4659-9cd7-ae1279699020"),
                            Comment = "Script to run after processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "scripting.postDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 44,
                            ApiKey = new Guid("40628b5e-626e-429c-9586-072c4fe4585e"),
                            Category = 13,
                            Comment = "The maximum value a media number can have for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "validation.maximumMediaNumber",
                            SortOrder = 0,
                            Value = "999"
                        },
                        new
                        {
                            Id = 45,
                            ApiKey = new Guid("d1fc60bd-2e94-4ccb-9523-69e9798fc825"),
                            Comment = "Don't create performer contributors for these performer names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.ignoredPerformers",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 46,
                            ApiKey = new Guid("26c19506-4d37-4855-b353-e2a612cb6e4b"),
                            Comment = "Don't create production contributors for these production names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.ignoredProduction",
                            SortOrder = 0,
                            Value = "['www.t.me;pmedia_music']"
                        },
                        new
                        {
                            Id = 47,
                            ApiKey = new Guid("c39c60df-a2e2-43a0-b002-30e0b300544e"),
                            Comment = "Don't create publisher contributors for these artist names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.ignoredPublishers",
                            SortOrder = 0,
                            Value = "['P.M.E.D.I.A','PMEDIA','PMEDIA GROUP']"
                        },
                        new
                        {
                            Id = 49,
                            ApiKey = new Guid("783cdb69-29ec-47f8-bf10-bfa63e591d1a"),
                            Comment = "Private key used to encrypt/decrypt passwords for Subsonic authentication. Use https://generate-random.org/encryption-key-generator?count=1&bytes=32&cipher=aes-256-cbc&string=&password= to generate a new key.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "encryption.privateKey",
                            SortOrder = 0,
                            Value = "H+Kiik6VMKfTD2MesF1GoMjczTrD5RhuKckJ5+/UQWOdWajGcsEC3yEnlJ5eoy8Y"
                        },
                        new
                        {
                            Id = 50,
                            ApiKey = new Guid("95926283-e4c3-40ac-94bf-6865d3866968"),
                            Comment = "Prefix to apply to indicate an album directory is a duplicate album for an artist. If left blank the default of '__duplicate_' will be used.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "processing.duplicateAlbumPrefix",
                            SortOrder = 0,
                            Value = "_duplicate_ "
                        },
                        new
                        {
                            Id = 1300,
                            ApiKey = new Guid("7dc84cc0-bbc8-48b2-9f89-a526bde71526"),
                            Category = 13,
                            Comment = "The maximum value a song number can have for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "validation.maximumSongNumber",
                            SortOrder = 0,
                            Value = "9999"
                        },
                        new
                        {
                            Id = 1301,
                            ApiKey = new Guid("88335f2c-b255-4847-a916-5701246e0262"),
                            Category = 13,
                            Comment = "Minimum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "validation.minimumAlbumYear",
                            SortOrder = 0,
                            Value = "1860"
                        },
                        new
                        {
                            Id = 1302,
                            ApiKey = new Guid("1889f347-d475-4b2f-bfbc-723380fb86ef"),
                            Category = 13,
                            Comment = "Maximum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "validation.maximumAlbumYear",
                            SortOrder = 0,
                            Value = "2150"
                        },
                        new
                        {
                            Id = 100,
                            ApiKey = new Guid("8381d394-d36e-4b94-9e4e-8745492c5205"),
                            Category = 1,
                            Comment = "OpenSubsonic server supported Subsonic API version.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonic.serverSupportedVersion",
                            SortOrder = 0,
                            Value = "1.16.1"
                        },
                        new
                        {
                            Id = 101,
                            ApiKey = new Guid("1079801e-8f7d-4b0b-9354-cd54d28ce7d5"),
                            Category = 1,
                            Comment = "OpenSubsonic server name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.type",
                            SortOrder = 0,
                            Value = "Melodee"
                        },
                        new
                        {
                            Id = 102,
                            ApiKey = new Guid("74961329-7b0c-4b22-94ec-28fb996b78e4"),
                            Category = 1,
                            Comment = "OpenSubsonic server actual version. [Ex: 1.2.3 (beta)]",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.version",
                            SortOrder = 0,
                            Value = "1.0.1 (beta)"
                        },
                        new
                        {
                            Id = 103,
                            ApiKey = new Guid("e796c2a5-0a3f-4664-80af-966bc1aaf625"),
                            Category = 1,
                            Comment = "OpenSubsonic email to use in License responses.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServerLicenseEmail",
                            SortOrder = 0,
                            Value = "noreply@localhost.lan"
                        },
                        new
                        {
                            Id = 104,
                            ApiKey = new Guid("393e5fc9-0fc2-40c4-bbf4-e7855c485266"),
                            Category = 1,
                            Comment = "Limit the number of artists to include in an indexes request, set to zero for 32k per index (really not recommended with tens of thousands of artists and mobile clients timeout downloading indexes, a user can find an artist by search)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.index.artistLimit",
                            SortOrder = 0,
                            Value = "1000"
                        },
                        new
                        {
                            Id = 53,
                            ApiKey = new Guid("c936a6a9-29a0-4008-a58c-2508cc589956"),
                            Comment = "Processing batching size. Allowed range is between [250] and [1000]. ",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "defaults.batchSize",
                            SortOrder = 0,
                            Value = "250"
                        },
                        new
                        {
                            Id = 902,
                            ApiKey = new Guid("6634b45d-87e5-48ae-b691-ed542eddb109"),
                            Category = 9,
                            Comment = "User agent to send with Search engine requests.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.userAgent",
                            SortOrder = 0,
                            Value = "Mozilla/5.0 (X11; Linux x86_64; rv:131.0) Gecko/20100101 Firefox/131.0"
                        },
                        new
                        {
                            Id = 903,
                            ApiKey = new Guid("60428c65-f8d6-455e-801d-c9141d1df9ef"),
                            Category = 9,
                            Comment = "Default page size when performing a search engine search.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.defaultPageSize",
                            SortOrder = 0,
                            Value = "20"
                        },
                        new
                        {
                            Id = 904,
                            ApiKey = new Guid("dd369d22-134c-4767-bb11-b4985986222e"),
                            Category = 9,
                            Comment = "Is MusicBrainz search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 905,
                            ApiKey = new Guid("b7c56026-d0f7-4e06-9ae0-78387101aeeb"),
                            Category = 9,
                            Comment = "Storage path to hold MusicBrainz downloaded files and SQLite db.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.storagePath",
                            SortOrder = 0,
                            Value = "/melodee_test/search-engine-storage/musicbrainz/"
                        },
                        new
                        {
                            Id = 906,
                            ApiKey = new Guid("0a3ed2fc-436c-45fb-8211-2875fa143384"),
                            Category = 9,
                            Comment = "Maximum number of batches import from MusicBrainz downloaded db dump (this setting is usually used during debugging), set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importMaximumToProcess",
                            SortOrder = 0,
                            Value = "0"
                        },
                        new
                        {
                            Id = 907,
                            ApiKey = new Guid("857b7c4b-bbe3-4d07-9b4d-119703f54cde"),
                            Category = 9,
                            Comment = "Number of records to import from MusicBrainz downloaded db dump before commiting to local SQLite database.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importBatchSize",
                            SortOrder = 0,
                            Value = "50000"
                        },
                        new
                        {
                            Id = 908,
                            ApiKey = new Guid("8c455571-6784-42c3-821d-057fbee9d39a"),
                            Category = 9,
                            Comment = "Timestamp of when last MusicBrainz import was successful.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importLastImportTimestamp",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 910,
                            ApiKey = new Guid("97b08687-4113-42da-9628-8da969326c01"),
                            Category = 9,
                            Comment = "Is Spotify search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 911,
                            ApiKey = new Guid("c89affc1-5472-4468-8873-ef934053af7e"),
                            Category = 9,
                            Comment = "ApiKey used used with Spotify. See https://developer.spotify.com/ for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.apiKey",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 912,
                            ApiKey = new Guid("a7c9f2d1-89b2-48e6-aa81-693b3245c815"),
                            Category = 9,
                            Comment = "Shared secret used with Spotify. See https://developer.spotify.com/ for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.sharedSecret",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 913,
                            ApiKey = new Guid("9ec2c048-4f15-40f4-a7b3-8ec6ba920b34"),
                            Category = 9,
                            Comment = "Token obtained from Spotify using the ApiKey and the Secret, this json contains expiry information.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.accessToken",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 914,
                            ApiKey = new Guid("0a29f3bd-8357-4a21-8be4-552594e0c1a1"),
                            Category = 9,
                            Comment = "Is ITunes search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.itunes.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 915,
                            ApiKey = new Guid("0af0055e-894d-4dd4-967f-883c3a03b52e"),
                            Category = 9,
                            Comment = "Is LastFM search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.lastFm.Enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 916,
                            ApiKey = new Guid("d8397fb2-64c3-411e-9b6c-c1ce0ced6aff"),
                            Category = 9,
                            Comment = "When performing a search engine search, the maximum allowed page size.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.maximumAllowedPageSize",
                            SortOrder = 0,
                            Value = "1000"
                        },
                        new
                        {
                            Id = 917,
                            ApiKey = new Guid("785a5f8e-e2b5-448c-b2b8-356dc15e9fec"),
                            Category = 9,
                            Comment = "Refresh albums for artists from search engine database every x days, set to zero to not refresh.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "searchEngine.artistSearchDatabaseRefreshInDays",
                            SortOrder = 0,
                            Value = "14"
                        },
                        new
                        {
                            Id = 400,
                            ApiKey = new Guid("c1c5458b-cbe8-4296-b9ad-52c3a2ba171d"),
                            Category = 4,
                            Comment = "Include any embedded images from media files into the Melodee data file.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "imaging.doLoadEmbeddedImages",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 401,
                            ApiKey = new Guid("0926086f-cb41-4b5c-91d0-5adadf668fe4"),
                            Category = 4,
                            Comment = "Small image size (square image, this is both width and height).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "imaging.smallSize",
                            SortOrder = 0,
                            Value = "300"
                        },
                        new
                        {
                            Id = 402,
                            ApiKey = new Guid("1bcb76b7-1040-42b2-a304-2739a95ede49"),
                            Category = 4,
                            Comment = "Medium image size (square image, this is both width and height).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "imaging.mediumSize",
                            SortOrder = 0,
                            Value = "600"
                        },
                        new
                        {
                            Id = 403,
                            ApiKey = new Guid("04b6f8db-7942-4a73-9613-cca6feab83a6"),
                            Category = 4,
                            Comment = "Large image size (square image, this is both width and height), if larger than will be resized to this image, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "imaging.largeSize",
                            SortOrder = 0,
                            Value = "1600"
                        },
                        new
                        {
                            Id = 404,
                            ApiKey = new Guid("a96d1032-71be-4579-9525-8e29950774c1"),
                            Category = 4,
                            Comment = "Maximum allowed number of images for an album, this includes all image types (Front, Rear, etc.), set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "imaging.maximumNumberOfAlbumImages",
                            SortOrder = 0,
                            Value = "25"
                        },
                        new
                        {
                            Id = 405,
                            ApiKey = new Guid("c1726225-e14f-4a23-bcb8-96d4da9473db"),
                            Category = 4,
                            Comment = "Maximum allowed number of images for an artist, set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "imaging.maximumNumberOfArtistImages",
                            SortOrder = 0,
                            Value = "25"
                        },
                        new
                        {
                            Id = 406,
                            ApiKey = new Guid("799aacfc-60b9-469a-b051-3120312cfc5d"),
                            Category = 4,
                            Comment = "Images under this size are considered invalid, set to zero to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "imaging.minimumImageSize",
                            SortOrder = 0,
                            Value = "300"
                        },
                        new
                        {
                            Id = 1200,
                            ApiKey = new Guid("28a01915-8c1d-494b-ad53-a839e49c2402"),
                            Category = 12,
                            Comment = "Default format for transcoding.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "transcoding.default",
                            SortOrder = 0,
                            Value = "raw"
                        },
                        new
                        {
                            Id = 1201,
                            ApiKey = new Guid("567f1986-73be-4e50-89d8-436eafb5ffe2"),
                            Category = 12,
                            Comment = "Default command to transcode MP3 for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "transcoding.command.mp3",
                            SortOrder = 0,
                            Value = "{ 'format': 'Mp3', 'bitrate: 192, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -f mp3 -' }"
                        },
                        new
                        {
                            Id = 1202,
                            ApiKey = new Guid("25bede6f-f75f-4c32-9063-0ab92a57f925"),
                            Category = 12,
                            Comment = "Default command to transcode using libopus for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "transcoding.command.opus",
                            SortOrder = 0,
                            Value = "{ 'format': 'Opus', 'bitrate: 128, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -c:a libopus -f opus -' }"
                        },
                        new
                        {
                            Id = 1203,
                            ApiKey = new Guid("426a925d-03d6-4222-99dc-da4438f25af5"),
                            Category = 12,
                            Comment = "Default command to transcode to aac for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "transcoding.command.aac",
                            SortOrder = 0,
                            Value = "{ 'format': 'Aac', 'bitrate: 256, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -c:a aac -f adts -' }"
                        },
                        new
                        {
                            Id = 1000,
                            ApiKey = new Guid("1c48f25a-8984-40b4-81b5-016ca46c9765"),
                            Category = 10,
                            Comment = "Is scrobbling enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "scrobbling.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 1001,
                            ApiKey = new Guid("c5559860-4a74-40d4-9bdb-911967a859b9"),
                            Category = 10,
                            Comment = "Is scrobbling to Last.fm enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.Enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 1002,
                            ApiKey = new Guid("b7939c94-a308-4b55-8e85-0debeb25e873"),
                            Category = 10,
                            Comment = "ApiKey used used with last FM. See https://www.last.fm/api/authentication for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.apiKey",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 1003,
                            ApiKey = new Guid("15c072e0-be1c-4250-a1b9-d71787b9a245"),
                            Category = 10,
                            Comment = "Shared secret used with last FM. See https://www.last.fm/api/authentication for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.sharedSecret",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 1100,
                            ApiKey = new Guid("05a355c9-5f58-4010-a0e4-d56caf246ef3"),
                            Category = 11,
                            Comment = "Base URL for Melodee to use when building shareable links and image urls (e.g., 'https://server.domain.com:8080', 'http://server.domain.com').",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "system.baseUrl",
                            SortOrder = 0,
                            Value = "** REQUIRED: THIS MUST BE EDITED **"
                        },
                        new
                        {
                            Id = 1101,
                            ApiKey = new Guid("a1995a05-52e5-4666-9af5-461eb0ed5770"),
                            Category = 11,
                            Comment = "Is downloading enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "system.isDownloadingEnabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 1400,
                            ApiKey = new Guid("f4110a7c-d6a0-4964-b856-7bb8aa486a63"),
                            Category = 14,
                            Comment = "Cron expression to run the artist housekeeping job, set empty to disable. Default of '0 0 0/1 1/1 * ? *' will run every hour. See https://www.freeformatter.com/cron-expression-generator-quartz.html",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "jobs.artistHousekeeping.cronExpression",
                            SortOrder = 0,
                            Value = "0 0 0/1 1/1 * ? *"
                        },
                        new
                        {
                            Id = 1401,
                            ApiKey = new Guid("cb3333cb-646e-4dbc-9000-c423d0f9951f"),
                            Category = 14,
                            Comment = "Cron expression to run the library process job, set empty to disable. Default of '0 */10 * ? * *' Every 10 minutes. See https://www.freeformatter.com/cron-expression-generator-quartz.html",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "jobs.libraryProcess.cronExpression",
                            SortOrder = 0,
                            Value = "0 */10 * ? * *"
                        },
                        new
                        {
                            Id = 1402,
                            ApiKey = new Guid("6568c5ea-9180-45b0-a042-b08dec20fc9d"),
                            Category = 14,
                            Comment = "Cron expression to run the library scan job, set empty to disable. Default of '0 0 0 * * ?' will run every day at 00:00. See https://www.freeformatter.com/cron-expression-generator-quartz.html",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "jobs.libraryInsert.cronExpression",
                            SortOrder = 0,
                            Value = "0 0 0 * * ?"
                        },
                        new
                        {
                            Id = 1403,
                            ApiKey = new Guid("f610a0e9-0b0f-41a2-a498-9db992f53eb7"),
                            Category = 14,
                            Comment = "Cron expression to run the musicbrainz database house keeping job, set empty to disable. Default of '0 0 12 1 * ?' will run first day of the month. See https://www.freeformatter.com/cron-expression-generator-quartz.html",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "jobs.musicbrainzUpdateDatabase.cronExpression",
                            SortOrder = 0,
                            Value = "0 0 12 1 * ?"
                        },
                        new
                        {
                            Id = 1404,
                            ApiKey = new Guid("996b7593-c42a-4424-81bc-6b4af9ff671a"),
                            Category = 14,
                            Comment = "Cron expression to run the artist search engine house keeping job, set empty to disable. Default of '0 0 0 * * ?' will run every day at 00:00. See https://www.freeformatter.com/cron-expression-generator-quartz.html",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17389509828221072L),
                            IsLocked = false,
                            Key = "jobs.artistSearchEngineHousekeeping.cronExpression",
                            SortOrder = 0,
                            Value = "0 0 0 * * ?"
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDownloadable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastVisitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("ShareIds")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VisitCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("BPM")
                        .HasColumnType("integer");

                    b.Property<int>("BitDepth")
                        .HasColumnType("integer");

                    b.Property<int>("BitRate")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<int?>("ChannelCount")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.PrimitiveCollection<string[]>("Genres")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVbr")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lyrics")
                        .HasMaxLength(62000)
                        .HasColumnType("character varying(62000)");

                    b.PrimitiveCollection<string[]>("Moods")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PartTitles")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<double?>("ReplayGain")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReplayPeak")
                        .HasColumnType("double precision");

                    b.Property<int>("SamplingRate")
                        .HasColumnType("integer");

                    b.Property<int>("SongNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TitleNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TitleSort")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("Title");

                    b.HasIndex("AlbumId", "SongNumber")
                        .IsUnique();

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmailNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("HasCommentRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCoverArtRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasDownloadRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasJukeboxRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPlaylistRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPodcastRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSettingsRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasShareRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasStreamRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasUploadRole")
                        .HasColumnType("boolean");

                    b.Property<string>("HatedGenres")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEditor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScrobblingEnabled")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastActivityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastFmSessionKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Instant?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PasswordEncrypted")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "AlbumId")
                        .IsUnique();

                    b.ToTable("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("ArtistId");

                    b.HasIndex("UserId", "ArtistId")
                        .IsUnique();

                    b.ToTable("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.ArtistRelation", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("RelatedArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Artist", "RelatedArtist")
                        .WithMany()
                        .HasForeignKey("RelatedArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("RelatedArtist");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Bookmarks")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Contributors")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Contributors")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Contributors")
                        .HasForeignKey("SongId");

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Library", "Library")
                        .WithMany("ScanHistories")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("PlayQues")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("PlayQues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", null)
                        .WithMany("Playlists")
                        .HasForeignKey("SongId");

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Playlist", "Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Shares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("UserAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserAlbums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("UserArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserArtists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("UserSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserSongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("Songs");

                    b.Navigation("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Contributors");

                    b.Navigation("RelatedArtists");

                    b.Navigation("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Navigation("ScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Contributors");

                    b.Navigation("PlayQues");

                    b.Navigation("Playlists");

                    b.Navigation("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("PlayQues");

                    b.Navigation("Players");

                    b.Navigation("Playlists");

                    b.Navigation("Shares");

                    b.Navigation("UserAlbums");

                    b.Navigation("UserArtists");

                    b.Navigation("UserSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
