// <auto-generated />
using System;
using Melodee.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melodee.Common.Migrations
{
    [DbContext(typeof(MelodeeDbContext))]
    [Migration("20241106215725_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AlbumStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("AlbumType")
                        .HasColumnType("smallint");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<short?>("DiscCount")
                        .HasColumnType("smallint");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Genres")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsCompilation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MusicBrainzId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<LocalDate>("OriginalReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<LocalDate>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("ArtistId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SortName");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("DiscNumber")
                        .HasColumnType("integer");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId", "DiscNumber")
                        .IsUnique();

                    b.ToTable("AlbumDiscs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumCount")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MusicBrainzId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<string>("RealName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Roles")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SongCount")
                        .HasColumnType("integer");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SortName");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MusicBrainzId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("SortName");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SubRole")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastScanAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Libraries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("7c962f89-3cc5-4fe1-be79-4d876f632bfa"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            Description = "Files in this directory are scanned and Album information is gathered via processing.",
                            IsLocked = false,
                            Name = "Inbound",
                            Path = "/storage/inbound",
                            SortOrder = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("bad70e85-2969-4b22-a2f9-8881e8c732af"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            Description = "The staging directory to place processed files into (Inbound -> Staging -> Library).",
                            IsLocked = false,
                            Name = "Staging",
                            Path = "/storage/staging",
                            SortOrder = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("359c137e-7c7a-4a81-bd11-4d7389cf5fd8"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            Description = "The library directory to place processed, reviewed and ready to use music files into.",
                            IsLocked = false,
                            Name = "Library",
                            Path = "/storage/library",
                            SortOrder = 0,
                            Type = 3
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<int?>("ForAlbumId")
                        .HasColumnType("integer");

                    b.Property<int?>("ForArtistId")
                        .HasColumnType("integer");

                    b.Property<int>("FoundAlbumsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundArtistsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundSongsCount")
                        .HasColumnType("integer");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("Position")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayQues");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxBitRate")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("ScrobbleEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "Client", "UserAgent");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedUserIds")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.HasKey("SongId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId", "PlaylistId")
                        .IsUnique();

                    b.ToTable("PlaylistSong");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.RadioStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("HomePageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StreamUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.ToTable("RadioStations");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Scrobble", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("EnqueueTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<long>("PlayTimeInMs")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "ServiceUrl", "SongId", "PlayTimeInMs")
                        .IsUnique();

                    b.ToTable("Scrobbles");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Category");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("f82bdb30-a1b6-4385-a2a6-b0d27184e156"),
                            Comment = "Add a default filter to show only albums with this or less number of songs.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "filtering.lessThanSongCount",
                            SortOrder = 0,
                            Value = "3"
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("ee623f8f-3690-448b-8752-eb4fd3b3f29c"),
                            Comment = "Add a default filter to show only albums with this or less duration.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "filtering.lessThanDuration",
                            SortOrder = 0,
                            Value = "720000"
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("132f3e03-7544-4626-b967-ff1f7e9f7774"),
                            Comment = "Maximum number of albums to scan when processing inbound directory.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.stagingDirectoryScanLimit",
                            SortOrder = 0,
                            Value = "250"
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = new Guid("c7cc9696-f49e-4633-a4aa-df31e9e168bc"),
                            Comment = "Default page size when view including pagination.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "defaults.pagesize",
                            SortOrder = 0,
                            Value = "100"
                        },
                        new
                        {
                            Id = 5,
                            ApiKey = new Guid("49801fbb-6800-44d7-a959-0333f221a0c5"),
                            Comment = "When true then move the Melodee.json data file when moving Albums, otherwise delete.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.moveMelodeeJsonDataFileToLibrary",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 6,
                            ApiKey = new Guid("47f631f4-8ef2-4776-8371-ebf9a7f396c2"),
                            Comment = "Amount of time to display a Toast then auto-close (in milliseconds.)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "userinterface.toastAutoCloseTime",
                            SortOrder = 0,
                            Value = "2000"
                        },
                        new
                        {
                            Id = 7,
                            ApiKey = new Guid("e1db55a0-18a3-4192-b3ac-2eca27eae4a4"),
                            Comment = "Short Format to use when displaying full dates.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayFormatShort",
                            SortOrder = 0,
                            Value = "yyyyMMdd HH:mm"
                        },
                        new
                        {
                            Id = 8,
                            ApiKey = new Guid("8b6157b3-dcac-4dd8-8f4e-3fbc2c19ff76"),
                            Comment = "Format to use when displaying activity related dates (e.g. processing messages)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayActivityFormat",
                            SortOrder = 0,
                            Value = "HH:mm:ss.fff"
                        },
                        new
                        {
                            Id = 9,
                            ApiKey = new Guid("667aea58-ea02-40aa-af38-60e50b086478"),
                            Comment = "List of ignored articles when scanning media (pipe delimited).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.ignoredArticles",
                            SortOrder = 0,
                            Value = "THE|EL|LA|LOS|LAS|LE|LES|OS|AS|O|A"
                        },
                        new
                        {
                            Id = 10,
                            ApiKey = new Guid("4d553494-1677-43fe-b35d-15f0c3f96ed7"),
                            Comment = "Is Magic processing enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "magic.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 11,
                            ApiKey = new Guid("82c32ee5-4056-468d-9074-53def368a33a"),
                            Comment = "Renumber songs when doing magic processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "magic.doRenumberSongs",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 12,
                            ApiKey = new Guid("beba0f76-a18b-4a78-b4d1-32f7532cd35e"),
                            Comment = "Remove featured artists from song artist when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongArtist",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 13,
                            ApiKey = new Guid("fb0f7407-dc60-4687-9e74-e1ee1c06b78f"),
                            Comment = "Remove featured artists from song title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 14,
                            ApiKey = new Guid("4c4d3151-f322-4077-b001-ba6ca5faaf4f"),
                            Comment = "Replace song artist separators with standard ID3 separator ('/') when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "magic.doReplaceSongsArtistSeparators",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 15,
                            ApiKey = new Guid("53f90d49-409f-4c49-bc85-b6dc1d1d7cf9"),
                            Comment = "Set the song year to current year if invalid or missing when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "magic.doSetYearToCurrentIfInvalid",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 16,
                            ApiKey = new Guid("fb62d5d9-ac10-4ec0-8526-36592491ee43"),
                            Comment = "Remove unwanted text from album title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "magic.doRemoveUnwantedTextFromAlbumTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 17,
                            ApiKey = new Guid("5b5c9db8-5538-4385-900b-43b809e3c1b0"),
                            Comment = "Enable Melodee to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "conversion.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 18,
                            ApiKey = new Guid("677a3fb4-1769-413d-80a1-013d142887ce"),
                            Comment = "Bitrate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "conversion.bitrate",
                            SortOrder = 0,
                            Value = "384"
                        },
                        new
                        {
                            Id = 19,
                            ApiKey = new Guid("2d916ce9-68d8-4462-aad8-3f29113f6cd7"),
                            Comment = "Vbr to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "conversion.vbrLevel",
                            SortOrder = 0,
                            Value = "4"
                        },
                        new
                        {
                            Id = 20,
                            ApiKey = new Guid("aafb557f-e28f-4dc7-85e5-6b5c861b514c"),
                            Comment = "Sampling rate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "conversion.samplingRate",
                            SortOrder = 0,
                            Value = "48000"
                        },
                        new
                        {
                            Id = 21,
                            ApiKey = new Guid("a57fac19-5450-4b5a-a6d9-193e6ca9d89f"),
                            Comment = "Process of CueSheet files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "plugin.cueSheet.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 22,
                            ApiKey = new Guid("5a317ea2-6a00-4190-8c4e-5dc12c8576e8"),
                            Comment = "Process of M3U files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "plugin.m3u.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 23,
                            ApiKey = new Guid("855d304b-0fd4-419c-81f0-640b6d2dfb1c"),
                            Comment = "Process of NFO files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "plugin.nfo.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 24,
                            ApiKey = new Guid("8f8a95ef-a878-4268-89dc-dd8517a84429"),
                            Comment = "Process of Simple File Verification (SFV) files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "plugin.simpleFileVerification.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 25,
                            ApiKey = new Guid("efff4ebc-06c5-451e-8ca7-c5d97767f962"),
                            Comment = "Fragments of artist names to replace (JSON Dictionary).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.artistNameReplacements",
                            SortOrder = 0,
                            Value = "{'AC/DC': ['AC; DC', 'AC;DC', 'AC/ DC', 'AC DC'] , 'Love/Hate': ['Love; Hate', 'Love;Hate', 'Love/ Hate', 'Love Hate'] }"
                        },
                        new
                        {
                            Id = 26,
                            ApiKey = new Guid("d7b74c3e-d05d-4f3d-88e5-bc7bc54c131f"),
                            Comment = "If OrigAlbumYear [TOR, TORY, TDOR] value is invalid use current year.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.doUseCurrentYearAsDefaultOrigAlbumYearValue",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 27,
                            ApiKey = new Guid("e5893961-15e2-4920-a9f8-4e06bf8e7571"),
                            Comment = "Delete original files when processing. When false a copy if made, else original is deleted after processed.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.doDeleteOriginal",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 28,
                            ApiKey = new Guid("003df30f-b03f-4b5a-8244-c9b4883b9702"),
                            Comment = "Extension to add to file when converted, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.convertedExtension",
                            SortOrder = 0,
                            Value = "_converted"
                        },
                        new
                        {
                            Id = 29,
                            ApiKey = new Guid("4639884d-a7ff-4a93-b84b-b6a531bf95d6"),
                            Comment = "Extension to add to file when processed, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.processedExtension",
                            SortOrder = 0,
                            Value = "_processed"
                        },
                        new
                        {
                            Id = 30,
                            ApiKey = new Guid("6d0e5d73-2f07-4a37-8d53-8479ca16d207"),
                            Comment = "Extension to add to file to indicate other files in the same category where processed and this file was skipped during processing, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.skippedExtension",
                            SortOrder = 0,
                            Value = "_skipped"
                        },
                        new
                        {
                            Id = 31,
                            ApiKey = new Guid("f984a7b5-4aa7-4093-86e3-661438e91da4"),
                            Comment = "When processing over write any existing Melodee data files, otherwise skip and leave in place.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.doOverrideExistingMelodeeDataFiles",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 32,
                            ApiKey = new Guid("5b6b0e79-a0b0-46c8-b345-52a85b5feb86"),
                            Comment = "Include any embedded images from media files into the Melodee data file.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.doLoadEmbeddedImages",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 33,
                            ApiKey = new Guid("7fe6d8d6-5c57-4657-bfda-8fd79cb1033f"),
                            Comment = "The maximum number of files to process, set to zero for infinite.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.maximumProcessingCount",
                            SortOrder = 0,
                            Value = "0"
                        },
                        new
                        {
                            Id = 34,
                            ApiKey = new Guid("db8f536d-85d9-4325-8162-d8288cd7b29a"),
                            Comment = "Maximum allowed length of album directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.maximumAlbumDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 35,
                            ApiKey = new Guid("c67cffe8-138d-443e-8e27-6ac6b3990b66"),
                            Comment = "Maximum allowed length of artist directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.maximumArtistDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 36,
                            ApiKey = new Guid("125aa78f-8f7e-469d-948e-d9e0fdb423c5"),
                            Comment = "Fragments to remove from album titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.albumTitleRemovals",
                            SortOrder = 0,
                            Value = "['^', '~', '#']"
                        },
                        new
                        {
                            Id = 37,
                            ApiKey = new Guid("691d91ab-e2d3-4560-b7c3-a7f4dabca834"),
                            Comment = "Fragments to remove from song titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.songTitleRemovals",
                            SortOrder = 0,
                            Value = "[';', '(Remaster)', 'Remaster']"
                        },
                        new
                        {
                            Id = 38,
                            ApiKey = new Guid("2988b248-241d-4bcb-a289-cfaf418dbcf1"),
                            Comment = "Continue processing if an error is encountered.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.doContinueOnDirectoryProcessingErrors",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 39,
                            ApiKey = new Guid("d484a4c9-f4e8-4fd3-a8a2-ee3bf5114059"),
                            Comment = "When true then move Album Melodee json files to the Staging directory.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "processing.doMoveMelodeeDataFileToStagingDirectory",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 40,
                            ApiKey = new Guid("78745a29-4908-4886-b4dc-386ebc856f6c"),
                            Comment = "Is scripting enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "scripting.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 41,
                            ApiKey = new Guid("b3101960-5b66-4566-9b59-f6ca9d39c0a5"),
                            Comment = "Script to run before processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "scripting.preDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 42,
                            ApiKey = new Guid("0b8657bf-9588-4062-b8e5-55203c537821"),
                            Comment = "Script to run after processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "scripting.postDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 43,
                            ApiKey = new Guid("0276b7dc-4def-486e-8de5-4e6f48022cee"),
                            Comment = "The maximum value a media number can have for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "validation.maximumMediaNumber",
                            SortOrder = 0,
                            Value = "500"
                        },
                        new
                        {
                            Id = 44,
                            ApiKey = new Guid("765fe706-4657-4904-af86-03302c25f2fc"),
                            Comment = "The maximum value a song number can have for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "validation.maximumSongNumber",
                            SortOrder = 0,
                            Value = "1000"
                        },
                        new
                        {
                            Id = 45,
                            ApiKey = new Guid("731c3068-d715-4ecd-9cd5-6cc61fdef438"),
                            Comment = "Minimum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "validation.minimumAlbumYear",
                            SortOrder = 0,
                            Value = "1860"
                        },
                        new
                        {
                            Id = 46,
                            ApiKey = new Guid("06467c7f-1593-44dd-acd9-d39ed70f27a8"),
                            Comment = "Maximum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17309302442167887L),
                            IsLocked = false,
                            Key = "validation.maximumAlbumYear",
                            SortOrder = 0,
                            Value = "2150"
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDownloadable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastVisitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("SongIds")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VisitCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumDiscId")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("BPM")
                        .HasColumnType("integer");

                    b.Property<int>("BitDepth")
                        .HasColumnType("integer");

                    b.Property<int>("BitRate")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<int?>("ChannelCount")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("FileSize")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lyrics")
                        .HasMaxLength(62000)
                        .HasColumnType("character varying(62000)");

                    b.Property<string>("MusicBrainzId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PartTitles")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("SamplingRate")
                        .HasColumnType("integer");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SortName");

                    b.HasIndex("Title");

                    b.HasIndex("AlbumDiscId", "TrackNumber")
                        .IsUnique();

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmailNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("HasCommentRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCoverArtRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasDownloadRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasJukeboxRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPlaylistRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPodcastRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSettingsRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasShareRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasStreamRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasUploadRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScrobblingEnabled")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastActivityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "AlbumId")
                        .IsUnique();

                    b.ToTable("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("ArtistId");

                    b.HasIndex("UserId", "ArtistId")
                        .IsUnique();

                    b.ToTable("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Discs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Bookmarks")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Contributors")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Contributors")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Contributors")
                        .HasForeignKey("SongId");

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Library", "Library")
                        .WithMany("ScanHistories")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("PlayQues")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("PlayQues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", null)
                        .WithMany("Playlists")
                        .HasForeignKey("SongId");

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Playlist", "Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Scrobble", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Scrobbles")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Scrobbles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Shares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.AlbumDisc", "AlbumDisc")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumDiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlbumDisc");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("UserAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserAlbums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("UserArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserArtists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("UserSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserSongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("Discs");

                    b.Navigation("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Contributors");

                    b.Navigation("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Navigation("ScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Contributors");

                    b.Navigation("PlayQues");

                    b.Navigation("Playlists");

                    b.Navigation("Scrobbles");

                    b.Navigation("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("PlayQues");

                    b.Navigation("Players");

                    b.Navigation("Playlists");

                    b.Navigation("Scrobbles");

                    b.Navigation("Shares");

                    b.Navigation("UserAlbums");

                    b.Navigation("UserArtists");

                    b.Navigation("UserSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
