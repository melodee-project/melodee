// <auto-generated />
using System;
using Melodee.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melodee.Common.Migrations
{
    [DbContext(typeof(MelodeeDbContext))]
    [Migration("20250122214930_AddedSearchMaximumPageSize")]
    partial class AddedSearchMaximumPageSize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AlbumStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("AlbumType")
                        .HasColumnType("smallint");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<short?>("DiscCount")
                        .HasColumnType("smallint");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.PrimitiveCollection<string[]>("Genres")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompilation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MetaDataStatus")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("Moods")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<LocalDate?>("OriginalReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<LocalDate>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<double?>("ReplayGain")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReplayPeak")
                        .HasColumnType("double precision");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("ArtistId", "Name")
                        .IsUnique();

                    b.HasIndex("ArtistId", "NameNormalized")
                        .IsUnique();

                    b.HasIndex("ArtistId", "SortName")
                        .IsUnique();

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<short>("DiscNumber")
                        .HasColumnType("smallint");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId", "DiscNumber")
                        .IsUnique();

                    b.ToTable("AlbumDiscs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumCount")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.Property<int>("MetaDataStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<string>("RealName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Roles")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SongCount")
                        .HasColumnType("integer");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("LibraryId");

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameNormalized");

                    b.HasIndex("SortName");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.ArtistRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<int>("ArtistRelationType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("RelatedArtistId")
                        .HasColumnType("integer");

                    b.Property<Instant?>("RelationEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("RelationStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("RelatedArtistId");

                    b.HasIndex("ArtistId", "RelatedArtistId")
                        .IsUnique();

                    b.ToTable("ArtistRelation");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<string>("ContributorName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ContributorType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MetaTagIdentifier")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SubRole")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("ArtistId", "MetaTagIdentifier", "AlbumId")
                        .IsUnique();

                    b.HasIndex("ContributorName", "MetaTagIdentifier", "AlbumId")
                        .IsUnique();

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("ArtistCount")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastScanAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("SongCount")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Libraries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("fcfdab56-a37e-445f-92af-47a478a010ef"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            Description = "Files in this directory are scanned and Album information is gathered via processing.",
                            IsLocked = false,
                            Name = "Inbound",
                            Path = "/storage/inbound/",
                            SortOrder = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("132ddb1f-8c50-4d74-b920-dd50fa8eaa3b"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            Description = "The staging directory to place processed files into (Inbound -> Staging -> Library).",
                            IsLocked = false,
                            Name = "Staging",
                            Path = "/storage/staging/",
                            SortOrder = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("7e4e999a-b2f4-45c6-bdef-433923f0eb20"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            Description = "The library directory to place processed, reviewed and ready to use music files into.",
                            IsLocked = false,
                            Name = "Storage",
                            Path = "/storage/library/",
                            SortOrder = 0,
                            Type = 3
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = new Guid("b6383d6a-d517-4cd2-ac0c-82ea80bc5605"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            Description = "Library where user images are stored.",
                            IsLocked = false,
                            Name = "User Images",
                            Path = "/storage/images/users/",
                            SortOrder = 0,
                            Type = 4
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<int?>("ForAlbumId")
                        .HasColumnType("integer");

                    b.Property<int?>("ForArtistId")
                        .HasColumnType("integer");

                    b.Property<int>("FoundAlbumsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundArtistsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundSongsCount")
                        .HasColumnType("integer");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsCurrentSong")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayQueId")
                        .HasColumnType("integer");

                    b.Property<double>("Position")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayQues");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Hostname")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxBitRate")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("ScrobbleEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("TranscodingId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "Client", "UserAgent");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedUserIds")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasCustomImage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.HasKey("SongId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId", "PlaylistId")
                        .IsUnique();

                    b.ToTable("PlaylistSong");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.RadioStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("HomePageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StreamUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.ToTable("RadioStations");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByUserAgent")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("ByUserId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FoundAlbumsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundArtistsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundOtherItems")
                        .HasColumnType("integer");

                    b.Property<int>("FoundSongsCount")
                        .HasColumnType("integer");

                    b.Property<double>("SearchDurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("SearchQuery")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("SearchHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Category");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("481649d4-2db4-46b3-a97e-9d1b60347bdc"),
                            Comment = "Add a default filter to show only albums with this or less number of songs.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "filtering.lessThanSongCount",
                            SortOrder = 0,
                            Value = "3"
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("0413b9d8-ec92-41f3-bc10-981bfcca078f"),
                            Comment = "Add a default filter to show only albums with this or less duration.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "filtering.lessThanDuration",
                            SortOrder = 0,
                            Value = "720000"
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("6e9f7413-0fb5-4fbb-b39d-f44068b80af0"),
                            Comment = "Maximum number of albums to scan when processing inbound directory.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.stagingDirectoryScanLimit",
                            SortOrder = 0,
                            Value = "250"
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = new Guid("53070f82-0666-410e-98fd-d731453ed876"),
                            Comment = "Default page size when view including pagination.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "defaults.pagesize",
                            SortOrder = 0,
                            Value = "100"
                        },
                        new
                        {
                            Id = 6,
                            ApiKey = new Guid("16de5038-d91a-4929-9c26-a535caa738dd"),
                            Comment = "Amount of time to display a Toast then auto-close (in milliseconds.)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "userinterface.toastAutoCloseTime",
                            SortOrder = 0,
                            Value = "2000"
                        },
                        new
                        {
                            Id = 300,
                            ApiKey = new Guid("15696616-d656-4cde-85f5-a6491d451e0d"),
                            Category = 3,
                            Comment = "Short Format to use when displaying full dates.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayFormatShort",
                            SortOrder = 0,
                            Value = "yyyyMMdd HH\\:mm"
                        },
                        new
                        {
                            Id = 301,
                            ApiKey = new Guid("417dd22b-10dd-4a38-b5d2-af82e2f0d2f4"),
                            Category = 3,
                            Comment = "Format to use when displaying activity related dates (e.g., processing messages)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayActivityFormat",
                            SortOrder = 0,
                            Value = "hh\\:mm\\:ss\\.ffff"
                        },
                        new
                        {
                            Id = 9,
                            ApiKey = new Guid("43b5c804-2aab-40b8-af9e-65e365df00f8"),
                            Comment = "List of ignored articles when scanning media (pipe delimited).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.ignoredArticles",
                            SortOrder = 0,
                            Value = "THE|EL|LA|LOS|LAS|LE|LES|OS|AS|O|A"
                        },
                        new
                        {
                            Id = 500,
                            ApiKey = new Guid("21411d84-e491-4bea-a9f8-b25a8271f921"),
                            Category = 5,
                            Comment = "Is Magic processing enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "magic.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 501,
                            ApiKey = new Guid("b1f92685-1da4-4548-abcd-295849f14a38"),
                            Category = 5,
                            Comment = "Renumber songs when doing magic processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "magic.doRenumberSongs",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 502,
                            ApiKey = new Guid("adc07cfd-5c75-49d4-8cec-cae06bd3254e"),
                            Category = 5,
                            Comment = "Remove featured artists from song artist when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongArtist",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 503,
                            ApiKey = new Guid("8ae5278c-9b72-46b4-92e0-30744bff4dfd"),
                            Category = 5,
                            Comment = "Remove featured artists from song title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 504,
                            ApiKey = new Guid("e4a00111-db57-49f6-ac08-a10331c6da9c"),
                            Category = 5,
                            Comment = "Replace song artist separators with standard ID3 separator ('/') when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "magic.doReplaceSongsArtistSeparators",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 505,
                            ApiKey = new Guid("0b50b409-4bc6-4d21-ba8d-a85ea6df542b"),
                            Category = 5,
                            Comment = "Set the song year to current year if invalid or missing when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "magic.doSetYearToCurrentIfInvalid",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 506,
                            ApiKey = new Guid("d44efe2e-ac8d-4bfa-a1f0-fb361ba41bce"),
                            Category = 5,
                            Comment = "Remove unwanted text from album title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "magic.doRemoveUnwantedTextFromAlbumTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 507,
                            ApiKey = new Guid("0d6ec429-1f17-46c6-a9e4-fc9cb6302b98"),
                            Category = 5,
                            Comment = "Remove unwanted text from song titles when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "magic.doRemoveUnwantedTextFromSongTitles",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 200,
                            ApiKey = new Guid("93b520e9-75c0-4b1a-987b-f328df9ca068"),
                            Category = 2,
                            Comment = "Enable Melodee to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "conversion.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 201,
                            ApiKey = new Guid("166e5ed8-ca09-4476-a3cf-5f4fd05bb1da"),
                            Category = 2,
                            Comment = "Bitrate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "conversion.bitrate",
                            SortOrder = 0,
                            Value = "384"
                        },
                        new
                        {
                            Id = 202,
                            ApiKey = new Guid("58ceec6e-f546-470a-8d4e-6cf8b826e691"),
                            Category = 2,
                            Comment = "Vbr to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "conversion.vbrLevel",
                            SortOrder = 0,
                            Value = "4"
                        },
                        new
                        {
                            Id = 203,
                            ApiKey = new Guid("e4485fe6-c32e-453b-a84a-b98af7f4b289"),
                            Category = 2,
                            Comment = "Sampling rate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "conversion.samplingRate",
                            SortOrder = 0,
                            Value = "48000"
                        },
                        new
                        {
                            Id = 700,
                            ApiKey = new Guid("2b878ec0-1188-4560-b47e-bffdf6013581"),
                            Category = 7,
                            Comment = "Process of CueSheet files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "plugin.cueSheet.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 701,
                            ApiKey = new Guid("94311bd1-7589-45aa-8f07-3ace170412df"),
                            Category = 7,
                            Comment = "Process of M3U files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "plugin.m3u.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 702,
                            ApiKey = new Guid("6847adbb-e039-4229-a968-a8bda2e6187a"),
                            Category = 7,
                            Comment = "Process of NFO files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "plugin.nfo.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 703,
                            ApiKey = new Guid("08dbc1e7-cd29-44b8-873d-759a41a94e72"),
                            Category = 7,
                            Comment = "Process of Simple File Verification (SFV) files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "plugin.simpleFileVerification.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 704,
                            ApiKey = new Guid("417e98d2-46e3-4baf-a135-f7c91a18bcc0"),
                            Category = 7,
                            Comment = "If true then all comments will be removed from media files.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.doDeleteComments",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 26,
                            ApiKey = new Guid("52be8225-81b2-47be-a6b0-6a3e4e1aab59"),
                            Comment = "Fragments of artist names to replace (JSON Dictionary).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.artistNameReplacements",
                            SortOrder = 0,
                            Value = "{'AC/DC': ['AC; DC', 'AC;DC', 'AC/ DC', 'AC DC'] , 'Love/Hate': ['Love; Hate', 'Love;Hate', 'Love/ Hate', 'Love Hate'] }"
                        },
                        new
                        {
                            Id = 27,
                            ApiKey = new Guid("ca7372c8-9241-4f4c-a973-16968bf7a7e3"),
                            Comment = "If OrigAlbumYear [TOR, TORY, TDOR] value is invalid use current year.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.doUseCurrentYearAsDefaultOrigAlbumYearValue",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 28,
                            ApiKey = new Guid("35bee40a-49ee-420c-a234-01393514511f"),
                            Comment = "Delete original files when processing. When false a copy if made, else original is deleted after processed.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.doDeleteOriginal",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 29,
                            ApiKey = new Guid("47f818d8-7ec2-407b-98f7-ff29a2704b2a"),
                            Comment = "Extension to add to file when converted, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.convertedExtension",
                            SortOrder = 0,
                            Value = "_converted"
                        },
                        new
                        {
                            Id = 30,
                            ApiKey = new Guid("5de7d99c-3b10-4111-b31a-0948cf426764"),
                            Comment = "Extension to add to file when processed, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.processedExtension",
                            SortOrder = 0,
                            Value = "_processed"
                        },
                        new
                        {
                            Id = 31,
                            ApiKey = new Guid("6a9a9e59-5112-4aea-9cdf-cc652fbb7f29"),
                            Comment = "Extension to add to file to indicate other files in the same category where processed and this file was skipped during processing, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.skippedExtension",
                            SortOrder = 0,
                            Value = "_skipped"
                        },
                        new
                        {
                            Id = 32,
                            ApiKey = new Guid("2247a04d-4a7c-4ddf-9661-c9f5f7b73c80"),
                            Comment = "When processing over write any existing Melodee data files, otherwise skip and leave in place.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.doOverrideExistingMelodeeDataFiles",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 34,
                            ApiKey = new Guid("463a611b-5a17-4c74-8f06-76255b0cd6c3"),
                            Comment = "The maximum number of files to process, set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.maximumProcessingCount",
                            SortOrder = 0,
                            Value = "0"
                        },
                        new
                        {
                            Id = 35,
                            ApiKey = new Guid("b1254b21-2dac-4666-ae29-fbf3594a2b38"),
                            Comment = "Maximum allowed length of album directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.maximumAlbumDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 36,
                            ApiKey = new Guid("5db43bed-7157-492b-a6e1-fe1b418a1734"),
                            Comment = "Maximum allowed length of artist directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.maximumArtistDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 37,
                            ApiKey = new Guid("ffdb71e2-64fb-40bc-8a34-a98dc0a9561a"),
                            Comment = "Fragments to remove from album titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.albumTitleRemovals",
                            SortOrder = 0,
                            Value = "['^', '~', '#']"
                        },
                        new
                        {
                            Id = 38,
                            ApiKey = new Guid("51f5bd0a-5382-49d5-bec0-6cd9383667ca"),
                            Comment = "Fragments to remove from song titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.songTitleRemovals",
                            SortOrder = 0,
                            Value = "[';', '(Remaster)', 'Remaster']"
                        },
                        new
                        {
                            Id = 39,
                            ApiKey = new Guid("77d6cd3c-20b0-481e-bee9-65f3e5b2ecde"),
                            Comment = "Continue processing if an error is encountered.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.doContinueOnDirectoryProcessingErrors",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 41,
                            ApiKey = new Guid("ba43c0d4-822a-4fdc-9945-034e22f30329"),
                            Comment = "Is scripting enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "scripting.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 42,
                            ApiKey = new Guid("9fa579d0-0a73-4e06-abe4-3e5deaffff01"),
                            Comment = "Script to run before processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "scripting.preDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 43,
                            ApiKey = new Guid("d76524c1-6a44-43ba-9b98-8b892e337239"),
                            Comment = "Script to run after processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "scripting.postDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 44,
                            ApiKey = new Guid("816b8f6c-33c0-4140-9faa-93a0099c6142"),
                            Category = 13,
                            Comment = "The maximum value a media number can have for an album. The length of this is used for formatting song names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "validation.maximumMediaNumber",
                            SortOrder = 0,
                            Value = "999"
                        },
                        new
                        {
                            Id = 45,
                            ApiKey = new Guid("815df500-35f4-4a63-a442-52a9e7e711c7"),
                            Comment = "Don't create performer contributors for these performer names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.ignoredPerformers",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 46,
                            ApiKey = new Guid("2f52eb39-64de-45a2-86f3-b68299e3ede3"),
                            Comment = "Don't create production contributors for these production names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.ignoredProduction",
                            SortOrder = 0,
                            Value = "['www.t.me;pmedia_music']"
                        },
                        new
                        {
                            Id = 47,
                            ApiKey = new Guid("fec507ce-30f4-4194-95aa-c4bcf258398b"),
                            Comment = "Don't create publisher contributors for these artist names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.ignoredPublishers",
                            SortOrder = 0,
                            Value = "['P.M.E.D.I.A','PMEDIA','PMEDIA GROUP']"
                        },
                        new
                        {
                            Id = 48,
                            ApiKey = new Guid("92855471-0412-4bc5-90a0-9bdfabc8be7c"),
                            Comment = "Prefix to apply to directories to skip processing. This is also used then a directory throws an error attempting to be processed, to prevent future processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.skippedDirectoryPrefix",
                            SortOrder = 0,
                            Value = "_skip_ "
                        },
                        new
                        {
                            Id = 49,
                            ApiKey = new Guid("e46cc924-33a9-4858-b4a9-bc8f4cbe035b"),
                            Comment = "Private key used to encrypt/decrypt passwords for Subsonic authentication. Use https://generate-random.org/encryption-key-generator?count=1&bytes=32&cipher=aes-256-cbc&string=&password= to generate a new key.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "encryption.privateKey",
                            SortOrder = 0,
                            Value = "H+Kiik6VMKfTD2MesF1GoMjczTrD5RhuKckJ5+/UQWOdWajGcsEC3yEnlJ5eoy8Y"
                        },
                        new
                        {
                            Id = 50,
                            ApiKey = new Guid("d3e149c8-6fb4-4c5b-b0c8-ba802c234059"),
                            Comment = "Prefix to apply to indicate an album directory is a duplicate album for an artist. If left blank the default of '__duplicate_' will be used.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "processing.duplicateAlbumPrefix",
                            SortOrder = 0,
                            Value = "__duplicate_ "
                        },
                        new
                        {
                            Id = 1300,
                            ApiKey = new Guid("800e22e2-6de0-4619-94d7-e7921be101b3"),
                            Category = 13,
                            Comment = "The maximum value a song number can have for an album. The length of this is used for formatting song names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "validation.maximumSongNumber",
                            SortOrder = 0,
                            Value = "9999"
                        },
                        new
                        {
                            Id = 1301,
                            ApiKey = new Guid("b7dec802-7dd4-4df5-a6e8-0b1862d69797"),
                            Category = 13,
                            Comment = "Minimum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "validation.minimumAlbumYear",
                            SortOrder = 0,
                            Value = "1860"
                        },
                        new
                        {
                            Id = 1302,
                            ApiKey = new Guid("fdc53674-ef73-4e4d-a514-86958d96b9cb"),
                            Category = 13,
                            Comment = "Maximum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "validation.maximumAlbumYear",
                            SortOrder = 0,
                            Value = "2150"
                        },
                        new
                        {
                            Id = 100,
                            ApiKey = new Guid("43dd4f09-2de7-4708-a4aa-236a7a0f144f"),
                            Category = 1,
                            Comment = "OpenSubsonic server supported Subsonic API version.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonic.serverSupportedVersion",
                            SortOrder = 0,
                            Value = "1.16.1"
                        },
                        new
                        {
                            Id = 101,
                            ApiKey = new Guid("71f129c4-aed2-442d-b402-cc8844d2b892"),
                            Category = 1,
                            Comment = "OpenSubsonic server name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.type",
                            SortOrder = 0,
                            Value = "Melodee"
                        },
                        new
                        {
                            Id = 102,
                            ApiKey = new Guid("554878b2-343d-4727-bcee-1879824458f0"),
                            Category = 1,
                            Comment = "OpenSubsonic server actual version. [Ex: 1.2.3 (beta)]",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.version",
                            SortOrder = 0,
                            Value = "1.0.1 (beta)"
                        },
                        new
                        {
                            Id = 103,
                            ApiKey = new Guid("27d925db-66db-46a7-afc7-d1d1f49cd182"),
                            Category = 1,
                            Comment = "OpenSubsonic email to use in License responses.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServerLicenseEmail",
                            SortOrder = 0,
                            Value = "noreply@localhost.lan"
                        },
                        new
                        {
                            Id = 104,
                            ApiKey = new Guid("8bd0757d-a873-409c-bd8f-42caf157a034"),
                            Category = 1,
                            Comment = "Limit the number of artists to include in an indexes request, set to zero for 32k per index (really not recommended with tens of thousands of artists and mobile clients timeout downloading indexes, a user can find an artist by search)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.index.artistLimit",
                            SortOrder = 0,
                            Value = "1000"
                        },
                        new
                        {
                            Id = 53,
                            ApiKey = new Guid("81dfb4a4-a669-42bc-83b7-94205b8a08fc"),
                            Comment = "Processing batching size. Allowed range is between [250] and [1000]. ",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "defaults.batchSize",
                            SortOrder = 0,
                            Value = "250"
                        },
                        new
                        {
                            Id = 902,
                            ApiKey = new Guid("ed2b99b1-fe93-427b-902c-0ee989ba5ae2"),
                            Category = 9,
                            Comment = "User agent to send with Search engine requests.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.userAgent",
                            SortOrder = 0,
                            Value = "Mozilla/5.0 (X11; Linux x86_64; rv:131.0) Gecko/20100101 Firefox/131.0"
                        },
                        new
                        {
                            Id = 903,
                            ApiKey = new Guid("b52003f4-601c-4973-8a9c-f5996d1506fc"),
                            Category = 9,
                            Comment = "Default page size when performing a search engine search.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.defaultPageSize",
                            SortOrder = 0,
                            Value = "20"
                        },
                        new
                        {
                            Id = 904,
                            ApiKey = new Guid("4e4e7a07-1d2d-4340-9747-d087bf8147b1"),
                            Category = 9,
                            Comment = "Is MusicBrainz search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 905,
                            ApiKey = new Guid("50294334-6572-4b29-89f5-c78fa19930d5"),
                            Category = 9,
                            Comment = "Storage path to hold MusicBrainz downloaded files and SQLite db.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.storagePath",
                            SortOrder = 0,
                            Value = "/melodee_test/search-engine-storage/musicbrainz/"
                        },
                        new
                        {
                            Id = 906,
                            ApiKey = new Guid("0e63a24e-0406-4673-ad8d-eb8fa22b3e60"),
                            Category = 9,
                            Comment = "Maximum number of batches import from MusicBrainz downloaded db dump (this setting is usually used during debugging), set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importMaximumToProcess",
                            SortOrder = 0,
                            Value = "0"
                        },
                        new
                        {
                            Id = 907,
                            ApiKey = new Guid("0dd729ad-9a84-4432-b508-c526344a1e0f"),
                            Category = 9,
                            Comment = "Number of records to import from MusicBrainz downloaded db dump before commiting to local SQLite database.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importBatchSize",
                            SortOrder = 0,
                            Value = "50000"
                        },
                        new
                        {
                            Id = 908,
                            ApiKey = new Guid("e0d8edcb-887b-4e10-a6c7-1084edb13699"),
                            Category = 9,
                            Comment = "Timestamp of when last MusicBrainz import was successful.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importLastImportTimestamp",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 910,
                            ApiKey = new Guid("4f71565e-3234-41e1-877f-f8267d188a01"),
                            Category = 9,
                            Comment = "Is Spotify search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 911,
                            ApiKey = new Guid("672bd1ff-c785-4733-af3d-1a604dc75b72"),
                            Category = 9,
                            Comment = "ApiKey used used with Spotify. See https://developer.spotify.com/ for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.apiKey",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 912,
                            ApiKey = new Guid("879ca732-68ff-4468-9f33-0a520ab72d12"),
                            Category = 9,
                            Comment = "Shared secret used with Spotify. See https://developer.spotify.com/ for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.sharedSecret",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 913,
                            ApiKey = new Guid("83e8a0be-54e1-4d2b-aeae-4dbedb0053b7"),
                            Category = 9,
                            Comment = "Token obtained from Spotify using the ApiKey and the Secret, this json contains expiry information.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.accessToken",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 914,
                            ApiKey = new Guid("87984e40-33de-4479-94a2-27169ea84983"),
                            Category = 9,
                            Comment = "Is ITunes search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.itunes.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 915,
                            ApiKey = new Guid("41f56803-a5b3-408d-8e0c-dbae412f1830"),
                            Category = 9,
                            Comment = "Is LastFM search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.lastFm.Enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 916,
                            ApiKey = new Guid("a91e47c6-3491-4299-8573-a61ab1936d17"),
                            Category = 9,
                            Comment = "When performing a search engine search, the maximum allowed page size.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "searchEngine.maximumAllowedPageSize",
                            SortOrder = 0,
                            Value = "1000"
                        },
                        new
                        {
                            Id = 400,
                            ApiKey = new Guid("6b1bb112-a5ce-4f7f-bed2-7eea6c0716e5"),
                            Category = 4,
                            Comment = "Include any embedded images from media files into the Melodee data file.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "imaging.doLoadEmbeddedImages",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 401,
                            ApiKey = new Guid("d20d1966-539e-482c-a04d-62dd59d9136e"),
                            Category = 4,
                            Comment = "Small image size (square image, this is both width and height).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "imaging.smallSize",
                            SortOrder = 0,
                            Value = "300"
                        },
                        new
                        {
                            Id = 402,
                            ApiKey = new Guid("8a53a4b0-d143-4a90-b873-61b182fe12ea"),
                            Category = 4,
                            Comment = "Medium image size (square image, this is both width and height).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "imaging.mediumSize",
                            SortOrder = 0,
                            Value = "600"
                        },
                        new
                        {
                            Id = 403,
                            ApiKey = new Guid("9c8a0a42-1334-4e09-a778-6680ea5a2d3b"),
                            Category = 4,
                            Comment = "Large image size (square image, this is both width and height), if larger than will be resized to this image, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "imaging.largeSize",
                            SortOrder = 0,
                            Value = "1600"
                        },
                        new
                        {
                            Id = 404,
                            ApiKey = new Guid("3a149b81-ff65-4f09-86ec-5af16ace4903"),
                            Category = 4,
                            Comment = "Maximum allowed number of images for an album, this includes all image types (Front, Rear, etc.), set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "imaging.maximumNumberOfAlbumImages",
                            SortOrder = 0,
                            Value = "25"
                        },
                        new
                        {
                            Id = 405,
                            ApiKey = new Guid("e0988c07-952c-4cd6-9d89-d8524e98a000"),
                            Category = 4,
                            Comment = "Maximum allowed number of images for an artist, set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "imaging.maximumNumberOfArtistImages",
                            SortOrder = 0,
                            Value = "25"
                        },
                        new
                        {
                            Id = 406,
                            ApiKey = new Guid("97419029-25e8-4dcf-ade9-4445462603c2"),
                            Category = 4,
                            Comment = "Images under this size are considered invalid, set to zero to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "imaging.minimumImageSize",
                            SortOrder = 0,
                            Value = "300"
                        },
                        new
                        {
                            Id = 1200,
                            ApiKey = new Guid("92a5a521-db33-4602-9d9d-8773595e71e0"),
                            Category = 12,
                            Comment = "Default format for transcoding.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "transcoding.default",
                            SortOrder = 0,
                            Value = "raw"
                        },
                        new
                        {
                            Id = 1201,
                            ApiKey = new Guid("098638bf-b528-41b6-a5c7-e2f5879fc5e6"),
                            Category = 12,
                            Comment = "Default command to transcode MP3 for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "transcoding.command.mp3",
                            SortOrder = 0,
                            Value = "{ 'format': 'Mp3', 'bitrate: 192, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -f mp3 -' }"
                        },
                        new
                        {
                            Id = 1202,
                            ApiKey = new Guid("f2685b31-e8e0-4659-80ca-c5e8af3ad332"),
                            Category = 12,
                            Comment = "Default command to transcode using libopus for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "transcoding.command.opus",
                            SortOrder = 0,
                            Value = "{ 'format': 'Opus', 'bitrate: 128, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -c:a libopus -f opus -' }"
                        },
                        new
                        {
                            Id = 1203,
                            ApiKey = new Guid("b530e7af-17e5-49a2-923c-834ec97c38ae"),
                            Category = 12,
                            Comment = "Default command to transcode to aac for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "transcoding.command.aac",
                            SortOrder = 0,
                            Value = "{ 'format': 'Aac', 'bitrate: 256, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -c:a aac -f adts -' }"
                        },
                        new
                        {
                            Id = 1000,
                            ApiKey = new Guid("623cf740-0fb9-4154-a2f6-1a8a3ea52860"),
                            Category = 10,
                            Comment = "Is scrobbling enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "scrobbling.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 1001,
                            ApiKey = new Guid("36d8aa4b-7cc0-46af-9343-d27c31aa2f57"),
                            Category = 10,
                            Comment = "Is scrobbling to Last.fm enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.Enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 1002,
                            ApiKey = new Guid("08142d91-6a89-41a1-a5a0-6e1f4a69c09c"),
                            Category = 10,
                            Comment = "ApiKey used used with last FM. See https://www.last.fm/api/authentication for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.apiKey",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 1003,
                            ApiKey = new Guid("c943498e-0235-42d6-a8fe-678bf61e4ea9"),
                            Category = 10,
                            Comment = "Shared secret used with last FM. See https://www.last.fm/api/authentication for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.sharedSecret",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 1100,
                            ApiKey = new Guid("706ba529-41ac-4b4a-90b6-32460f6de12c"),
                            Category = 11,
                            Comment = "Base URL for Melodee to use when building shareable links and image urls (e.g., 'https://server.domain.com:8080', 'http://server.domain.com').",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "system.baseUrl",
                            SortOrder = 0,
                            Value = "** REQUIRED: THIS MUST BE EDITED **"
                        },
                        new
                        {
                            Id = 1101,
                            ApiKey = new Guid("6a64cb92-a742-4a16-ba99-23ca5db71804"),
                            Category = 11,
                            Comment = "Is downloading enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17375825700888760L),
                            IsLocked = false,
                            Key = "system.isDownloadingEnabled",
                            SortOrder = 0,
                            Value = "true"
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDownloadable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastVisitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("ShareIds")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VisitCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumDiscId")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("BPM")
                        .HasColumnType("integer");

                    b.Property<int>("BitDepth")
                        .HasColumnType("integer");

                    b.Property<int>("BitRate")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<int?>("ChannelCount")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.PrimitiveCollection<string[]>("Genres")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVbr")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lyrics")
                        .HasMaxLength(62000)
                        .HasColumnType("character varying(62000)");

                    b.PrimitiveCollection<string[]>("Moods")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PartTitles")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<double?>("ReplayGain")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReplayPeak")
                        .HasColumnType("double precision");

                    b.Property<int>("SamplingRate")
                        .HasColumnType("integer");

                    b.Property<int>("SongNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TitleNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TitleSort")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("Title");

                    b.HasIndex("AlbumDiscId", "SongNumber")
                        .IsUnique();

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmailNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("HasCommentRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCoverArtRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasDownloadRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasJukeboxRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPlaylistRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPodcastRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSettingsRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasShareRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasStreamRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasUploadRole")
                        .HasColumnType("boolean");

                    b.Property<string>("HatedGenres")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScrobblingEnabled")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastActivityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastFmSessionKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Instant?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PasswordEncrypted")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "AlbumId")
                        .IsUnique();

                    b.ToTable("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("ArtistId");

                    b.HasIndex("UserId", "ArtistId")
                        .IsUnique();

                    b.ToTable("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Discs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.ArtistRelation", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("RelatedArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Artist", "RelatedArtist")
                        .WithMany()
                        .HasForeignKey("RelatedArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("RelatedArtist");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Bookmarks")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Contributors")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Contributors")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Contributors")
                        .HasForeignKey("SongId");

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Library", "Library")
                        .WithMany("ScanHistories")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("PlayQues")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("PlayQues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", null)
                        .WithMany("Playlists")
                        .HasForeignKey("SongId");

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Playlist", "Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Shares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.AlbumDisc", "AlbumDisc")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumDiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlbumDisc");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("UserAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserAlbums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("UserArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserArtists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("UserSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserSongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("Discs");

                    b.Navigation("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Contributors");

                    b.Navigation("RelatedArtists");

                    b.Navigation("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Navigation("ScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Contributors");

                    b.Navigation("PlayQues");

                    b.Navigation("Playlists");

                    b.Navigation("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("PlayQues");

                    b.Navigation("Players");

                    b.Navigation("Playlists");

                    b.Navigation("Shares");

                    b.Navigation("UserAlbums");

                    b.Navigation("UserArtists");

                    b.Navigation("UserSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
