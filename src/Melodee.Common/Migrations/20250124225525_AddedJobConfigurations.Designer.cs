// <auto-generated />
using System;
using Melodee.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melodee.Common.Migrations
{
    [DbContext(typeof(MelodeeDbContext))]
    [Migration("20250124225525_AddedJobConfigurations")]
    partial class AddedJobConfigurations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AlbumStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("AlbumType")
                        .HasColumnType("smallint");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<short?>("DiscCount")
                        .HasColumnType("smallint");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.PrimitiveCollection<string[]>("Genres")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompilation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MetaDataStatus")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("Moods")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<LocalDate?>("OriginalReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<LocalDate>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<double?>("ReplayGain")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReplayPeak")
                        .HasColumnType("double precision");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("ArtistId", "Name")
                        .IsUnique();

                    b.HasIndex("ArtistId", "NameNormalized")
                        .IsUnique();

                    b.HasIndex("ArtistId", "SortName")
                        .IsUnique();

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<short>("DiscNumber")
                        .HasColumnType("smallint");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId", "DiscNumber")
                        .IsUnique();

                    b.ToTable("AlbumDiscs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumCount")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.Property<int>("MetaDataStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<string>("RealName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Roles")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SongCount")
                        .HasColumnType("integer");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("LibraryId");

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameNormalized");

                    b.HasIndex("SortName");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.ArtistRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<int>("ArtistRelationType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("RelatedArtistId")
                        .HasColumnType("integer");

                    b.Property<Instant?>("RelationEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("RelationStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("RelatedArtistId");

                    b.HasIndex("ArtistId", "RelatedArtistId")
                        .IsUnique();

                    b.ToTable("ArtistRelation");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<string>("ContributorName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ContributorType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MetaTagIdentifier")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SubRole")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("ArtistId", "MetaTagIdentifier", "AlbumId")
                        .IsUnique();

                    b.HasIndex("ContributorName", "MetaTagIdentifier", "AlbumId")
                        .IsUnique();

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("ArtistCount")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastScanAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("SongCount")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Libraries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("a6cb2056-54e5-49e6-9744-a447fafbb0dd"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            Description = "Files in this directory are scanned and Album information is gathered via processing.",
                            IsLocked = false,
                            Name = "Inbound",
                            Path = "/storage/inbound/",
                            SortOrder = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("dc08a5e0-11c3-4701-886e-f6f2a1dc84a6"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            Description = "The staging directory to place processed files into (Inbound -> Staging -> Library).",
                            IsLocked = false,
                            Name = "Staging",
                            Path = "/storage/staging/",
                            SortOrder = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("847f6687-ff9b-4762-ad40-3a4d42e80bc2"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            Description = "The library directory to place processed, reviewed and ready to use music files into.",
                            IsLocked = false,
                            Name = "Storage",
                            Path = "/storage/library/",
                            SortOrder = 0,
                            Type = 3
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = new Guid("541c3fc7-bb51-4228-ae64-dfdd7af87de4"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            Description = "Library where user images are stored.",
                            IsLocked = false,
                            Name = "User Images",
                            Path = "/storage/images/users/",
                            SortOrder = 0,
                            Type = 4
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<int?>("ForAlbumId")
                        .HasColumnType("integer");

                    b.Property<int?>("ForArtistId")
                        .HasColumnType("integer");

                    b.Property<int>("FoundAlbumsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundArtistsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundSongsCount")
                        .HasColumnType("integer");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsCurrentSong")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayQueId")
                        .HasColumnType("integer");

                    b.Property<double>("Position")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayQues");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Hostname")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxBitRate")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("ScrobbleEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("TranscodingId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "Client", "UserAgent");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedUserIds")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasCustomImage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.HasKey("SongId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId", "PlaylistId")
                        .IsUnique();

                    b.ToTable("PlaylistSong");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.RadioStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("HomePageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StreamUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.ToTable("RadioStations");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ByUserAgent")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("ByUserId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FoundAlbumsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundArtistsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundOtherItems")
                        .HasColumnType("integer");

                    b.Property<int>("FoundSongsCount")
                        .HasColumnType("integer");

                    b.Property<double>("SearchDurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("SearchQuery")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("SearchHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Category");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("ed525003-b6a9-476f-9b52-bc07746bdaf4"),
                            Comment = "Add a default filter to show only albums with this or less number of songs.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "filtering.lessThanSongCount",
                            SortOrder = 0,
                            Value = "3"
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("5f469c98-dff6-4a59-ae33-02da1a874a97"),
                            Comment = "Add a default filter to show only albums with this or less duration.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "filtering.lessThanDuration",
                            SortOrder = 0,
                            Value = "720000"
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("1e4cdefb-4191-42e6-8d59-27d95fdf6161"),
                            Comment = "Maximum number of albums to scan when processing inbound directory.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.stagingDirectoryScanLimit",
                            SortOrder = 0,
                            Value = "250"
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = new Guid("735f0d3e-ad1d-452d-b364-aadfde625b2a"),
                            Comment = "Default page size when view including pagination.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "defaults.pagesize",
                            SortOrder = 0,
                            Value = "100"
                        },
                        new
                        {
                            Id = 6,
                            ApiKey = new Guid("da568a5b-ef37-490d-b039-8f4ce79e576c"),
                            Comment = "Amount of time to display a Toast then auto-close (in milliseconds.)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "userinterface.toastAutoCloseTime",
                            SortOrder = 0,
                            Value = "2000"
                        },
                        new
                        {
                            Id = 300,
                            ApiKey = new Guid("bbeb95e9-0d06-4171-8816-54c832cba8ec"),
                            Category = 3,
                            Comment = "Short Format to use when displaying full dates.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayFormatShort",
                            SortOrder = 0,
                            Value = "yyyyMMdd HH\\:mm"
                        },
                        new
                        {
                            Id = 301,
                            ApiKey = new Guid("f1472dbe-43c0-4ae8-9754-6eef01f667f2"),
                            Category = 3,
                            Comment = "Format to use when displaying activity related dates (e.g., processing messages)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayActivityFormat",
                            SortOrder = 0,
                            Value = "hh\\:mm\\:ss\\.ffff"
                        },
                        new
                        {
                            Id = 9,
                            ApiKey = new Guid("24bdcd1e-e266-4ba2-9723-eb01482ce486"),
                            Comment = "List of ignored articles when scanning media (pipe delimited).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.ignoredArticles",
                            SortOrder = 0,
                            Value = "THE|EL|LA|LOS|LAS|LE|LES|OS|AS|O|A"
                        },
                        new
                        {
                            Id = 500,
                            ApiKey = new Guid("f018c272-05c3-4ac5-896f-877826edcc4b"),
                            Category = 5,
                            Comment = "Is Magic processing enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "magic.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 501,
                            ApiKey = new Guid("9ea1c43f-a48d-425e-8ce2-482a36a727ac"),
                            Category = 5,
                            Comment = "Renumber songs when doing magic processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "magic.doRenumberSongs",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 502,
                            ApiKey = new Guid("56949456-5fbc-4951-9212-989f968390e9"),
                            Category = 5,
                            Comment = "Remove featured artists from song artist when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongArtist",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 503,
                            ApiKey = new Guid("dfcca85b-a98f-4dd0-a292-b75e3e13329e"),
                            Category = 5,
                            Comment = "Remove featured artists from song title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 504,
                            ApiKey = new Guid("2240e261-c3ad-4087-9d13-3b312947b8ba"),
                            Category = 5,
                            Comment = "Replace song artist separators with standard ID3 separator ('/') when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "magic.doReplaceSongsArtistSeparators",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 505,
                            ApiKey = new Guid("bff2445c-0e2d-4f0d-974c-884ea12486ac"),
                            Category = 5,
                            Comment = "Set the song year to current year if invalid or missing when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "magic.doSetYearToCurrentIfInvalid",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 506,
                            ApiKey = new Guid("57228d55-6efd-44a0-8e69-1cb549be9bf6"),
                            Category = 5,
                            Comment = "Remove unwanted text from album title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "magic.doRemoveUnwantedTextFromAlbumTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 507,
                            ApiKey = new Guid("cc98307a-666e-445d-a54b-9e1bf0051699"),
                            Category = 5,
                            Comment = "Remove unwanted text from song titles when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "magic.doRemoveUnwantedTextFromSongTitles",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 200,
                            ApiKey = new Guid("6ad85993-2cce-4ea3-82f0-9a87524cca1c"),
                            Category = 2,
                            Comment = "Enable Melodee to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "conversion.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 201,
                            ApiKey = new Guid("db2bdfab-78a0-4a82-91cd-bf1f99e7e196"),
                            Category = 2,
                            Comment = "Bitrate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "conversion.bitrate",
                            SortOrder = 0,
                            Value = "384"
                        },
                        new
                        {
                            Id = 202,
                            ApiKey = new Guid("70f40777-fbdd-41ea-84bc-e363e59be13c"),
                            Category = 2,
                            Comment = "Vbr to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "conversion.vbrLevel",
                            SortOrder = 0,
                            Value = "4"
                        },
                        new
                        {
                            Id = 203,
                            ApiKey = new Guid("5c7ae1ce-4328-4c14-b3de-ffaf9ee2b172"),
                            Category = 2,
                            Comment = "Sampling rate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "conversion.samplingRate",
                            SortOrder = 0,
                            Value = "48000"
                        },
                        new
                        {
                            Id = 700,
                            ApiKey = new Guid("a7cf31bc-c8e1-4fdd-94ba-e5aadfefd2b2"),
                            Category = 7,
                            Comment = "Process of CueSheet files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "plugin.cueSheet.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 701,
                            ApiKey = new Guid("bfcb82bb-7ad3-4929-af08-6d2250efb42a"),
                            Category = 7,
                            Comment = "Process of M3U files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "plugin.m3u.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 702,
                            ApiKey = new Guid("32126160-4d33-4df1-8b16-04d88c971977"),
                            Category = 7,
                            Comment = "Process of NFO files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "plugin.nfo.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 703,
                            ApiKey = new Guid("5a4107b4-1fe0-463e-b709-4f00e8b5798c"),
                            Category = 7,
                            Comment = "Process of Simple File Verification (SFV) files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "plugin.simpleFileVerification.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 704,
                            ApiKey = new Guid("711dd1c3-d5e8-4bf9-86bf-c1ce51746166"),
                            Category = 7,
                            Comment = "If true then all comments will be removed from media files.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.doDeleteComments",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 26,
                            ApiKey = new Guid("e1e9aa27-c73b-4c75-8478-34292464176b"),
                            Comment = "Fragments of artist names to replace (JSON Dictionary).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.artistNameReplacements",
                            SortOrder = 0,
                            Value = "{'AC/DC': ['AC; DC', 'AC;DC', 'AC/ DC', 'AC DC'] , 'Love/Hate': ['Love; Hate', 'Love;Hate', 'Love/ Hate', 'Love Hate'] }"
                        },
                        new
                        {
                            Id = 27,
                            ApiKey = new Guid("7e6e6f5f-e3c9-4be6-8141-3d3e22b76ea9"),
                            Comment = "If OrigAlbumYear [TOR, TORY, TDOR] value is invalid use current year.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.doUseCurrentYearAsDefaultOrigAlbumYearValue",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 28,
                            ApiKey = new Guid("4a07ca17-faaa-4630-976f-a8c6025119d8"),
                            Comment = "Delete original files when processing. When false a copy if made, else original is deleted after processed.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.doDeleteOriginal",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 29,
                            ApiKey = new Guid("1f2d01ce-2943-40e9-8930-d9c2cc2aa1d3"),
                            Comment = "Extension to add to file when converted, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.convertedExtension",
                            SortOrder = 0,
                            Value = "_converted"
                        },
                        new
                        {
                            Id = 30,
                            ApiKey = new Guid("b15f69bb-3dcb-4a0f-b01c-3b5c1f6c0612"),
                            Comment = "Extension to add to file when processed, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.processedExtension",
                            SortOrder = 0,
                            Value = "_processed"
                        },
                        new
                        {
                            Id = 31,
                            ApiKey = new Guid("95808688-ba3e-4db5-9855-4ad45ff632b8"),
                            Comment = "Extension to add to file to indicate other files in the same category where processed and this file was skipped during processing, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.skippedExtension",
                            SortOrder = 0,
                            Value = "_skipped"
                        },
                        new
                        {
                            Id = 32,
                            ApiKey = new Guid("20fc037b-77d2-4855-9aac-d1d4ae758f8b"),
                            Comment = "When processing over write any existing Melodee data files, otherwise skip and leave in place.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.doOverrideExistingMelodeeDataFiles",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 34,
                            ApiKey = new Guid("7a667055-a24a-4b50-872e-7d6ac7a20e37"),
                            Comment = "The maximum number of files to process, set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.maximumProcessingCount",
                            SortOrder = 0,
                            Value = "0"
                        },
                        new
                        {
                            Id = 35,
                            ApiKey = new Guid("366f7c0a-e1c7-4aa7-b243-cd0ebed9bf61"),
                            Comment = "Maximum allowed length of album directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.maximumAlbumDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 36,
                            ApiKey = new Guid("ad7f0901-478c-4441-a27f-32fcd8456ea4"),
                            Comment = "Maximum allowed length of artist directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.maximumArtistDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 37,
                            ApiKey = new Guid("9b7102eb-76c7-4f9e-85e3-aea30ccbfdaa"),
                            Comment = "Fragments to remove from album titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.albumTitleRemovals",
                            SortOrder = 0,
                            Value = "['^', '~', '#']"
                        },
                        new
                        {
                            Id = 38,
                            ApiKey = new Guid("0b053851-718b-4bdb-96aa-4c9fce45e8e2"),
                            Comment = "Fragments to remove from song titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.songTitleRemovals",
                            SortOrder = 0,
                            Value = "[';', '(Remaster)', 'Remaster']"
                        },
                        new
                        {
                            Id = 39,
                            ApiKey = new Guid("6bc60e38-a63b-425f-9567-834cda583fc2"),
                            Comment = "Continue processing if an error is encountered.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.doContinueOnDirectoryProcessingErrors",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 41,
                            ApiKey = new Guid("a0e29206-a090-4828-8826-029914e7695b"),
                            Comment = "Is scripting enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "scripting.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 42,
                            ApiKey = new Guid("34404cff-2772-4a45-8491-3053c6736ac5"),
                            Comment = "Script to run before processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "scripting.preDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 43,
                            ApiKey = new Guid("cce67e17-de01-41fb-a40d-95d2466671d8"),
                            Comment = "Script to run after processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "scripting.postDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 44,
                            ApiKey = new Guid("fc081957-3a7a-4c0e-aea0-b7e9193f0ae1"),
                            Category = 13,
                            Comment = "The maximum value a media number can have for an album. The length of this is used for formatting song names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "validation.maximumMediaNumber",
                            SortOrder = 0,
                            Value = "999"
                        },
                        new
                        {
                            Id = 45,
                            ApiKey = new Guid("8c811fac-e40a-413a-9568-1a9af6971afc"),
                            Comment = "Don't create performer contributors for these performer names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.ignoredPerformers",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 46,
                            ApiKey = new Guid("87244725-d23a-43ea-82e9-b95bae1d8c4b"),
                            Comment = "Don't create production contributors for these production names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.ignoredProduction",
                            SortOrder = 0,
                            Value = "['www.t.me;pmedia_music']"
                        },
                        new
                        {
                            Id = 47,
                            ApiKey = new Guid("b25cce8a-8fc1-4df3-b23f-52230363cdc1"),
                            Comment = "Don't create publisher contributors for these artist names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.ignoredPublishers",
                            SortOrder = 0,
                            Value = "['P.M.E.D.I.A','PMEDIA','PMEDIA GROUP']"
                        },
                        new
                        {
                            Id = 48,
                            ApiKey = new Guid("2898e485-f8c7-4f4c-95bb-6724dca27fa6"),
                            Comment = "Prefix to apply to directories to skip processing. This is also used then a directory throws an error attempting to be processed, to prevent future processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.skippedDirectoryPrefix",
                            SortOrder = 0,
                            Value = "_skip_ "
                        },
                        new
                        {
                            Id = 49,
                            ApiKey = new Guid("0ea1e6e9-81fb-4b0a-a2f9-4e5ec14daa8a"),
                            Comment = "Private key used to encrypt/decrypt passwords for Subsonic authentication. Use https://generate-random.org/encryption-key-generator?count=1&bytes=32&cipher=aes-256-cbc&string=&password= to generate a new key.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "encryption.privateKey",
                            SortOrder = 0,
                            Value = "H+Kiik6VMKfTD2MesF1GoMjczTrD5RhuKckJ5+/UQWOdWajGcsEC3yEnlJ5eoy8Y"
                        },
                        new
                        {
                            Id = 50,
                            ApiKey = new Guid("756d4195-e109-4dd6-a5a6-e624a65921de"),
                            Comment = "Prefix to apply to indicate an album directory is a duplicate album for an artist. If left blank the default of '__duplicate_' will be used.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "processing.duplicateAlbumPrefix",
                            SortOrder = 0,
                            Value = "__duplicate_ "
                        },
                        new
                        {
                            Id = 1300,
                            ApiKey = new Guid("71e0f06d-156c-400b-9f3b-f2a405bfd264"),
                            Category = 13,
                            Comment = "The maximum value a song number can have for an album. The length of this is used for formatting song names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "validation.maximumSongNumber",
                            SortOrder = 0,
                            Value = "9999"
                        },
                        new
                        {
                            Id = 1301,
                            ApiKey = new Guid("82d50295-1096-4bc3-8ea9-52a34c25b802"),
                            Category = 13,
                            Comment = "Minimum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "validation.minimumAlbumYear",
                            SortOrder = 0,
                            Value = "1860"
                        },
                        new
                        {
                            Id = 1302,
                            ApiKey = new Guid("5404083c-0187-45d6-8b86-4a0f0c22e7e2"),
                            Category = 13,
                            Comment = "Maximum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "validation.maximumAlbumYear",
                            SortOrder = 0,
                            Value = "2150"
                        },
                        new
                        {
                            Id = 100,
                            ApiKey = new Guid("ee406090-0bd6-4256-8f82-dcaff4f00805"),
                            Category = 1,
                            Comment = "OpenSubsonic server supported Subsonic API version.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonic.serverSupportedVersion",
                            SortOrder = 0,
                            Value = "1.16.1"
                        },
                        new
                        {
                            Id = 101,
                            ApiKey = new Guid("1d3f2930-4d61-4acc-b6aa-1fb288aed4a3"),
                            Category = 1,
                            Comment = "OpenSubsonic server name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.type",
                            SortOrder = 0,
                            Value = "Melodee"
                        },
                        new
                        {
                            Id = 102,
                            ApiKey = new Guid("af441884-8509-4f90-a324-341e17cfa57f"),
                            Category = 1,
                            Comment = "OpenSubsonic server actual version. [Ex: 1.2.3 (beta)]",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.version",
                            SortOrder = 0,
                            Value = "1.0.1 (beta)"
                        },
                        new
                        {
                            Id = 103,
                            ApiKey = new Guid("661f1f84-48b4-4744-9ac8-19f85c763e2f"),
                            Category = 1,
                            Comment = "OpenSubsonic email to use in License responses.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServerLicenseEmail",
                            SortOrder = 0,
                            Value = "noreply@localhost.lan"
                        },
                        new
                        {
                            Id = 104,
                            ApiKey = new Guid("810e9e26-2343-440c-95f8-cc887da34e55"),
                            Category = 1,
                            Comment = "Limit the number of artists to include in an indexes request, set to zero for 32k per index (really not recommended with tens of thousands of artists and mobile clients timeout downloading indexes, a user can find an artist by search)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServer.index.artistLimit",
                            SortOrder = 0,
                            Value = "1000"
                        },
                        new
                        {
                            Id = 53,
                            ApiKey = new Guid("e92a65a6-0caa-4bc3-a3b8-fa83a45c3856"),
                            Comment = "Processing batching size. Allowed range is between [250] and [1000]. ",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "defaults.batchSize",
                            SortOrder = 0,
                            Value = "250"
                        },
                        new
                        {
                            Id = 902,
                            ApiKey = new Guid("3a52a6f6-7ee4-48e1-b53a-feac372d898a"),
                            Category = 9,
                            Comment = "User agent to send with Search engine requests.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.userAgent",
                            SortOrder = 0,
                            Value = "Mozilla/5.0 (X11; Linux x86_64; rv:131.0) Gecko/20100101 Firefox/131.0"
                        },
                        new
                        {
                            Id = 903,
                            ApiKey = new Guid("c9defb16-82b4-406e-a308-6d9c944e16ae"),
                            Category = 9,
                            Comment = "Default page size when performing a search engine search.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.defaultPageSize",
                            SortOrder = 0,
                            Value = "20"
                        },
                        new
                        {
                            Id = 904,
                            ApiKey = new Guid("a592ba1f-fbfd-4f2e-ac42-12f541b75610"),
                            Category = 9,
                            Comment = "Is MusicBrainz search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 905,
                            ApiKey = new Guid("6765ec1b-8df7-4950-930c-a5cdaa25367c"),
                            Category = 9,
                            Comment = "Storage path to hold MusicBrainz downloaded files and SQLite db.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.storagePath",
                            SortOrder = 0,
                            Value = "/melodee_test/search-engine-storage/musicbrainz/"
                        },
                        new
                        {
                            Id = 906,
                            ApiKey = new Guid("bc4dab65-dbad-4d2f-ab67-46899a15a17c"),
                            Category = 9,
                            Comment = "Maximum number of batches import from MusicBrainz downloaded db dump (this setting is usually used during debugging), set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importMaximumToProcess",
                            SortOrder = 0,
                            Value = "0"
                        },
                        new
                        {
                            Id = 907,
                            ApiKey = new Guid("f9020338-5950-4ee5-a7df-a69d1573d520"),
                            Category = 9,
                            Comment = "Number of records to import from MusicBrainz downloaded db dump before commiting to local SQLite database.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importBatchSize",
                            SortOrder = 0,
                            Value = "50000"
                        },
                        new
                        {
                            Id = 908,
                            ApiKey = new Guid("3bd01d37-665d-4d00-83ca-3cb17a33c6b5"),
                            Category = 9,
                            Comment = "Timestamp of when last MusicBrainz import was successful.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.musicbrainz.importLastImportTimestamp",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 910,
                            ApiKey = new Guid("1084d8a4-b950-42e4-a893-6b1a4b5892d4"),
                            Category = 9,
                            Comment = "Is Spotify search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 911,
                            ApiKey = new Guid("1d477b45-a284-432a-84c4-e707639f0402"),
                            Category = 9,
                            Comment = "ApiKey used used with Spotify. See https://developer.spotify.com/ for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.apiKey",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 912,
                            ApiKey = new Guid("0f488d8a-6357-44d9-8cbb-6fe9f5168f9f"),
                            Category = 9,
                            Comment = "Shared secret used with Spotify. See https://developer.spotify.com/ for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.sharedSecret",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 913,
                            ApiKey = new Guid("5e4efdb1-4821-4482-aff9-1f0ff7c48ac6"),
                            Category = 9,
                            Comment = "Token obtained from Spotify using the ApiKey and the Secret, this json contains expiry information.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.spotify.accessToken",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 914,
                            ApiKey = new Guid("a68add83-2f83-40ab-a589-2fe31e297e61"),
                            Category = 9,
                            Comment = "Is ITunes search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.itunes.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 915,
                            ApiKey = new Guid("b6928003-4734-4d77-94e5-e12dbf5d9006"),
                            Category = 9,
                            Comment = "Is LastFM search engine enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.lastFm.Enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 916,
                            ApiKey = new Guid("e38ccad5-6364-4b96-ae0b-965d441962ea"),
                            Category = 9,
                            Comment = "When performing a search engine search, the maximum allowed page size.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "searchEngine.maximumAllowedPageSize",
                            SortOrder = 0,
                            Value = "1000"
                        },
                        new
                        {
                            Id = 400,
                            ApiKey = new Guid("9db2861d-c891-42ac-aca7-1d50af2f93fc"),
                            Category = 4,
                            Comment = "Include any embedded images from media files into the Melodee data file.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "imaging.doLoadEmbeddedImages",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 401,
                            ApiKey = new Guid("3c4db498-2387-4028-b138-4de9d4b19cc1"),
                            Category = 4,
                            Comment = "Small image size (square image, this is both width and height).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "imaging.smallSize",
                            SortOrder = 0,
                            Value = "300"
                        },
                        new
                        {
                            Id = 402,
                            ApiKey = new Guid("3d59076a-6fca-4ebf-9627-bf2f7dabf1c4"),
                            Category = 4,
                            Comment = "Medium image size (square image, this is both width and height).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "imaging.mediumSize",
                            SortOrder = 0,
                            Value = "600"
                        },
                        new
                        {
                            Id = 403,
                            ApiKey = new Guid("c89ffa3d-d06a-420e-aa9b-5811dcff528c"),
                            Category = 4,
                            Comment = "Large image size (square image, this is both width and height), if larger than will be resized to this image, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "imaging.largeSize",
                            SortOrder = 0,
                            Value = "1600"
                        },
                        new
                        {
                            Id = 404,
                            ApiKey = new Guid("6dc18c39-65eb-4800-a541-0c5f117c216f"),
                            Category = 4,
                            Comment = "Maximum allowed number of images for an album, this includes all image types (Front, Rear, etc.), set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "imaging.maximumNumberOfAlbumImages",
                            SortOrder = 0,
                            Value = "25"
                        },
                        new
                        {
                            Id = 405,
                            ApiKey = new Guid("5272db4d-9ccb-4f6a-8ca0-639c52326196"),
                            Category = 4,
                            Comment = "Maximum allowed number of images for an artist, set to zero for unlimited.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "imaging.maximumNumberOfArtistImages",
                            SortOrder = 0,
                            Value = "25"
                        },
                        new
                        {
                            Id = 406,
                            ApiKey = new Guid("796f9566-ae17-4837-828e-c0bf41cf8148"),
                            Category = 4,
                            Comment = "Images under this size are considered invalid, set to zero to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "imaging.minimumImageSize",
                            SortOrder = 0,
                            Value = "300"
                        },
                        new
                        {
                            Id = 1200,
                            ApiKey = new Guid("86f4bc26-13ef-4a31-84f2-9cebac35681f"),
                            Category = 12,
                            Comment = "Default format for transcoding.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "transcoding.default",
                            SortOrder = 0,
                            Value = "raw"
                        },
                        new
                        {
                            Id = 1201,
                            ApiKey = new Guid("b4b62ea9-e355-4769-ad99-156e5d68a0e1"),
                            Category = 12,
                            Comment = "Default command to transcode MP3 for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "transcoding.command.mp3",
                            SortOrder = 0,
                            Value = "{ 'format': 'Mp3', 'bitrate: 192, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -f mp3 -' }"
                        },
                        new
                        {
                            Id = 1202,
                            ApiKey = new Guid("0b2a5a5c-ce23-4257-bbc6-1041530549e7"),
                            Category = 12,
                            Comment = "Default command to transcode using libopus for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "transcoding.command.opus",
                            SortOrder = 0,
                            Value = "{ 'format': 'Opus', 'bitrate: 128, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -c:a libopus -f opus -' }"
                        },
                        new
                        {
                            Id = 1203,
                            ApiKey = new Guid("3c80dfa8-5849-4d9d-a346-d98f0772961a"),
                            Category = 12,
                            Comment = "Default command to transcode to aac for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "transcoding.command.aac",
                            SortOrder = 0,
                            Value = "{ 'format': 'Aac', 'bitrate: 256, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -c:a aac -f adts -' }"
                        },
                        new
                        {
                            Id = 1000,
                            ApiKey = new Guid("26e38a67-5f4c-4a10-8af9-c73c4b6dd373"),
                            Category = 10,
                            Comment = "Is scrobbling enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "scrobbling.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 1001,
                            ApiKey = new Guid("a665face-ed71-4899-9c9f-93f2712816dc"),
                            Category = 10,
                            Comment = "Is scrobbling to Last.fm enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.Enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 1002,
                            ApiKey = new Guid("19a1699a-7768-4783-848c-8649ede29665"),
                            Category = 10,
                            Comment = "ApiKey used used with last FM. See https://www.last.fm/api/authentication for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.apiKey",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 1003,
                            ApiKey = new Guid("037665c9-7369-4704-995a-15d5b20e7f98"),
                            Category = 10,
                            Comment = "Shared secret used with last FM. See https://www.last.fm/api/authentication for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.sharedSecret",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 1100,
                            ApiKey = new Guid("0f22e39e-67c8-47e9-9172-6f7949f34028"),
                            Category = 11,
                            Comment = "Base URL for Melodee to use when building shareable links and image urls (e.g., 'https://server.domain.com:8080', 'http://server.domain.com').",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "system.baseUrl",
                            SortOrder = 0,
                            Value = "** REQUIRED: THIS MUST BE EDITED **"
                        },
                        new
                        {
                            Id = 1101,
                            ApiKey = new Guid("e0985c65-d389-42ea-ba42-1a6cc0ff0b95"),
                            Category = 11,
                            Comment = "Is downloading enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "system.isDownloadingEnabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 1400,
                            ApiKey = new Guid("faf5d8d1-8e48-4d16-8bb1-e3fb88e58427"),
                            Category = 14,
                            Comment = "Cron expression to run the artist housekeeping job, set empty to disable. Default of '0 0 0/1 1/1 * ? *' will run every hour. See http://www.cronmaker.com",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "jobs.artistHousekeeping.cronExpression",
                            SortOrder = 0,
                            Value = "0 0 0/1 1/1 * ? *"
                        },
                        new
                        {
                            Id = 1401,
                            ApiKey = new Guid("47c341a0-8751-416b-b990-ca1902fedaa7"),
                            Category = 14,
                            Comment = "Cron expression to run the library process job, set empty to disable. Default of '0 0/10 * 1/1 * ? *' Every 10 minutes. See http://www.cronmaker.com",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "jobs.libraryProcess.cronExpression",
                            SortOrder = 0,
                            Value = "0 0/10 * 1/1 * ? *"
                        },
                        new
                        {
                            Id = 1402,
                            ApiKey = new Guid("06681855-c92f-4083-a2d8-17375ea7fa72"),
                            Category = 14,
                            Comment = "Cron expression to run the library scan job, set empty to disable. Default of '0 0 12 1/1 * ? *' will run every day at 00:00. See http://www.cronmaker.com",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "jobs.libraryInsert.cronExpression",
                            SortOrder = 0,
                            Value = "0 0 12 1/1 * ? *"
                        },
                        new
                        {
                            Id = 1403,
                            ApiKey = new Guid("2c51f74f-0530-444d-a137-d7878acaf66c"),
                            Category = 14,
                            Comment = "Cron expression to run the musicbrainz database update job, set empty to disable. Default of '0 0 12 1 1/1 ? * ' will run first day of the month. See http://www.cronmaker.com",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17377593245196778L),
                            IsLocked = false,
                            Key = "jobs.musicbrainzUpdateDatabase.cronExpression",
                            SortOrder = 0,
                            Value = "0 0 12 1 1/1 ? * "
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDownloadable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastVisitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("ShareIds")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VisitCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumDiscId")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("BPM")
                        .HasColumnType("integer");

                    b.Property<int>("BitDepth")
                        .HasColumnType("integer");

                    b.Property<int>("BitRate")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<int?>("ChannelCount")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.PrimitiveCollection<string[]>("Genres")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVbr")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lyrics")
                        .HasMaxLength(62000)
                        .HasColumnType("character varying(62000)");

                    b.PrimitiveCollection<string[]>("Moods")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<Guid?>("MusicBrainzId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PartTitles")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<double?>("ReplayGain")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReplayPeak")
                        .HasColumnType("double precision");

                    b.Property<int>("SamplingRate")
                        .HasColumnType("integer");

                    b.Property<int>("SongNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TitleNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TitleSort")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("WikiDataId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("MusicBrainzId")
                        .IsUnique();

                    b.HasIndex("Title");

                    b.HasIndex("AlbumDiscId", "SongNumber")
                        .IsUnique();

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmailNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("HasCommentRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCoverArtRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasDownloadRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasJukeboxRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPlaylistRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPodcastRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSettingsRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasShareRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasStreamRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasUploadRole")
                        .HasColumnType("boolean");

                    b.Property<string>("HatedGenres")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScrobblingEnabled")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastActivityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastFmSessionKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Instant?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PasswordEncrypted")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "AlbumId")
                        .IsUnique();

                    b.ToTable("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("ArtistId");

                    b.HasIndex("UserId", "ArtistId")
                        .IsUnique();

                    b.ToTable("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsHated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Discs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.ArtistRelation", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("RelatedArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Artist", "RelatedArtist")
                        .WithMany()
                        .HasForeignKey("RelatedArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("RelatedArtist");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Bookmarks")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Contributors")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Contributors")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Contributors")
                        .HasForeignKey("SongId");

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Library", "Library")
                        .WithMany("ScanHistories")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("PlayQues")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("PlayQues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", null)
                        .WithMany("Playlists")
                        .HasForeignKey("SongId");

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Playlist", "Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Shares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.AlbumDisc", "AlbumDisc")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumDiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlbumDisc");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("UserAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserAlbums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("UserArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserArtists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("UserSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserSongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("Discs");

                    b.Navigation("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Contributors");

                    b.Navigation("RelatedArtists");

                    b.Navigation("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Navigation("ScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Contributors");

                    b.Navigation("PlayQues");

                    b.Navigation("Playlists");

                    b.Navigation("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("PlayQues");

                    b.Navigation("Players");

                    b.Navigation("Playlists");

                    b.Navigation("Shares");

                    b.Navigation("UserAlbums");

                    b.Navigation("UserArtists");

                    b.Navigation("UserSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
