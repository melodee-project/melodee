// <auto-generated />
using System;
using Melodee.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melodee.Common.Migrations
{
    [DbContext(typeof(MelodeeDbContext))]
    [Migration("20241122222905_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AlbumStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("AlbumType")
                        .HasColumnType("smallint");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<short?>("DiscCount")
                        .HasColumnType("smallint");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string[]>("Genres")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<bool>("IsCompilation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.Property<long>("MediaUniqueId")
                        .HasColumnType("bigint");

                    b.Property<int>("MetaDataStatus")
                        .HasColumnType("integer");

                    b.Property<string[]>("Moods")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<string>("MusicBrainzId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<LocalDate?>("OriginalReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<LocalDate>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<double?>("ReplayGain")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReplayPeak")
                        .HasColumnType("double precision");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("LibraryId");

                    b.HasIndex("ArtistId", "Name")
                        .IsUnique();

                    b.HasIndex("ArtistId", "NameNormalized")
                        .IsUnique();

                    b.HasIndex("ArtistId", "SortName")
                        .IsUnique();

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<short>("DiscNumber")
                        .HasColumnType("smallint");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId", "DiscNumber")
                        .IsUnique();

                    b.ToTable("AlbumDiscs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumCount")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MediaUniqueId")
                        .HasColumnType("bigint");

                    b.Property<int>("MetaDataStatus")
                        .HasColumnType("integer");

                    b.Property<string>("MusicBrainzId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<string>("RealName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Roles")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SongCount")
                        .HasColumnType("integer");

                    b.Property<string>("SortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameNormalized");

                    b.HasIndex("SortName");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MusicBrainzId")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<string>("ContributorName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ContributorType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MetaTagIdentifier")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SubRole")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastScanAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Libraries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("ec6d4ede-0576-4286-9dd9-4d1022fe5134"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            Description = "Files in this directory are scanned and Album information is gathered via processing.",
                            IsLocked = false,
                            Name = "Inbound",
                            Path = "/storage/inbound",
                            SortOrder = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("83351664-b3a7-4045-99c4-0826a5b5ad55"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            Description = "The staging directory to place processed files into (Inbound -> Staging -> Library).",
                            IsLocked = false,
                            Name = "Staging",
                            Path = "/storage/staging",
                            SortOrder = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("77b19389-201b-4c0f-aa53-960b7c974201"),
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            Description = "The library directory to place processed, reviewed and ready to use music files into.",
                            IsLocked = false,
                            Name = "Library",
                            Path = "/storage/library",
                            SortOrder = 0,
                            Type = 3
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<int?>("ForAlbumId")
                        .HasColumnType("integer");

                    b.Property<int?>("ForArtistId")
                        .HasColumnType("integer");

                    b.Property<int>("FoundAlbumsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundArtistsCount")
                        .HasColumnType("integer");

                    b.Property<int>("FoundSongsCount")
                        .HasColumnType("integer");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsCurrentSong")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<double>("Position")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayQues");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Hostname")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxBitRate")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("ScrobbleEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("TranscodingId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "Client", "UserAgent");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedUserIds")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<short?>("SongCount")
                        .HasColumnType("smallint");

                    b.Property<int?>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("SongApiKey")
                        .HasColumnType("uuid");

                    b.HasKey("SongId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId", "PlaylistId")
                        .IsUnique();

                    b.ToTable("PlaylistSong");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.RadioStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("HomePageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StreamUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.ToTable("RadioStations");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int?>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Category");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = new Guid("f6810cbb-2cfc-419e-8fe8-3b3a4e4fc443"),
                            Comment = "Add a default filter to show only albums with this or less number of songs.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "filtering.lessThanSongCount",
                            SortOrder = 0,
                            Value = "3"
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = new Guid("825fc394-c382-4666-927b-ac4959a387ec"),
                            Comment = "Add a default filter to show only albums with this or less duration.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "filtering.lessThanDuration",
                            SortOrder = 0,
                            Value = "720000"
                        },
                        new
                        {
                            Id = 3,
                            ApiKey = new Guid("f05f57ec-5cf4-4f39-b55b-bf1de15ab5ec"),
                            Comment = "Maximum number of albums to scan when processing inbound directory.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.stagingDirectoryScanLimit",
                            SortOrder = 0,
                            Value = "250"
                        },
                        new
                        {
                            Id = 4,
                            ApiKey = new Guid("bebab888-be80-4e6e-90ad-7f82cad4eb8a"),
                            Comment = "Default page size when view including pagination.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "defaults.pagesize",
                            SortOrder = 0,
                            Value = "100"
                        },
                        new
                        {
                            Id = 6,
                            ApiKey = new Guid("53e6b054-1aea-4375-b2ff-a1c6366a91d7"),
                            Comment = "Amount of time to display a Toast then auto-close (in milliseconds.)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "userinterface.toastAutoCloseTime",
                            SortOrder = 0,
                            Value = "2000"
                        },
                        new
                        {
                            Id = 7,
                            ApiKey = new Guid("1fa55611-9c8a-4a99-a093-03d366967812"),
                            Category = 3,
                            Comment = "Short Format to use when displaying full dates.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayFormatShort",
                            SortOrder = 0,
                            Value = "yyyyMMdd HH\\:mm"
                        },
                        new
                        {
                            Id = 8,
                            ApiKey = new Guid("d33bf3ac-3170-4e3c-bcbc-adeae6fd33d4"),
                            Category = 3,
                            Comment = "Format to use when displaying activity related dates (e.g. processing messages)",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "formatting.dateTimeDisplayActivityFormat",
                            SortOrder = 0,
                            Value = "hh\\:mm\\:ss\\.ffff"
                        },
                        new
                        {
                            Id = 9,
                            ApiKey = new Guid("fc947624-8ec3-40ec-99e5-75524f8a632e"),
                            Comment = "List of ignored articles when scanning media (pipe delimited).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.ignoredArticles",
                            SortOrder = 0,
                            Value = "THE|EL|LA|LOS|LAS|LE|LES|OS|AS|O|A"
                        },
                        new
                        {
                            Id = 10,
                            ApiKey = new Guid("9d899846-3959-4c25-8f05-f35f55b78b79"),
                            Category = 5,
                            Comment = "Is Magic processing enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "magic.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 11,
                            ApiKey = new Guid("f573ef73-b1a3-4907-89f4-44a6a14795bd"),
                            Category = 5,
                            Comment = "Renumber songs when doing magic processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "magic.doRenumberSongs",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 12,
                            ApiKey = new Guid("2aa10df6-d5fe-4076-8bdc-7839b9b74a50"),
                            Category = 5,
                            Comment = "Remove featured artists from song artist when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongArtist",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 13,
                            ApiKey = new Guid("60ae3ce5-ebba-4a01-9a4d-aa7dacc175a5"),
                            Category = 5,
                            Comment = "Remove featured artists from song title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "magic.doRemoveFeaturingArtistFromSongTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 14,
                            ApiKey = new Guid("2df07b85-f5e6-4118-b8cb-4fddc90b1b82"),
                            Category = 5,
                            Comment = "Replace song artist separators with standard ID3 separator ('/') when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "magic.doReplaceSongsArtistSeparators",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 15,
                            ApiKey = new Guid("b08f6aeb-e1f2-4712-9197-1bbe20147aca"),
                            Category = 5,
                            Comment = "Set the song year to current year if invalid or missing when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "magic.doSetYearToCurrentIfInvalid",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 16,
                            ApiKey = new Guid("515d27f9-dfe1-446c-bc2c-d5eb2b30dba6"),
                            Category = 5,
                            Comment = "Remove unwanted text from album title when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "magic.doRemoveUnwantedTextFromAlbumTitle",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 17,
                            ApiKey = new Guid("17fad911-9e73-4a1d-99ff-f883d8b4cc28"),
                            Category = 5,
                            Comment = "Remove unwanted text from song titles when doing magic.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "magic.doRemoveUnwantedTextFromSongTitles",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 18,
                            ApiKey = new Guid("456ce204-b4e9-460d-bfd5-d3ce7666fdb1"),
                            Category = 2,
                            Comment = "Enable Melodee to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "conversion.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 19,
                            ApiKey = new Guid("13153b6c-ec52-4523-8cac-33c377140522"),
                            Category = 2,
                            Comment = "Bitrate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "conversion.bitrate",
                            SortOrder = 0,
                            Value = "384"
                        },
                        new
                        {
                            Id = 20,
                            ApiKey = new Guid("d9b31dd1-88ef-4ccd-bf15-0fa96d08270e"),
                            Category = 2,
                            Comment = "Vbr to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "conversion.vbrLevel",
                            SortOrder = 0,
                            Value = "4"
                        },
                        new
                        {
                            Id = 21,
                            ApiKey = new Guid("3c4487c8-d415-49ee-8394-596a4f7309f0"),
                            Category = 2,
                            Comment = "Sampling rate to convert non-mp3 media files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "conversion.samplingRate",
                            SortOrder = 0,
                            Value = "48000"
                        },
                        new
                        {
                            Id = 22,
                            ApiKey = new Guid("653b0306-6f21-44ad-8aa1-e5f6a82be653"),
                            Category = 7,
                            Comment = "Process of CueSheet files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "plugin.cueSheet.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 23,
                            ApiKey = new Guid("965defc4-e8d7-407b-b6ba-c60bf80d3ae4"),
                            Category = 7,
                            Comment = "Process of M3U files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "plugin.m3u.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 24,
                            ApiKey = new Guid("2072ce0c-787c-4e82-bc81-27ec9a8f724e"),
                            Category = 7,
                            Comment = "Process of NFO files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "plugin.nfo.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 25,
                            ApiKey = new Guid("32430066-cf29-4ed0-9d03-d8d28be671c7"),
                            Category = 7,
                            Comment = "Process of Simple File Verification (SFV) files during processing.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "plugin.simpleFileVerification.enabled",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 26,
                            ApiKey = new Guid("bc73668f-4346-45a3-9437-ff593663aeed"),
                            Comment = "Fragments of artist names to replace (JSON Dictionary).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.artistNameReplacements",
                            SortOrder = 0,
                            Value = "{'AC/DC': ['AC; DC', 'AC;DC', 'AC/ DC', 'AC DC'] , 'Love/Hate': ['Love; Hate', 'Love;Hate', 'Love/ Hate', 'Love Hate'] }"
                        },
                        new
                        {
                            Id = 27,
                            ApiKey = new Guid("f1e30f44-952c-4239-a500-59e2cf740040"),
                            Comment = "If OrigAlbumYear [TOR, TORY, TDOR] value is invalid use current year.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.doUseCurrentYearAsDefaultOrigAlbumYearValue",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 28,
                            ApiKey = new Guid("5da78ef3-f8d9-44e7-9bd9-ab451730917e"),
                            Comment = "Delete original files when processing. When false a copy if made, else original is deleted after processed.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.doDeleteOriginal",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 29,
                            ApiKey = new Guid("d905d72b-eb8f-486e-b292-37070444b400"),
                            Comment = "Extension to add to file when converted, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.convertedExtension",
                            SortOrder = 0,
                            Value = "_converted"
                        },
                        new
                        {
                            Id = 30,
                            ApiKey = new Guid("f30a622e-0daa-448e-b1aa-a703fe279736"),
                            Comment = "Extension to add to file when processed, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.processedExtension",
                            SortOrder = 0,
                            Value = "_processed"
                        },
                        new
                        {
                            Id = 31,
                            ApiKey = new Guid("379fc0f6-8673-42c3-b3e4-5141188869b8"),
                            Comment = "Extension to add to file to indicate other files in the same category where processed and this file was skipped during processing, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.skippedExtension",
                            SortOrder = 0,
                            Value = "_skipped"
                        },
                        new
                        {
                            Id = 32,
                            ApiKey = new Guid("e850d3a8-d647-4a05-9aaa-8682c37dde1a"),
                            Comment = "When processing over write any existing Melodee data files, otherwise skip and leave in place.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.doOverrideExistingMelodeeDataFiles",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 33,
                            ApiKey = new Guid("276543a8-4862-47b1-86f2-3be20011934f"),
                            Category = 4,
                            Comment = "Include any embedded images from media files into the Melodee data file.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "imaging.doLoadEmbeddedImages",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 34,
                            ApiKey = new Guid("4c5dc511-c789-4015-8d13-e7932642c0e6"),
                            Comment = "The maximum number of files to process, set to zero for infinite.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.maximumProcessingCount",
                            SortOrder = 0,
                            Value = "0"
                        },
                        new
                        {
                            Id = 35,
                            ApiKey = new Guid("3abb5114-4fcc-4dc4-88b9-a2581d8c97f4"),
                            Comment = "Maximum allowed length of album directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.maximumAlbumDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 36,
                            ApiKey = new Guid("8a1c8c8c-2d34-4af8-bf5c-805bbd25e709"),
                            Comment = "Maximum allowed length of artist directory name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.maximumArtistDirectoryNameLength",
                            SortOrder = 0,
                            Value = "255"
                        },
                        new
                        {
                            Id = 37,
                            ApiKey = new Guid("e719e7f1-8b82-4994-92f3-13d9158634b3"),
                            Comment = "Fragments to remove from album titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.albumTitleRemovals",
                            SortOrder = 0,
                            Value = "['^', '~', '#']"
                        },
                        new
                        {
                            Id = 38,
                            ApiKey = new Guid("23820fae-3502-43e8-bb42-e6bd752a64e5"),
                            Comment = "Fragments to remove from song titles (JSON array).",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.songTitleRemovals",
                            SortOrder = 0,
                            Value = "[';', '(Remaster)', 'Remaster']"
                        },
                        new
                        {
                            Id = 39,
                            ApiKey = new Guid("2afa2ea4-66aa-4394-be1b-55c94c6be54e"),
                            Comment = "Continue processing if an error is encountered.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.doContinueOnDirectoryProcessingErrors",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 41,
                            ApiKey = new Guid("a7861900-c728-4739-aeea-f08fa6c06b02"),
                            Comment = "Is scripting enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "scripting.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 42,
                            ApiKey = new Guid("ed9a5ba8-3db6-4e1b-8fb0-d98627e9c689"),
                            Comment = "Script to run before processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "scripting.preDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 43,
                            ApiKey = new Guid("de4cbadb-5805-42d2-ad9a-2594b1e51aa6"),
                            Comment = "Script to run after processing the inbound directory, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "scripting.postDiscoveryScript",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 44,
                            ApiKey = new Guid("c14aaacd-9c82-43c1-9b63-ed3a8e047508"),
                            Category = 12,
                            Comment = "The maximum value a media number can have for an album. The length of this is used for formatting song names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "validation.maximumMediaNumber",
                            SortOrder = 0,
                            Value = "999"
                        },
                        new
                        {
                            Id = 45,
                            ApiKey = new Guid("5f9b65ed-b64b-4e98-a786-0ee0bc9b7b87"),
                            Category = 12,
                            Comment = "The maximum value a song number can have for an album. The length of this is used for formatting song names.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "validation.maximumSongNumber",
                            SortOrder = 0,
                            Value = "9999"
                        },
                        new
                        {
                            Id = 46,
                            ApiKey = new Guid("3d57ef2d-df01-4c1e-803d-a214b368149c"),
                            Category = 12,
                            Comment = "Minimum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "validation.minimumAlbumYear",
                            SortOrder = 0,
                            Value = "1860"
                        },
                        new
                        {
                            Id = 47,
                            ApiKey = new Guid("81b2defe-8145-4515-8583-4e9738a577e6"),
                            Category = 12,
                            Comment = "Maximum allowed year for an album.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "validation.maximumAlbumYear",
                            SortOrder = 0,
                            Value = "2150"
                        },
                        new
                        {
                            Id = 48,
                            ApiKey = new Guid("7b9c5d33-bd8a-4b6d-b9f4-a82a9ccce4a1"),
                            Comment = "Private key used to encrypt/decrypt passwords for Subsonic authentication. Use https://generate-random.org/encryption-key-generator?count=1&bytes=32&cipher=aes-256-cbc&string=&password= to generate a new key.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "encryption.privateKey",
                            SortOrder = 0,
                            Value = "H+Kiik6VMKfTD2MesF1GoMjczTrD5RhuKckJ5+/UQWOdWajGcsEC3yEnlJ5eoy8Y"
                        },
                        new
                        {
                            Id = 49,
                            ApiKey = new Guid("5ab3f075-51a8-4967-b20b-1bc743b74e87"),
                            Category = 1,
                            Comment = "OpenSubsonic server supported Subsonic API version.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServerSupportedVersion",
                            SortOrder = 0,
                            Value = "1.16.1"
                        },
                        new
                        {
                            Id = 50,
                            ApiKey = new Guid("8982494d-eba1-4723-8f9a-49e8c60be5ba"),
                            Category = 1,
                            Comment = "OpenSubsonic server name.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServerType",
                            SortOrder = 0,
                            Value = "Melodee"
                        },
                        new
                        {
                            Id = 51,
                            ApiKey = new Guid("09c41293-9c7a-4531-900b-c7214012b69a"),
                            Category = 1,
                            Comment = "OpenSubsonic server actual version. [Ex: 1.2.3 (beta)]",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServerVersion",
                            SortOrder = 0,
                            Value = "1.0.1 (beta)"
                        },
                        new
                        {
                            Id = 52,
                            ApiKey = new Guid("1c94353d-1aa9-4515-8aa2-a0c3b27a2f0d"),
                            Category = 1,
                            Comment = "OpenSubsonic email to use in License responses.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "openSubsonicServer.openSubsonicServerLicenseEmail",
                            SortOrder = 0,
                            Value = "noreply@localhost.lan"
                        },
                        new
                        {
                            Id = 53,
                            ApiKey = new Guid("a104f800-89ba-4081-ba3a-4a51a0b24fd9"),
                            Comment = "Processing batching size. Allowed range is between [250] and [1000]. ",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "defaults.batchSize",
                            SortOrder = 0,
                            Value = "250"
                        },
                        new
                        {
                            Id = 60,
                            ApiKey = new Guid("cb4716d3-7170-4a21-a1c4-1e3e0bbbcdee"),
                            Category = 9,
                            Comment = "Use Bing search engine to find images for albums and artists.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "searchEngine.bingImage.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 61,
                            ApiKey = new Guid("0c56465b-61c8-419e-b396-19451b48ecb6"),
                            Category = 9,
                            Comment = "Bing search ApiKey (Ocp-Apim-Subscription-Key), leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "searchEngine.bingImage.apiKey",
                            SortOrder = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 62,
                            ApiKey = new Guid("9cb50b5f-742a-41f5-a785-6affec772b37"),
                            Category = 9,
                            Comment = "User agent to send with Search engine requests.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "searchEngine.userAgent",
                            SortOrder = 0,
                            Value = "Mozilla/5.0 (X11; Linux x86_64; rv:131.0) Gecko/20100101 Firefox/131.0"
                        },
                        new
                        {
                            Id = 63,
                            ApiKey = new Guid("fa4e5b52-4409-4292-9f68-9cfc98865221"),
                            Category = 9,
                            Comment = "Default page size when performing a search engine search.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "searchEngine.defaultPageSize",
                            SortOrder = 0,
                            Value = "20"
                        },
                        new
                        {
                            Id = 70,
                            ApiKey = new Guid("5efcedce-0c5b-4ca4-9445-f2eb4ae048d5"),
                            Category = 4,
                            Comment = "Maximum image size allowed (WidthxHeight) for any image, if larger than will be resized to this image, leave blank to disable.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "imaging.imagingMaximumImageSize",
                            SortOrder = 0,
                            Value = "1600x1600"
                        },
                        new
                        {
                            Id = 71,
                            ApiKey = new Guid("216bf97e-77c7-41db-8247-e42b19183438"),
                            Category = 4,
                            Comment = "Maximum allowed number of images for an album, this includes all image types (Front, Rear, etc.), set to zero for infinite.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "imaging.maximumNumberOfAlbumImages",
                            SortOrder = 0,
                            Value = "25"
                        },
                        new
                        {
                            Id = 72,
                            ApiKey = new Guid("36187900-68b8-4e66-bd4e-a698aa4088e1"),
                            Category = 4,
                            Comment = "Maximum allowed number of images for an artist, set to zero for infinite.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "imaging.maximumNumberOfArtistImages",
                            SortOrder = 0,
                            Value = "25"
                        },
                        new
                        {
                            Id = 73,
                            ApiKey = new Guid("2dd9b0b2-72a3-4ca8-94ce-75fa9756666a"),
                            Category = 7,
                            Comment = "If true then all comments will be removed from media files.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "processing.doDeleteComments",
                            SortOrder = 0,
                            Value = "true"
                        },
                        new
                        {
                            Id = 74,
                            ApiKey = new Guid("4a74eda6-9259-4cd5-aeb9-a99acbac6816"),
                            Category = 11,
                            Comment = "Default format for transcoding.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "transcoding.default",
                            SortOrder = 0,
                            Value = "raw"
                        },
                        new
                        {
                            Id = 75,
                            ApiKey = new Guid("af27d6c5-8c0b-489d-a7d7-49cc8f74deeb"),
                            Category = 11,
                            Comment = "Default command to transcode MP3 for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "transcoding.command.mp3",
                            SortOrder = 0,
                            Value = "{ 'format': 'Mp3', 'bitrate: 192, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -f mp3 -' }"
                        },
                        new
                        {
                            Id = 76,
                            ApiKey = new Guid("eaaf7b96-5230-47fb-acba-4a90048ba33e"),
                            Category = 11,
                            Comment = "Default command to transcode using libopus for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "transcoding.command.opus",
                            SortOrder = 0,
                            Value = "{ 'format': 'Opus', 'bitrate: 128, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -c:a libopus -f opus -' }"
                        },
                        new
                        {
                            Id = 77,
                            ApiKey = new Guid("1b40fede-4d91-41ab-b539-80513eedcf56"),
                            Category = 11,
                            Comment = "Default command to transcode to aac for streaming.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "transcoding.command.aac",
                            SortOrder = 0,
                            Value = "{ 'format': 'Aac', 'bitrate: 256, 'command': 'ffmpeg -i %s -ss %t -map 0:a:0 -b:a %bk -v 0 -c:a aac -f adts -' }"
                        },
                        new
                        {
                            Id = 78,
                            ApiKey = new Guid("0e81ff47-9a54-40ce-ac50-6c59edc22f3c"),
                            Category = 10,
                            Comment = "Is scrobbling enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "scrobbling.enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 79,
                            ApiKey = new Guid("db0b4920-e3b5-4827-8a0d-b5990ea04d48"),
                            Category = 10,
                            Comment = "Is scrobbling to Last.fm enabled.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.Enabled",
                            SortOrder = 0,
                            Value = "false"
                        },
                        new
                        {
                            Id = 80,
                            ApiKey = new Guid("87a0a58e-9472-4e23-9933-7dd5a00cd2b5"),
                            Category = 10,
                            Comment = "ApiKey used to scrobble to last FM. See https://www.last.fm/api/authentication for more details.",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17323145451405037L),
                            IsLocked = false,
                            Key = "scrobbling.lastFm.apikey",
                            SortOrder = 0,
                            Value = ""
                        });
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Instant>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDownloadable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastVisitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("SongIds")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VisitCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumDiscId")
                        .HasColumnType("integer");

                    b.Property<string>("AlternateNames")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AmgId")
                        .HasColumnType("text");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("BPM")
                        .HasColumnType("integer");

                    b.Property<int>("BitDepth")
                        .HasColumnType("integer");

                    b.Property<int>("BitRate")
                        .HasColumnType("integer");

                    b.Property<decimal>("CalculatedRating")
                        .HasColumnType("numeric");

                    b.Property<int?>("ChannelCount")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DiscogsId")
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string[]>("Genres")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("ItunesId")
                        .HasColumnType("text");

                    b.Property<string>("LastFmId")
                        .HasColumnType("text");

                    b.Property<Instant?>("LastMetaDataUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lyrics")
                        .HasMaxLength(62000)
                        .HasColumnType("character varying(62000)");

                    b.Property<long>("MediaUniqueId")
                        .HasColumnType("bigint");

                    b.Property<string[]>("Moods")
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<string>("MusicBrainzId")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PartTitles")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<double?>("ReplayGain")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReplayPeak")
                        .HasColumnType("double precision");

                    b.Property<int>("SamplingRate")
                        .HasColumnType("integer");

                    b.Property<int>("SongNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TitleNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TitleSort")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Title");

                    b.HasIndex("AlbumDiscId", "SongNumber")
                        .IsUnique();

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmailNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("HasCommentRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCoverArtRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasDownloadRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasJukeboxRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPlaylistRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasPodcastRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSettingsRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasShareRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasStreamRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasUploadRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScrobblingEnabled")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastActivityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PasswordEncrypted")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("UserId", "AlbumId")
                        .IsUnique();

                    b.ToTable("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("ArtistId");

                    b.HasIndex("UserId", "ArtistId")
                        .IsUnique();

                    b.ToTable("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("boolean");

                    b.Property<Instant>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PlayedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StarredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.HasIndex("UserId", "SongId")
                        .IsUnique();

                    b.ToTable("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Discs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Bookmark", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Bookmarks")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Contributor", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("Contributors")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("Contributors")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("Contributors")
                        .HasForeignKey("SongId");

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.LibraryScanHistory", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Library", "Library")
                        .WithMany("ScanHistories")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlayQueue", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("PlayQues")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("PlayQues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Player", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", null)
                        .WithMany("Playlists")
                        .HasForeignKey("SongId");

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.PlaylistSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Playlist", "Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Share", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("Shares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.AlbumDisc", "AlbumDisc")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumDiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlbumDisc");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserAlbum", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Album", "Album")
                        .WithMany("UserAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserAlbums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserArtist", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Artist", "Artist")
                        .WithMany("UserArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserArtists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.UserSong", b =>
                {
                    b.HasOne("Melodee.Common.Data.Models.Song", "Song")
                        .WithMany("UserSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melodee.Common.Data.Models.User", "User")
                        .WithMany("UserSongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Album", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("Discs");

                    b.Navigation("UserAlbums");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.AlbumDisc", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Contributors");

                    b.Navigation("UserArtists");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Library", b =>
                {
                    b.Navigation("ScanHistories");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Playlist", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.Song", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Contributors");

                    b.Navigation("PlayQues");

                    b.Navigation("Playlists");

                    b.Navigation("UserSongs");
                });

            modelBuilder.Entity("Melodee.Common.Data.Models.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("PlayQues");

                    b.Navigation("Players");

                    b.Navigation("Playlists");

                    b.Navigation("Shares");

                    b.Navigation("UserAlbums");

                    b.Navigation("UserArtists");

                    b.Navigation("UserSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
