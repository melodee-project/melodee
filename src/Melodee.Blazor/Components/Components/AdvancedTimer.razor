@using System.Timers
@implements IDisposable
@inject ILogger<AdvancedTimer> Logger;

@code {

    protected override void OnInitialized()
    {
        if (DelayInMs > 0)
        {
            _timer = new Timer(DelayInMs);
            _timer.Elapsed += OnDelay;
            _timer.AutoReset = false;
        }
        else
        {
            _timer = new Timer(IntervalInMs);
            _timer.Elapsed += OnElapsed;
            _timer.AutoReset = Occurring.Count != 1;
        }

        if (AutoStart)
        {
            _timer.Start();
        }
    }

    private double _intervalInMs = 200;
    private bool _isEnabled;


    /// <summary>
    ///     Notification timeout in ms. If set to 0 or less it set to 1 ms.
    /// </summary>
    [Parameter]
    public double IntervalInMs { get; set; } = 200;

    /// <summary>
    ///     Delay in ms. before the timer will start. If set to 0 timer will start immediately.
    /// </summary>
    [Parameter]
    public double DelayInMs { get; set; }

    /// <summary>
    ///     Number of times elapsed even will be fired. See <see cref="Times" /> record description.
    /// </summary>
    [Parameter]
    public Times Occurring { get; set; } = Times.Once();

    /// <summary>
    ///     If true timer will start when component OnInitialized event run, otherwise timer must be started by IsEnabled
    ///     property set to true.
    /// </summary>
    [Parameter]
    public bool AutoStart { get; set; } = true;

    /// <summary>
    ///     Timer event this Function called when specified timeout elapsed, parameter is the iteration count.
    /// </summary>
    [Parameter]
    public EventCallback<ulong> OnIntervalElapsed { get; set; }

    private bool _disposedValue;
    private Timer? _timer;
    private ulong _eventCount;

    /// <summary>
    ///     Can be set to start `true` or stop `false` timer. Returns the inner state of the timer. `True` if timer is running
    ///     otherwise `false`.
    /// </summary>
    [Parameter]
    public bool IsEnabled { get; set; }

    [Parameter] public EventCallback<bool> IsEnabledChanged { get; set; }

    /// <summary>
    ///     Starts the internal timer which will start after the set delay and fire event for the given occurrence times.
    /// </summary>
    private void Start()
    {
        _timer?.Start();
    }

    /// <summary>
    ///     Stops the internal timer and no more event will be fired.
    /// </summary>
    public void Stop()
    {
        _timer?.Stop();
    }

    /// <summary>
    ///     Restarts the internal timer and resets the occurrence counter to 0. Events will be fired for the given occurrence
    ///     times.
    /// </summary>
    public void Reset()
    {
        _timer?.Stop();
        _eventCount = 0;
        _timer?.Start();
    }

    private void OnDelay(object? source, ElapsedEventArgs e)
    {
        if (_timer is null)
        {
            return;
        }

        _timer.Stop();
        _timer.Elapsed -= OnDelay;
        _timer.Elapsed += OnElapsed;

        _timer.Interval = IntervalInMs;
        _timer.AutoReset = Occurring.Count != 1;

        _timer.Start();
    }

    private void OnElapsed(object? source, ElapsedEventArgs e)
    {
        if (_eventCount >= Occurring.Count)
        {
            _timer?.Stop();
            return;
        }

        _eventCount++;

        InvokeAsync(async () => { await OnIntervalElapsed.InvokeAsync(_eventCount); });
    }

    protected override void OnParametersSet()
    {
        if (Math.Abs(IntervalInMs - _intervalInMs) < 0.000001)
        {
            return;
        }

        _intervalInMs = IntervalInMs > 0 ? IntervalInMs : 1;
        if (_timer is not null)
        {
            _timer.AutoReset = Occurring.Count != 1;
            _timer.Interval = _intervalInMs;
        }

        if (IsEnabled != _isEnabled)
        {
            _isEnabled = IsEnabled;
            if (_isEnabled)
            {
                Start();
            }
            else
            {
                Stop();
            }
        }
    }


    protected virtual void Dispose(bool disposing)
    {
        if (!_disposedValue)
        {
            if (disposing && _timer is not null)
            {
                _timer.Elapsed -= OnElapsed;
                _timer.Dispose();
            }

            _disposedValue = true;
        }
    }

    /// <summary>
    ///     Dispose component
    /// </summary>
    public void Dispose()
    {
        // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        Dispose(true);
        GC.SuppressFinalize(this);
    }

}
