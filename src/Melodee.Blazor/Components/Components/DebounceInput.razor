<AdvancedTimer @ref="_timer" IntervalInMs="@DebounceTime" AutoStart="false" Occurring="Times.Once()"
               OnIntervalElapsed="OnElapsed"/>
<input @ref="_inputRef" value="@Value" @oninput="OnTextChange" @onblur="OnBlur" @onkeydown="OnKeyPress"
       @attributes=AdditionalAttributes/>

@code {
    private bool _notifiedLastChange = false;
    private bool _debounceEnabled = true;

    private AdvancedTimer _timer = null!;
    private ElementReference _inputRef;

    /// <summary>
    /// Exposes a Blazor ElementReference of the wrapped around HTML element. It can be used e.g. for JS interop, etc.
    /// </summary>
    public ElementReference InnerElementReference => _inputRef;

    private double _intervalInMilisec = 200;

    /// <summary>
    /// Notification debounce timeout in ms. If set to 0 notifications happens immediately. -1 disables automatic notification completely.
    /// Notification will only happen by pressing Enter key or onblur, if set.
    /// </summary>
    [Parameter]
    public double DebounceTime
    {
        get => _intervalInMilisec;
        set
        {
            //if (value == _intervalInMilisec)
            if (Math.Abs(value - _intervalInMilisec) == 0)
            {
                return;
            }

            SetTimer(value);
        }
    }

    /// <summary>
    /// Value of the rendered HTML element. Initial field value can be set to given string or omitted (leave empty).
    /// Also control actual value can be read out (useful when MinLenght not reached).
    /// </summary>
    [Parameter]
    public string? Value { get; set; }

    /// <summary>
    /// Minimal length of text to start notify, if value is shorter than MinLength, there will be notifications with empty value "".
    /// </summary>
    [Parameter]
    public int MinLength { get; set; }

    /// <summary>
    /// Notification of current value will be sent immediately by hitting Enter key. Enabled by-default.
    /// Notification will obey MinLength rule, if length is less, then empty value "" will be sent back.
    /// </summary>
    [Parameter]
    public bool ForceNotifyByEnter { get; set; } = true;

    /// <summary>
    /// Same as ForceNotifyByEnter but notification triggered onblur event, when focus leaves the input field.
    /// </summary>
    [Parameter]
    public bool ForceNotifyOnBlur { get; set; } = true;

    //Events
    /// <summary>
    /// Callback function called when HTML control received keyboard inputs.
    /// </summary>
    [Parameter]
    public EventCallback<string> OnInput { get; set; }

    /// <summary>
    /// Callback function called when value was changed (debounced) with field value passed into.
    /// </summary>
    [Parameter]
    public EventCallback<string> OnValueChanged { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    protected override void OnInitialized()
    {
        SetTimer(DebounceTime);
        base.OnInitialized();
    }

    protected async Task OnTextChange(ChangeEventArgs e)
    {
        _timer.Stop(); //Stop previous timer

        if (OnInput.HasDelegate) //Immediately notify listeners of text change e.g. @bind
        {
            await OnInput.InvokeAsync(e.Value?.ToString());
        }

        Value = e.Value?.ToString();
        _notifiedLastChange = false;

        if (_intervalInMilisec == 0) //Notify immediately
        {
            Notify();
        }

        if (!_debounceEnabled) //Do not notify
        {
            return;
        }

        _timer.Reset(); //Re-start timer
    }

    protected void OnBlur(FocusEventArgs e)
    {
        if (ForceNotifyOnBlur)
        {
            _timer.Stop(); //Stop timer
            Notify();
        }
    }

    protected void OnKeyPress(KeyboardEventArgs e)
    {
        if (ForceNotifyByEnter && e.Key.Equals("Enter", StringComparison.OrdinalIgnoreCase))
        {
            _timer.Stop(); //Stop timer
            Notify();
        }
    }

    protected void OnElapsed(ulong count)
    {
        if (_debounceEnabled)
        {
            Notify();
        }
    }

    private void Notify()
    {
        if (_notifiedLastChange)
        {
            return;
        }

        var invokeValue = Value?.Length >= MinLength
            ? Value
            : string.Empty;

        InvokeAsync(async () =>
        {
            _notifiedLastChange = true;
            await OnValueChanged.InvokeAsync(invokeValue);
        });
    }

    private void SetTimer(double value)
    {
        // ReSharper disable once ConditionalAccessQualifierIsNonNullableAccordingToAPIContract
        _timer?.Stop();
        _intervalInMilisec = value;
        if (value <= -1)
        {
            _timer?.Stop();
            _debounceEnabled = false;
            return;
        }

        _debounceEnabled = true;
    }

}
