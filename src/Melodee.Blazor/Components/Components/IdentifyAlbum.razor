@using Melodee.Blazor.ViewModels
@using Melodee.Common.Models.Collection
@using Melodee.Common.Models.SearchEngines
@using Melodee.Common.Models.SearchEngines.Extensions
@using Melodee.Common.Services.SearchEngines
@inject SettingService SettingService
@inject AlbumSearchEngineService AlbumSearchEngineService
@inject MainLayoutProxyService MainLayoutProxyService
@inject ILogger Logger

<PageTitle>Identify Album</PageTitle>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center"
                         JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="save" Text="Select" Click="@SelectClicked"/>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        @foreach (var kv in SearchValues.Where(x => x.Key != nameof(AlbumQuery.ArtistMusicBrainzId) && x.Key != nameof(AlbumQuery.Year)))
        {
            <DebounceInput class="rz-textbox rz-w-100"
                           autocomplete="off"
                           @bind-Value="@kv.Value"
                           @bind-Value:event="OnInput"
                           DebounceTime="1000"
                           MinLength="3"
                           OnValueChanged="@DoSearchAsync"
                           ForceNotifyByEnter="true"
                           ForceNotifyOnBlur="true"/>
        }
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn Size="12">
            <div class="album-searches-container">
                @if (_isLoading)
                {
                    <RadzenProgressBarCircular
                        ProgressBarStyle="ProgressBarStyle.Primary"
                        Value="100"
                        ShowValue="false"
                        Mode="ProgressBarMode.Indeterminate"/>
                }
                @if (!_isLoading && _results.Length == 0)
                {
                    <p>No albums found.</p>
                }
                @foreach (var result in _results)
                {
                    <div class="@(_selectedResult == result ? "selected" : string.Empty) album-search-container" @onclick="() => _selectedResult = result">
                        <AlbumDataInfoCardCompactComponent ShowAlbumLink="false" Album="result"/>
                    </div>
                }
            </div>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {

    bool _isLoading = false;
    int _maxResults = 10;

    private AlbumDataInfo[] _results = [];
    private AlbumDataInfo? _selectedResult;

    [Parameter] public SearchValue[] SearchValues { get; set; } = [];

    [Parameter] public EventCallback<AlbumDataInfo?> OnUpdateCallback { get; set; }


    private async Task SelectOrCancelClicked(bool clickedSelected)
    {
        if (!clickedSelected)
        {
            await OnUpdateCallback.InvokeAsync(null);
        }

        if (OnUpdateCallback.HasDelegate && _selectedResult != null)
        {
            await OnUpdateCallback.InvokeAsync(_selectedResult);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _maxResults = (await SettingService.GetValueAsync<int?>(SettingRegistry.SearchEngineDefaultPageSize)).Data ?? (await SettingService.GetValueAsync<int>(SettingRegistry.DefaultsPageSize)).Data;
        await AlbumSearchEngineService.InitializeAsync();
    }

    private async Task DoSearchAsync()
    {
        if (_isLoading)
        {
            return;
        }
        Console.WriteLine("++ Do Search Async");
        _isLoading = true;
        try
        {
            var searchName = SearchValues.First(x => x.Key == nameof(AlbumQuery.Name)).Value;
            _results = (await AlbumSearchEngineService.DoSearchAsync(new AlbumQuery
                {
                    Artist = SearchValues.First(x => x.Key == nameof(AlbumQuery.Artist)).Value,
                    ArtistMusicBrainzId = SearchValues.First(x => x.Key ==  nameof(AlbumQuery.ArtistMusicBrainzId)).Value,
                    Name = searchName,
                    Year = SafeParser.ToNumber<int>(SearchValues.First(x => x.Key == nameof(AlbumQuery.Year)).Value)
                }, _maxResults))
                .Data
                .OrderByDescending(x => x.Year).ThenBy(x => x.Name)
                .Select(x => x.ToAlbumDataInfo())
                .ToArray();
            if (searchName.Nullify() != null)
            {
                _results = _results.Where(x => x.NameNormalized.Contains(searchName.ToNormalizedString() ?? searchName)).ToArray();
            }
        }
        catch (Exception e)
        {
            Logger.Error(e, "For search [{Value}]", SearchValues.FirstOrDefault()?.Value);
        }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private Task SelectClicked()
    {
        return SelectOrCancelClicked(true);
    }

    void OnChange(byte[] value, string name)
    {
        throw new NotImplementedException();
    }

    void OnError(UploadErrorEventArgs args, string name)
    {
        throw new NotImplementedException();
    }

    // private async Task OnChange(byte[] value, string fileinput)
    // {
    //     _selectedResult = new ImageSearchResult(string.Empty, fileinput, _doDeleteExistingImages, value);
    //     await SelectOrCancelClicked(true);
    // }
    //
    // void OnError(UploadErrorEventArgs args, string name)
    // {
    //
    // }

}

