@using System.Security.Claims
@using Melodee.Blazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase

@implements IDisposable
@inject MainLayoutProxyService MainLayoutProxyService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<RadzenComponents @rendermode="InteractiveServer" />

<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

<AuthorizeView>
    <NotAuthorized>
        @Body
    </NotAuthorized>
    <Authorized>
        <RadzenLayout>
            <RadzenHeader>
                <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenColumn Size="5">
                        <RadzenSidebarToggle Click="@SidebarToggleClick"></RadzenSidebarToggle>
                    </RadzenColumn>
                    <RadzenColumn Size="7">
                        <RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                            <RadzenAppearanceToggle />
                            <RadzenProfileMenu Click="@ProfileMenuClick">
                                <ChildContent>
                                    <RadzenProfileMenuItem Path="profile" Icon="settings" Text="Profile"/>
                                    <RadzenProfileMenuItem Text="Logout" Value="Logout" Icon="power_settings_new"/>
                                </ChildContent>
                                <Template>
                                    <RadzenImage Path="/images/avatar.png" style="width:32px;height:32px;border-radius:16px;"/>
                                </Template>
                            </RadzenProfileMenu>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenHeader>
            <RadzenSidebar @bind-Expanded="@_sidebarExpanded">
                <RadzenPanelMenu>
                    <RadzenPanelMenuItem Text="Dashboard" Path="/" Icon="dashboard"/>
                    <RadzenPanelMenuItem Text="Jobs" Path="jobs" Icon="checklist"/>
                </RadzenPanelMenu>
            </RadzenSidebar>
            <RadzenBody>
                <div class="rz-p-4">
                    @Body
                </div>
            </RadzenBody>
        </RadzenLayout>
    </Authorized>
</AuthorizeView>




<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    bool _sidebarExpanded = true;

    protected override void OnInitialized()
    {
        MainLayoutProxyService.HeaderChanged += OnHeaderChange;
        MainLayoutProxyService.SpinnerVisibleChanged += OnSpinnerChange;
    }

    private void OnHeaderChange(object? sender, EventArgs e)
        => this.InvokeAsync(StateHasChanged);

    private void OnSpinnerChange(object? sender, EventArgs e)
        => this.InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        MainLayoutProxyService.HeaderChanged -= OnHeaderChange;
        MainLayoutProxyService.SpinnerVisibleChanged -= OnSpinnerChange;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !AuthService.IsLoggedIn)
        {
            var url = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).ToString();
            if (url.Contains("/login"))
            {
                return;
            }
            var restoredFromState = await AuthService.GetStateFromTokenAsync();
            if (restoredFromState)
            {
                NavigationManager.Refresh();
            }
        }
    }

    private void SidebarToggleClick()
    {
        _sidebarExpanded = !_sidebarExpanded;
    }

    private void ProfileMenuClick(RadzenProfileMenuItem arg)
    {
        if (arg.Value == "Logout")
        {
            NavigationManager.NavigateTo("/account/logout", true);
        }
    }

}
