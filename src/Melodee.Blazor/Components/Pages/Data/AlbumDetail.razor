@page "/data/album/{ApiKey:guid}"
@inherits MelodeeComponentBase
@using Melodee.Common.Data.Models
@using Melodee.Common.Data.Models.Extensions
@using Melodee.Common.Enums
@using Melodee.Common.Models.Extensions
@using NodaTime
@using Album = Melodee.Common.Data.Models.Album
@using Artist = Melodee.Common.Data.Models.Artist
@using Song = Melodee.Common.Data.Models.Song

@inject AlbumService AlbumService
@inject UserService UserService
@inject NotificationService NotificationService

<PageTitle>@_album.Name</PageTitle>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center" Class="rz-pb-5">
        <RadzenColumn Size="7" SizeMD="9">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="/" Text="Dashboard"/>
                <RadzenBreadCrumbItem Path="@($"/data/artist/{_album.Artist.ApiKey}")" Text="@_album.Artist.Name"/>
                <RadzenBreadCrumbItem Path="@($"/data/albums?filterToArtistApiKey={_album.Artist.ApiKey}")"
                                      Text="Albums"/>
                <RadzenBreadCrumbItem Icon="album" Text="@_album.Name"/>
            </RadzenBreadCrumb>
        </RadzenColumn>
        <RadzenColumn Size="5" SizeMD="3">
            <RadzenStack
                Orientation="Orientation.Horizontal"
                AlignItems="AlignItems.Center"
                JustifyContent="JustifyContent.End"
                Gap="0.5rem">
                <RadzenRating Value="@_userAlbum.Rating" Change="@UserRatingChange"/>
                <RadzenIcon Icon="thumb_down" class="filled-icon" IconColor="@(_userAlbum.IsHated ? "#A2A415" : "#C9C9C7")"
                            @onclick="@IsHatedClicked" Style="cursor:pointer;"/>
                <RadzenIcon Icon="favorite" class="filled-icon" IconColor="@(_userAlbum.IsStarred ? "#FA0202" : "#C9C9C7")"
                            @onclick="@IsStarredClicked" Style="cursor:pointer;"/>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="@_album.Name" TextStyle="TextStyle.DisplayH6" TagName="TagName.H1" style="margin: 0"/>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6" Visible="CurrentUser?.IsEditor() ?? false">
            <RadzenStack
                Orientation="Orientation.Horizontal"
                AlignItems="AlignItems.Center"
                JustifyContent="JustifyContent.End"
                Gap="0.5rem">
                <RadzenButton
                    Icon="edit"
                    ButtonStyle="ButtonStyle.Info"
                    Text="Edit" title="Edit the album"
                    Click="@EditButtonClick"/>
                @if (_album.IsLocked)
                {
                    <RadzenButton Icon="lock_open" Text="Unlock" ButtonStyle="ButtonStyle.Warning"
                                  title="Unlock library, will allow modifications." Click="@UnlockButtonClick"/>
                }
                else
                {
                    <RadzenButton Icon="lock" Text="Lock" ButtonStyle="ButtonStyle.Warning"
                                  title="Lock library, will prevent modifications." Click="@LockButtonClick"/>
                }
                <RadzenButton Icon="delete" Visible="!_album.IsLocked" ButtonStyle="ButtonStyle.Danger"
                              Text="Delete" title="Delete the album and all album files. BEWARE!"
                              Click="@DeleteButtonClick"/>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>
<RadzenStack class="rz-mt-3">
    <RadzenRow>
        <RadzenColumn Size="4" SizeMD="2">
            <RadzenStack>
                <RadzenCard>
                    <RadzenTree Change="@OnShowItemChange">
                        <RadzenTreeItem Text="Overview" Selected="true">
                            <Template>
                                <RadzenIcon Icon="overview"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem Text="Contributors">
                            <Template>
                                <RadzenIcon Icon="groups"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem Text="Files">
                            <Template>
                                <RadzenIcon Icon="folder_data"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem Text="Images">
                            <Template>
                                <RadzenIcon Icon="image"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                    </RadzenTree>
                </RadzenCard>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="info" class="rz-me-1"/>
                            Details
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            <CondensedStatistic Label="Status" StatisticStyle="@AlbumStatusStyle" Statistic="@_album.AlbumStatusValue.ToString()"/>
                            <CondensedStatistic Label="Album Type" Statistic="@_album.AlbumTypeValue.ToString()"/>
                            <CondensedStatistic Label="Genres" Statistic="@_album.Genres?.ToCsv()"/>
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="monitoring" class="rz-me-1"/>
                            Statistics
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            <CondensedStatistic Label="Disc Count" Statistic="@(_album.DiscCount.ToStringPadLeft(3))"/>
                            <CondensedStatistic Label="Song Count" Statistic="@(_album.SongCount.ToStringPadLeft(4))"/>
                            <CondensedStatistic Label="Played Total" Statistic="@(_album.PlayedCount.ToStringPadLeft(6))"/>
                            <CondensedStatistic Label="Last Played" Statistic="@(CurrentUser?.FormatInstant(_album.LastPlayedAt))"/>
                            <CondensedStatistic Label="Created" Statistic="@(CurrentUser?.FormatInstant(_album.CreatedAt))"/>
                            <CondensedStatistic Label="Last Updated" Statistic="@(CurrentUser?.FormatInstant(_album.LastUpdatedAt))"/>
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="8" SizeMD="9">
            @if (_showItem == ShowItem.Overview)
            {
                <RadzenRow class="rz-pb-3">
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenPanel>
                            <HeaderTemplate>
                                <RadzenText TextStyle="TextStyle.H6"
                                            class="rz-display-flex rz-align-items-center rz-m-0">
                                    <RadzenIcon Icon="music_note" class="rz-me-1"/>
                                    Songs
                                </RadzenText>
                            </HeaderTemplate>
                            <ChildContent>
                                <table class="rz-mt-1">
                                    <thead>
                                    <tr>
                                        <th scope="col" style="min-width:50px;"></th>
                                        <th scope="col">#</th>
                                        <th scope="col" style="width:90%;">Title</th>
                                        <th scope="col">Duration</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var song in _album.Discs.OrderBy(x => x.DiscNumber).SelectMany(x => x.Songs).OrderBy(x => x.SongNumber))
                                    {
                                        <tr>
                                            <th scope="row">
                                                <RadzenIcon
                                                    Icon="thumb_down"
                                                    class="filled-icon"
                                                    IconColor="@(_userSongs.FirstOrDefault(x => x.SongId == song.Id)?.IsHated ?? false ? "#A2A415" : "#C9C9C7")"
                                                    @onclick="@(() => IsSongHatedClicked(song))"
                                                    Style="cursor:pointer;" />
                                                <RadzenIcon
                                                    Icon="favorite"
                                                    class="filled-icon"
                                                    IconColor="@(_userSongs.FirstOrDefault(x => x.SongId == song.Id)?.IsStarred ?? false ? "#FA0202" : "#C9C9C7")"
                                                    @onclick="@(() => IsSongStarredClicked(song))"
                                                    Style="cursor:pointer;"/>
                                            </th>
                                            <td>@($"{song.AlbumDisc.DiscNumber.ToStringPadLeft(2)}.{song.SongNumber.ToStringPadLeft(3)}")</td>
                                            <td>@song.Title</td>
                                            <td>@CurrentUser!.FormatDuration(song.Duration.ToDuration())</td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </ChildContent>
                        </RadzenPanel>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="4">
                        <ArtistDataInfoCardComponent
                            Style="width: 350px;"
                            Artist="@_album.Artist.ToArtistDataInfo()" />
                        <RadzenImage
                            Path=@($"/images/{_album.ToApiKey()}/350")
                            Style="margin:auto;display: block;"
                            AlternateText="@_album.Name"/>
                    </RadzenColumn>
                </RadzenRow>
            }
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {

    [Parameter] public Guid ApiKey { get; set; }

    string AlbumStatusStyle { get; set; } = string.Empty;

    ShowItem _showItem = ShowItem.Overview;

    private enum ShowItem
    {
        Overview = 1,
        Contributors,
        Files,
        Images
    }

    UserAlbum _userAlbum = new UserAlbum
    {
        UserId = 0,
        AlbumId = 0,
        CreatedAt = default
    };

    UserSong[] _userSongs = [];

    Album _album = new()
    {
        Artist = new Artist
        {
            Library = new Library
            {
                Name = string.Empty,
                Path = string.Empty,
                Type = 0,
                CreatedAt = default
            },
            Name = string.Empty,
            NameNormalized = string.Empty,
            Directory = string.Empty,
            LibraryId = 0,
            CreatedAt = default
        },
        Discs = new List<AlbumDisc>(),
        Name = string.Empty,
        NameNormalized = string.Empty,
        Directory = string.Empty,
        CreatedAt = default
    };

    protected override async Task OnParametersSetAsync()
    {
        if (ApiKey != Guid.Empty)
        {
            var albumResult = await AlbumService.GetByApiKeyAsync(ApiKey);
            if (albumResult is { IsSuccess: true, Data: not null })
            {
                _album = albumResult.Data;

                switch (_album.AlbumStatusValue)
                {
                    case AlbumStatus.New:
                        AlbumStatusStyle = "color: var(--rz-info)";
                        break;
                    case AlbumStatus.Invalid:
                        AlbumStatusStyle = "color: var(--rz-warning)";
                        break;
                    default:
                        AlbumStatusStyle = "color: var(--rz-success)";
                        break;
                }

                _userAlbum = await UserService.UserAlbumAsync(CurrentUsersId, _album.ApiKey) ?? new UserAlbum
                {
                    UserId = 0,
                    AlbumId = 0,
                    CreatedAt = default
                };
                _userSongs = await UserService.UserSongsForAlbumAsync(CurrentUsersId, _album.ApiKey) ?? [];

            }
        }
    }

    private void OnShowItemChange(TreeEventArgs arg)
    {
        switch (arg.Text)
        {
            default:
                _showItem = ShowItem.Overview;
                break;
        }
    }

    private Task EditButtonClick()
    {
        throw new NotImplementedException();
    }

    private Task UnlockButtonClick()
    {
        throw new NotImplementedException();
    }

    private Task LockButtonClick()
    {
        throw new NotImplementedException();
    }

    private Task DeleteButtonClick()
    {
        throw new NotImplementedException();
    }

    private Task UserRatingChange(int arg)
    {
        throw new NotImplementedException();
    }

    private async Task IsHatedClicked()
    {
        _userAlbum.IsHated = !_userAlbum.IsHated;
        var result = await UserService.ToggleAlbumHatedAsync(CurrentUsersId, _album.ApiKey, _userAlbum.IsHated);
        NotificationService.Notify(NotificationMessageForResult(result, "Toggling Album Hatred", ToastTime));
    }

    private async Task IsStarredClicked()
    {
        _userAlbum.IsStarred = !_userAlbum.IsStarred;
        var result = await UserService.ToggleAlbumStarAsync(CurrentUsersId, _album.ApiKey, _userAlbum.IsStarred);
        NotificationService.Notify(NotificationMessageForResult(result, "Toggling Album Favorite", ToastTime));
    }


    private async Task IsSongStarredClicked(Song song)
    {
        var userSong = _userSongs.FirstOrDefault(x => x.SongId == song.Id);
        if (userSong == null)
        {
            userSong = new UserSong
            {
                CreatedAt = Instant.FromDateTimeUtc(DateTime.UtcNow),
                UserId = CurrentUsersId,
                SongId = song.Id,
                IsStarred = true,
            };
            var allUserSongs = _userSongs.ToList();
            allUserSongs.Add(userSong);
            _userSongs = allUserSongs.ToArray();
        }
        else
        {
            userSong.IsStarred = !userSong.IsStarred;
        }
        if (userSong.IsStarred)
        {
            userSong.IsHated = false;
        }
        var result = await UserService.ToggleSongStarAsync(CurrentUsersId, song.ApiKey, userSong.IsStarred);
        NotificationService.Notify(NotificationMessageForResult(result, "Toggling Song Favorite", ToastTime));

    }

    private async Task IsSongHatedClicked(Song song)
    {
        var userSong = _userSongs.FirstOrDefault(x => x.SongId == song.Id);
        if (userSong == null)
        {
            userSong = new UserSong
            {
                CreatedAt = Instant.FromDateTimeUtc(DateTime.UtcNow),
                UserId = CurrentUsersId,
                SongId = song.Id,
                IsHated = true,
            };
            var allUserSongs = _userSongs.ToList();
            allUserSongs.Add(userSong);
            _userSongs = allUserSongs.ToArray();
        }
        else
        {
            userSong.IsHated = !userSong.IsHated;
        }
        if (userSong.IsHated)
        {
            userSong.IsStarred = false;
        }
        var result = await UserService.ToggleSongHatedAsync(CurrentUsersId, song.ApiKey, userSong.IsStarred);
        NotificationService.Notify(NotificationMessageForResult(result, "Toggling Song Hatred", ToastTime));
    }

}
