@page "/data/album/{ApiKey:guid}/{FromUrl?}"
@inherits MelodeeComponentBase
@using Melodee.Common.Data.Models
@using Melodee.Common.Data.Models.Extensions
@using Melodee.Common.Enums
@using Melodee.Common.Models.Extensions
@using NodaTime
@using Album = Melodee.Common.Data.Models.Album
@using Artist = Melodee.Common.Data.Models.Artist
@using Song = Melodee.Common.Data.Models.Song

@inject AlbumService AlbumService
@inject UserService UserService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>@_album.Name</PageTitle>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center" Class="rz-pb-5">
        <RadzenColumn Size="7" SizeMD="9">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                @if (FromUrl != null)
                {
                    <RadzenButton
                        Icon="arrow_back"
                        ButtonStyle="ButtonStyle.Info"
                        Text="Back"
                        title="Go back"
                        Size="ButtonSize.Small"
                        Click="@(() => NavigationManager.NavigateTo(FromUrl, true))"/>
                }
                <RadzenBreadCrumb>
                    <RadzenBreadCrumbItem Path="/" Text="Dashboard"/>
                    <RadzenBreadCrumbItem Path="@($"/data/artist/{_album.Artist.ApiKey}")" Text="@_album.Artist.Name"/>
                    <RadzenBreadCrumbItem Path="@($"/data/albums?filterToArtistApiKey={_album.Artist.ApiKey}")"
                                          Text="Albums"/>
                    <RadzenBreadCrumbItem Icon="album" Text="@_album.Name"/>
                </RadzenBreadCrumb>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="5" SizeMD="3">
            <RadzenStack
                Orientation="Orientation.Horizontal"
                AlignItems="AlignItems.Center"
                JustifyContent="JustifyContent.End"
                Gap="0.5rem">
                <RadzenRating Value="@_userAlbum.Rating" Change="@UserRatingChange"/>
                <RadzenIcon Icon="thumb_down" class="filled-icon"
                            IconColor="@(_userAlbum.IsHated ? "#A2A415" : "#C9C9C7")"
                            @onclick="@IsHatedClicked" Style="cursor:pointer;"/>
                <RadzenIcon Icon="favorite" class="filled-icon"
                            IconColor="@(_userAlbum.IsStarred ? "#FA0202" : "#C9C9C7")"
                            @onclick="@IsStarredClicked" Style="cursor:pointer;"/>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>
<RadzenStack>
    <RadzenMenu>
        <RadzenMenuItem Text="Delete"  Visible="CurrentUser?.IsEditor() ?? false" Disabled="_album.IsLocked" Click="DeleteButtonClick" title="Delete the album and all album files. BEWARE!" IconColor="@Colors.Danger" Icon="delete"></RadzenMenuItem>
        <RadzenMenuItem Text="Edit" Visible="CurrentUser?.IsEditor() ?? false" Disabled="_album.IsLocked" Click="EditButtonClick" title="Edit artist." Icon="edit"></RadzenMenuItem>
        @if (_album.IsLocked)
        {
            <RadzenMenuItem Text="Unlock" Visible="CurrentUser?.IsEditor() ?? false" Disabled="_album.IsLocked" Click="UnlockButtonClick" title="Unlock album, will allow modifications." IconColor="@Colors.Warning" Icon="lock_open"></RadzenMenuItem>
        }
        else
        {
            <RadzenMenuItem Text="Lock" Visible="CurrentUser?.IsEditor() ?? false" Disabled="_album.IsLocked" Click="LockButtonClick" title="Lock album, will prevent modifications." IconColor="@Colors.Warning" Icon="lock"></RadzenMenuItem>
        }
        <RadzenMenuItem Text="Web Search" Icon="public">
            <RadzenMenuItem Text="Album" Click="@(() => DoWebSearch(1))"></RadzenMenuItem>
            <RadzenMenuItem Text="Album + Year" Click="@(() => DoWebSearch(2))"></RadzenMenuItem>
            <RadzenMenuItem Text="Album + Artist" Click="@(() => DoWebSearch(3))"></RadzenMenuItem>
            <RadzenMenuItem Text="Album + Year + Artist" Click="@(() => DoWebSearch(4))"></RadzenMenuItem>
        </RadzenMenuItem>
    </RadzenMenu>
    <RadzenText Text="@($"[{_album.ReleaseDate.Year}] {_album.Name}")" TextStyle="TextStyle.DisplayH6" TagName="TagName.H1" style="margin: 0"/>
</RadzenStack>
<RadzenStack class="rz-mt-3">
    <RadzenRow>
        <RadzenColumn Size="4" SizeMD="2">
            <RadzenStack>
                <RadzenCard>
                    <RadzenTree Change="@OnShowItemChange">
                        <RadzenTreeItem Text="Overview" Selected="true">
                            <Template>
                                <RadzenIcon Icon="overview"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem Text="Contributors">
                            <Template>
                                <RadzenIcon Icon="groups"/>
                                @($"{ context.Text } {(_album.Contributors.Count > 0 ? $"({ _album.Contributors.Count })": string.Empty)}")
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem Text="Files">
                            <Template>
                                <RadzenIcon Icon="folder_data"/>
                                @($"{ context.Text } ({_albumDirectoryFileCount})")
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem Text="Images">
                            <Template>
                                <RadzenIcon Icon="image"/>
                                @($"{ context.Text } ({(_album.ImageCount ?? 0) + 1})")
                            </Template>
                        </RadzenTreeItem>
                    </RadzenTree>
                </RadzenCard>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="info" class="rz-me-1"/>
                            Details
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            <CondensedStatistic Label="Status" StatisticStyle="@AlbumStatusStyle"
                                                Statistic="@_album.AlbumStatusValue.ToString()"/>
                            @if (@CurrentUser?.IsAdmin() ?? false)
                            {
                                <CondensedStatistic Label="Directory" Statistic="@_album.Directory"/>
                            }
                            <CondensedStatistic Label="Album Type" Statistic="@_album.AlbumTypeValue.ToString()"/>
                            <CondensedStatistic Label="Genres" Statistic="@_album.Genres?.ToCsv()"/>
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="link" class="rz-me-1"/>
                            External Links
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Album"
                                            ThirdPartyIdType="ThirdPartyIdType.Amg" Id="@_album.AmgId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Album"
                                            ThirdPartyIdType="ThirdPartyIdType.Discogs" Id="@_album.DiscogsId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Album"
                                            ThirdPartyIdType="ThirdPartyIdType.ITunes" Id="@_album.ItunesId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Album"
                                            ThirdPartyIdType="ThirdPartyIdType.LastFm" Id="@_album.LastFmId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Album"
                                            ThirdPartyIdType="ThirdPartyIdType.Spotify" Id="@_album.SpotifyId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Album"
                                            ThirdPartyIdType="ThirdPartyIdType.MusicBrainz"
                                            Id="@_album.MusicBrainzId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Album"
                                            ThirdPartyIdType="ThirdPartyIdType.WikiData"
                                            Id="@_album.WikiDataId"/>
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="monitoring" class="rz-me-1"/>
                            Statistics
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            <CondensedStatistic Label="Song Count" Statistic="@(_album.SongCount.ToStringPadLeft(4))"/>
                            <CondensedStatistic Label="Played Total"
                                                Statistic="@(_album.PlayedCount.ToStringPadLeft(6))"/>
                            <CondensedStatistic Label="Last Played"
                                                Statistic="@(CurrentUser?.FormatInstant(_album.LastPlayedAt))"/>
                            <CondensedStatistic Label="Created"
                                                Statistic="@(CurrentUser?.FormatInstant(_album.CreatedAt))"/>
                            <CondensedStatistic Label="Last Updated"
                                                Statistic="@(CurrentUser?.FormatInstant(_album.LastUpdatedAt))"/>
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="8" SizeMD="9">
            @if (_showItem == ShowItem.Overview)
            {
                <RadzenRow class="rz-pb-3">
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenPanel>
                            <HeaderTemplate>
                                <RadzenText TextStyle="TextStyle.H6"
                                            class="rz-display-flex rz-align-items-center rz-m-0">
                                    <RadzenIcon Icon="music_note" class="rz-me-1"/>
                                    Songs
                                </RadzenText>
                            </HeaderTemplate>
                            <ChildContent>
                                <table class="rz-mt-1">
                                    <thead>
                                    <tr>
                                        <th scope="col" style="min-width:50px;"></th>
                                        <th scope="col">#</th>
                                        <th scope="col" style="width:90%;">Title</th>
                                        <th scope="col">Duration</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var song in _album.Songs.OrderBy(x => x.SongNumber))
                                    {
                                        <tr>
                                            <th scope="row">
                                                <RadzenIcon
                                                    Icon="thumb_down"
                                                    class="filled-icon"
                                                    IconColor="@(_userSongs.FirstOrDefault(x => x.SongId == song.Id)?.IsHated ?? false ? "#A2A415" : "#C9C9C7")"
                                                    @onclick="@(() => IsSongHatedClicked(song))"
                                                    Style="cursor:pointer;"/>
                                                <RadzenIcon
                                                    Icon="favorite"
                                                    class="filled-icon"
                                                    IconColor="@(_userSongs.FirstOrDefault(x => x.SongId == song.Id)?.IsStarred ?? false ? "#FA0202" : "#C9C9C7")"
                                                    @onclick="@(() => IsSongStarredClicked(song))"
                                                    Style="cursor:pointer;"/>
                                            </th>
                                            <td>@($"{song.SongNumber.ToStringPadLeft(3)}")</td>
                                            <td>@song.Title</td>
                                            <td>@CurrentUser!.FormatDuration(song.Duration.ToDuration())</td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </ChildContent>
                        </RadzenPanel>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="4">
                        <ArtistDataInfoCardComponent
                            Style="width: 350px;"
                            Artist="@_album.Artist.ToArtistDataInfo()"/>
                        <RadzenImage
                            Path=@($"/images/{_album.ToApiKey()}/350")
                            Style="margin:auto;display: block;"
                            AlternateText="@_album.Name"/>
                    </RadzenColumn>
                </RadzenRow>
            }
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {

    [Parameter] public Guid ApiKey { get; set; }

    /// <summary>
    ///     When this is set, is it used if the album gets deleted to return the user back (like viewing albums for an artist
    ///     return to the artist detail)
    /// </summary>
    [Parameter] public string? FromUrl { get; set; }

    string AlbumStatusStyle { get; set; } = string.Empty;

    ShowItem _showItem = ShowItem.Overview;

    private enum ShowItem
    {
        Overview = 1,
        Contributors,
        Files,
        Images
    }

    UserAlbum _userAlbum = new()
    {
        UserId = 0,
        AlbumId = 0,
        CreatedAt = default
    };

    UserSong[] _userSongs = [];

    Album _album = new()
    {
        Artist = new Artist
        {
            Library = new Library
            {
                Name = string.Empty,
                Path = string.Empty,
                Type = 0,
                CreatedAt = default
            },
            Name = string.Empty,
            NameNormalized = string.Empty,
            Directory = string.Empty,
            LibraryId = 0,
            CreatedAt = default
        },
        Name = string.Empty,
        NameNormalized = string.Empty,
        Directory = string.Empty,
        CreatedAt = default
    };

    private long _albumDirectoryFileCount = 0;

    protected override async Task OnParametersSetAsync()
    {
        if (ApiKey != Guid.Empty)
        {
            var albumResult = await AlbumService.GetByApiKeyAsync(ApiKey);
            if (albumResult is { IsSuccess: true, Data: not null })
            {
                _album = albumResult.Data;
                _albumDirectoryFileCount = Path.Combine(_album.Artist.Library.Path, _album.Artist.Directory, _album.Directory).ToDirectoryInfo().FileCount();
                switch (_album.AlbumStatusValue)
                {
                    case AlbumStatus.New:
                        AlbumStatusStyle = "color: var(--rz-info)";
                        break;
                    case AlbumStatus.Invalid:
                        AlbumStatusStyle = "color: var(--rz-warning)";
                        break;
                    default:
                        AlbumStatusStyle = "color: var(--rz-success)";
                        break;
                }

                _userAlbum = await UserService.UserAlbumAsync(CurrentUsersId, _album.ApiKey) ?? new UserAlbum
                {
                    UserId = 0,
                    AlbumId = 0,
                    CreatedAt = default
                };
                _userSongs = await UserService.UserSongsForAlbumAsync(CurrentUsersId, _album.ApiKey) ?? [];
            }
        }
    }

    private void OnShowItemChange(TreeEventArgs arg)
    {
        switch (arg.Text)
        {
            default:
                _showItem = ShowItem.Overview;
                break;
        }
    }

    private Task EditButtonClick()
    {
        throw new NotImplementedException();
    }

    private Task UnlockButtonClick()
    {
        throw new NotImplementedException();
    }

    private Task LockButtonClick()
    {
        throw new NotImplementedException();
    }

    private async Task DeleteButtonClick()
    {
        var confirm = await DialogService.Confirm("Are you sure?", "Delete confirmation", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm ?? false)
        {
            var deleteResult = await AlbumService.DeleteAsync([_album.Id]);
            if (deleteResult.IsSuccess)
            {
                NavigationManager.NavigateTo(FromUrl ?? "/data/albums", true);
            }

            NotificationService.Notify(NotificationMessageForResult(deleteResult, "deleting album", ToastTime));
        }
    }

    private Task UserRatingChange(int arg)
    {
        throw new NotImplementedException();
    }

    private async Task IsHatedClicked()
    {
        _userAlbum.IsHated = !_userAlbum.IsHated;
        var result = await UserService.ToggleAlbumHatedAsync(CurrentUsersId, _album.ApiKey, _userAlbum.IsHated);
        NotificationService.Notify(NotificationMessageForResult(result, "Toggling Album Hatred", ToastTime));
    }

    private async Task IsStarredClicked()
    {
        _userAlbum.IsStarred = !_userAlbum.IsStarred;
        var result = await UserService.ToggleAlbumStarAsync(CurrentUsersId, _album.ApiKey, _userAlbum.IsStarred);
        NotificationService.Notify(NotificationMessageForResult(result, "Toggling Album Favorite", ToastTime));
    }


    private async Task IsSongStarredClicked(Song song)
    {
        var userSong = _userSongs.FirstOrDefault(x => x.SongId == song.Id);
        if (userSong == null)
        {
            userSong = new UserSong
            {
                CreatedAt = Instant.FromDateTimeUtc(DateTime.UtcNow),
                UserId = CurrentUsersId,
                SongId = song.Id,
                IsStarred = true
            };
            var allUserSongs = _userSongs.ToList();
            allUserSongs.Add(userSong);
            _userSongs = allUserSongs.ToArray();
        }
        else
        {
            userSong.IsStarred = !userSong.IsStarred;
        }

        if (userSong.IsStarred)
        {
            userSong.IsHated = false;
        }

        var result = await UserService.ToggleSongStarAsync(CurrentUsersId, song.ApiKey, userSong.IsStarred);
        NotificationService.Notify(NotificationMessageForResult(result, "Toggling Song Favorite", ToastTime));
    }

    private async Task IsSongHatedClicked(Song song)
    {
        var userSong = _userSongs.FirstOrDefault(x => x.SongId == song.Id);
        if (userSong == null)
        {
            userSong = new UserSong
            {
                CreatedAt = Instant.FromDateTimeUtc(DateTime.UtcNow),
                UserId = CurrentUsersId,
                SongId = song.Id,
                IsHated = true
            };
            var allUserSongs = _userSongs.ToList();
            allUserSongs.Add(userSong);
            _userSongs = allUserSongs.ToArray();
        }
        else
        {
            userSong.IsHated = !userSong.IsHated;
        }

        if (userSong.IsHated)
        {
            userSong.IsStarred = false;
        }

        var result = await UserService.ToggleSongHatedAsync(CurrentUsersId, song.ApiKey, userSong.IsStarred);
        NotificationService.Notify(NotificationMessageForResult(result, "Toggling Song Hatred", ToastTime));
    }

    private async Task DoWebSearch(int searchType)
    {
        var searchTerms = new List<object>();
        var an = _album.Artist.Name;
        var title = _album.Name;
        var year = _album.ReleaseDate.Year.ToString();
        searchTerms.Clear();
        switch (searchType)
        {
            case 4:
                searchTerms.Add(title);
                searchTerms.Add(year);
                searchTerms.Add(an);
                break;

            case 3:
                searchTerms.Add(title);
                searchTerms.Add(an);
                break;

            case 2:
                searchTerms.Clear();
                searchTerms.Add(title);
                searchTerms.Add(year);
                break;

            case 1:
                searchTerms.Clear();
                searchTerms.Add(title);
                break;
        }
        await JsRuntime.InvokeVoidAsync("openInNewTab", Configuration.GenerateWebSearchUrl(searchTerms.ToArray()));
    }

}
