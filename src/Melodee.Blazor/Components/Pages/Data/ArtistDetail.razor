@page "/data/artist/{ApiKey:guid}/{FromUrl?}"
@inherits MelodeeComponentBase
@using Melodee.Common.Data.Models
@using Melodee.Common.Data.Models.Extensions
@using Melodee.Common.Enums
@using Melodee.Common.Models.Collection
@using Melodee.Common.Models.Extensions
@using Artist = Melodee.Common.Data.Models.Artist

@inject ArtistService ArtistService
@inject AlbumService AlbumService
@inject UserService UserService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject IMelodeeConfigurationFactory ConfigurationFactory
@inject IJSRuntime JsRuntime

<PageTitle>@_artist.Name</PageTitle>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center" Class="rz-pb-5">
        <RadzenColumn Size="7" SizeMD="9">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                @if (FromUrl != null)
                {
                    <RadzenButton
                        Icon="arrow_back"
                        ButtonStyle="ButtonStyle.Info"
                        Text="Back"
                        title="Go back"
                        Size="ButtonSize.Small"
                        Click="@(() => NavigationManager.NavigateTo(FromUrl, true))"/>
                }
                <RadzenBreadCrumb>
                    <RadzenBreadCrumbItem Path="/" Text="Dashboard"/>
                    <RadzenBreadCrumbItem Path="/data/artists" Text="Artists"/>
                    <RadzenBreadCrumbItem Icon="artist" Text="@_artist.Name"/>
                </RadzenBreadCrumb>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="5" SizeMD="3">
            <RadzenStack
                Orientation="Orientation.Horizontal"
                AlignItems="AlignItems.Center"
                JustifyContent="JustifyContent.End"
                Gap="0.5rem">
                <RadzenIcon Icon="@(_isPinned ? "keep" : "keep_off")" class="filled-icon"
                            IconColor="@(_isPinned ? "#99CCFF" : "#C9C9C7")"
                            @onclick="@TogglePinned" Style="cursor:pointer;"/>
                <RadzenRating Value="@_userArtist.Rating" Change="@UserRatingChange"/>
                <RadzenIcon Icon="thumb_down" class="filled-icon"
                            IconColor="@(_userArtist.IsHated ? "#A2A415" : "#C9C9C7")"
                            @onclick="@IsHatedClicked" Style="cursor:pointer;"/>
                <RadzenIcon Icon="favorite" class="filled-icon"
                            IconColor="@(_userArtist.IsStarred ? "#FA0202" : "#C9C9C7")"
                            @onclick="@IsStarredClicked" Style="cursor:pointer;"/>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>
@if (_alertMessages.Any())
{
    foreach (var alert in _alertMessages)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Size="AlertSize.Small" Icon="warning" AllowClose="false" Text="@alert" />
    }
}
<RadzenStack>
    <RadzenMenu>
        <RadzenMenuItem Text="Delete"  Visible="CurrentUser?.IsEditor() ?? false" Disabled="_artist.IsLocked" Click="DeleteButtonClick" title="Delete the artist, all artist albums, and all album files. BEWARE!" IconColor="@Colors.Danger" Icon="delete"></RadzenMenuItem>
        <RadzenMenuItem Text="Edit" Visible="CurrentUser?.IsEditor() ?? false" Disabled="_artist.IsLocked" Click="EditButtonClick" title="Edit artist." Icon="edit"></RadzenMenuItem>
        @if (_artist.IsLocked)
        {
            <RadzenMenuItem Text="Unlock" Visible="CurrentUser?.IsEditor() ?? false" Click="UnlockButtonClick" title="Unlock artist, will allow modifications." IconColor="@Colors.Warning" Icon="lock_open"></RadzenMenuItem>
        }
        else
        {
            <RadzenMenuItem Text="Lock" Visible="CurrentUser?.IsEditor() ?? false" Disabled="_artist.IsLocked" Click="LockButtonClick" title="Lock artist, will prevent modifications." IconColor="@Colors.Warning" Icon="lock"></RadzenMenuItem>
        }
        <RadzenMenuItem Text="Rescan" Visible="CurrentUser?.IsEditor() ?? false" Disabled="_artist.IsLocked" Click="RescanButtonClick" title="Rebuild metadata and rescan artists albums." Icon="refresh"></RadzenMenuItem>
        <RadzenMenuItem Text="Web Search" Click="OnInternetSearchClick" title="Search the web for artist." Icon="public"></RadzenMenuItem>
    </RadzenMenu>
    <RadzenText Text="@_artist.Name" TextStyle="TextStyle.DisplayH6" TagName="TagName.H1" style="margin: 0"/>
</RadzenStack>
<RadzenStack class="rz-mt-3">
    <RadzenRow>
        <RadzenColumn Size="4" SizeMD="2">
            <RadzenStack>
                <RadzenCard>
                    <RadzenTree Change="@OnShowItemChange">
                        <RadzenTreeItem Text="Overview" Selected="true">
                            <Template>
                                <RadzenIcon Icon="overview"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem Text="Images">
                            <Template>
                                <RadzenIcon Icon="image"/>
                                @($"{ context.Text } ({(_artist.ImageCount ?? 0)})")
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem Text="Relationships">
                            <Template>
                                <RadzenIcon Icon="partner_exchange"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                    </RadzenTree>
                </RadzenCard>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="info" class="rz-me-1"/>
                            Details
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            <CondensedStatistic Label="Library" Statistic="@_artist.Library.Name"/>
                            @if (_artist.RealName.Nullify() != null)
                            {
                                <CondensedStatistic Label="Real Name" Statistic="@_artist.RealName"/>
                            }
                            @if (@CurrentUser?.IsAdmin() ?? false)
                            {
                                <CondensedStatistic Label="Directory" Statistic="@_artist.Directory"/>
                            }
                            @if (_artist.SortName.Nullify() != null)
                            {
                                <CondensedStatistic Label="Sort Name" Statistic="@_artist.SortName"/>
                            }
                            @if (_artist.AlternateNames.Nullify() != null)
                            {
                                <CondensedStatistic Label="Alternate Name" Statistic="@_artist.AlternateNames"/>
                            }
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="link" class="rz-me-1"/>
                            External Links
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Artist"
                                            ThirdPartyIdType="ThirdPartyIdType.Amg" Id="@_artist.AmgId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Artist"
                                            ThirdPartyIdType="ThirdPartyIdType.Discogs" Id="@_artist.DiscogsId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Artist"
                                            ThirdPartyIdType="ThirdPartyIdType.ITunes" Id="@_artist.ItunesId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Artist"
                                            ThirdPartyIdType="ThirdPartyIdType.LastFm" Id="@_artist.LastFmId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Artist"
                                            ThirdPartyIdType="ThirdPartyIdType.Spotify" Id="@_artist.SpotifyId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Artist"
                                            ThirdPartyIdType="ThirdPartyIdType.MusicBrainz"
                                            Id="@_artist.MusicBrainzId"/>
                            <ThirdPartyLink MelodeeDataType="MelodeeDataType.Artist"
                                            ThirdPartyIdType="ThirdPartyIdType.WikiData"
                                            Id="@_artist.WikiDataId"/>
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="monitoring" class="rz-me-1"/>
                            Statistics
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            <CondensedStatistic Label="Album Count"
                                                Statistic="@(_artist.AlbumCount.ToStringPadLeft(3))"/>
                            <CondensedStatistic Label="Song Count" Statistic="@(_artist.SongCount.ToStringPadLeft(4))"/>
                            <CondensedStatistic Label="Played Total"
                                                Statistic="@(_artist.PlayedCount.ToStringPadLeft(6))"/>
                            <CondensedStatistic Label="Last Played"
                                                Statistic="@(CurrentUser?.FormatInstant(_artist.LastPlayedAt))"/>
                            <CondensedStatistic Label="Created"
                                                Statistic="@(CurrentUser?.FormatInstant(_artist.CreatedAt))"/>
                            <CondensedStatistic Label="Last Updated"
                                                Statistic="@(CurrentUser?.FormatInstant(_artist.LastUpdatedAt))"/>
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="8" SizeMD="9">
            @if (_showItem == ShowItem.Overview)
            {
                <RadzenRow class="rz-pb-3">
                    <RadzenColumn Size="12" SizeMD="8">
                        <RadzenPanel>
                            <HeaderTemplate>
                                <RadzenText TextStyle="TextStyle.H6"
                                            class="rz-display-flex rz-align-items-center rz-m-0">
                                    <RadzenIcon Icon="album" class="rz-me-1"/>
                                    Albums
                                </RadzenText>
                            </HeaderTemplate>
                            <ChildContent>
                                @if (_isLoading)
                                {
                                    <RadzenProgressBarCircular
                                        ProgressBarStyle="ProgressBarStyle.Primary"
                                        Value="100"
                                        ShowValue="false"
                                        Mode="ProgressBarMode.Indeterminate"/>
                                }
                                @foreach (var album in _albums.OrderByDescending(x => x.ReleaseDate))
                                {
                                    <AlbumDataInfoCardCompactComponent FromUrl=@($"/data/artist/{ _artist.ApiKey}") Album="@album"/>
                                }
                                <RadzenPager
                                    ShowPagingSummary="true"
                                    PagingSummaryFormat="@PagingSummaryFormat"
                                    HorizontalAlign="HorizontalAlign.Right"
                                    Count="_totalAlbumCount"
                                    PageSize="@((int)_pageSize)"
                                    PageNumbersCount="5"
                                    PageChanged="@PageChanged"/>

                            </ChildContent>
                        </RadzenPanel>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="4">

                        <RadzenStack orientation="Orientation.Vertical" class="rz-h-100">
                            @if (_artistImagesInByteBase64.Length < 2)
                            {
                                <RadzenImage
                                    Path=@($"/images/{_artist.ToApiKey()}/400")
                                    Style="margin:auto;display: block;"
                                    AlternateText="@_artist.Name"/>
                            }
                            @if (_artistImagesInByteBase64.Length > 1)
                            {
                                <RadzenCarousel
                                    Auto="false"
                                    Style="height: 400px; width: 400px;"
                                    class="rz-mx-auto"
                                    ButtonStyle="ButtonStyle.Base"
                                    ButtonSize="ButtonSize.Small"
                                    ButtonVariant="Variant.Text">
                                    <Items>
                                        @foreach (var image in _artistImagesInByteBase64)
                                        {
                                            <RadzenCarouselItem>
                                                <RadzenImage Path="@image" class="rz-h-100"/>
                                            </RadzenCarouselItem>
                                        }
                                    </Items>
                                </RadzenCarousel>
                            }
                            <Markdown Content="@(_artist.Biography ?? _biographyNoAvailablePlaceholder)" />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            }
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>


@code {

    private const string PagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";

    int _totalAlbumCount = 0;

    [Parameter] public Guid ApiKey { get; set; }

    /// <summary>
    ///     When this is set, is it used if the artist gets deleted to return the user back (like viewing artist for a library
    ///     return to the library detail)
    /// </summary>
    [Parameter]
    public string? FromUrl { get; set; }

    Artist _artist = new()
    {
        Library = new Library
        {
            Name = string.Empty,
            Path = string.Empty,
            Type = 0,
            CreatedAt = default
        },
        Name = string.Empty,
        NameNormalized = string.Empty,
        Directory = string.Empty,
        LibraryId = 0,
        CreatedAt = default
    };

    string[] _artistImagesInByteBase64 = [];

    string? _biographyNoAvailablePlaceholder = string.Empty;

    string MetaDataModelStyle { get; set; } = string.Empty;

    ShowItem _showItem = ShowItem.Overview;

    bool _isPinned;

    IEnumerable<AlbumDataInfo> _albums = [];

    private enum ShowItem
    {
        Overview = 1,
        Images,
        Relationships
    }

    UserArtist _userArtist = new()
    {
        UserId = 0,
        ArtistId = 0,
        CreatedAt = default
    };

    bool _isLoading = true;
    int? _currentPage = 1;
    readonly short _pageSize = 50;

    readonly Dictionary<string, string> _orderBy = new()
    {
        { nameof(AlbumDataInfo.ReleaseDate), PagedRequest.OrderAscDirection }
    };

    private List<string> _alertMessages = [];

    async Task PageChanged(PagerEventArgs args)
    {
        _currentPage = args.PageIndex + 1;
        await LoadAlbums();
    }

    private async Task LoadAlbums()
    {
        _isLoading = true;
        var albumListResult = await AlbumService.ListForArtistApiKeyAsync(new PagedRequest
        {
            Page = _currentPage,
            PageSize = _pageSize,
            OrderBy = _orderBy
        }, _artist.ApiKey);

        _albums = albumListResult.Data;
        _totalAlbumCount = albumListResult.TotalCount;
        _isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var configuration = await ConfigurationFactory.GetConfigurationAsync();
        _biographyNoAvailablePlaceholder = configuration.GetValue<string>(SettingRegistry.ArtistBiographyPlaceHolderText);
    }

    protected override async Task OnParametersSetAsync()
    {
        _alertMessages.Clear();
        if (ApiKey != Guid.Empty)
        {
            var artistResult = await ArtistService.GetByApiKeyAsync(ApiKey);
            if (artistResult is { IsSuccess: true, Data: not null })
            {
                _artist = artistResult.Data;

                _userArtist = await UserService.UserArtistAsync(CurrentUsersId, _artist.ApiKey) ?? new UserArtist
                {
                    UserId = 0,
                    ArtistId = 0,
                    CreatedAt = default
                };

                var artistDirectory = Path.Combine(_artist.Library.Path, _artist.Directory).ToDirectoryInfo();
                if (!artistDirectory.Exists())
                {
                    _alertMessages.Add($"Artist directory [{ artistDirectory.FullName()}] is not found.");
                }
                await LoadAlbums();

                if (_artist.ImageCount > 1)
                {
                    var albumsImagesInByteBase64 = new List<(int, string)>();
                    await Parallel.ForEachAsync(artistDirectory.AllFileImageTypeFileInfos()
                        .OrderBy(x => x.Name)
                        .Select((x, i) => new
                        {
                            index = i,
                            file =x.ToFileSystemInfo()
                        }), CancellationToken.None, async (albumImage, token) =>
                    {
                        var imageBase64 = await albumImage.file.ImageBase64(artistDirectory, cancellationToken: token);
                        if (imageBase64 != null)
                        {
                            albumsImagesInByteBase64.Add((albumImage.index, imageBase64));
                        }
                    });
                    _artistImagesInByteBase64 = albumsImagesInByteBase64.OrderBy(x => x.Item1).Select(x => x.Item2).ToArray();
                }

                _isPinned = await UserService.IsPinned(CurrentUsersId, UserPinType.Artist, _artist.Id);
            }
        }
    }

    private void OnShowItemChange(TreeEventArgs arg)
    {
        switch (arg.Text)
        {
            default:
                _showItem = ShowItem.Overview;
                break;
        }
    }

    private void EditButtonClick()
    {
        NavigationManager.NavigateTo($"/data/artist/{_artist.ApiKey}/edit", true);
    }

    private async Task UnlockButtonClick()
    {
        var result = await ArtistService.LockUnlockArtistAsync(_artist.Id, true);
        NotificationService.Notify(NotificationMessageForResult(result, "unlocking Artist", ToastTime));
        _artist.IsLocked = false;
    }

    private async Task LockButtonClick()
    {
        var result = await ArtistService.LockUnlockArtistAsync(_artist.Id, true);
        NotificationService.Notify(NotificationMessageForResult(result, "locking Artist", ToastTime));
        _artist.IsLocked = true;
    }

    private async Task DeleteButtonClick()
    {
        var confirm = await DialogService.Confirm("Are you sure?", "Delete confirmation", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm ?? false)
        {
            var deleteResult = await ArtistService.DeleteAsync([_artist.Id]);
            if (deleteResult.IsSuccess)
            {
                NavigationManager.NavigateTo(FromUrl ?? "/data/artists", true);
            }

            NotificationService.Notify(NotificationMessageForResult(deleteResult, "deleting artist", ToastTime));
        }
    }

    private Task UserRatingChange(int arg)
    {
        throw new NotImplementedException();
    }

    private async Task IsHatedClicked()
    {
        _userArtist.IsHated = !_userArtist.IsHated;
        var result = await UserService.ToggleArtistHatedAsync(CurrentUsersId, _artist.ApiKey, _userArtist.IsHated);
        NotificationService.Notify(NotificationMessageForResult(result, "Toggling Artist Hatred", ToastTime));
    }

    private async Task IsStarredClicked()
    {
        _userArtist.IsStarred = !_userArtist.IsStarred;
        var result = await UserService.ToggleArtistStarAsync(CurrentUsersId, _artist.ApiKey, _userArtist.IsStarred);
        NotificationService.Notify(NotificationMessageForResult(result, "Toggling Artist Favorite", ToastTime));
    }

    private async Task OnInternetSearchClick()
    {
        await JsRuntime.InvokeVoidAsync("openInNewTab", Configuration.GenerateWebSearchUrl([_artist.Name]));
    }

    private async Task TogglePinned()
    {
        _isPinned = !_isPinned;
        var result = await UserService.TogglePinnedAsync(CurrentUsersId, UserPinType.Artist, _artist.Id);
        NotificationService.Notify(NotificationMessageForResult(result, "Toggling Pin", ToastTime));
    }

    private async Task RescanButtonClick()
    {
        var confirm = await DialogService.Confirm("Are you sure?", "Rescan confirmation", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm ?? false)
        {
            var rescanresult = await ArtistService.RescanAsync([_artist.Id]);
            NotificationService.Notify(NotificationMessageForResult(rescanresult, "submitting artist rescan job", ToastTime));
        }
    }

}
