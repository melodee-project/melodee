@page "/data/artists"
@inherits MelodeeComponentBase

@using Melodee.Blazor.Security.Extensions
@using Melodee.Common.Data.Models.Extensions
@using Artist = Melodee.Common.Data.Models.Artist
@using Melodee.Blazor.Components.Components
@using FilterOperator = Melodee.Common.Filtering.FilterOperator

@inject MainLayoutProxyService MainLayoutProxyService
@inject Serilog.ILogger Logger
@inject IMelodeeConfigurationFactory ConfigurationFactory
@inject ArtistService ArtistService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject NavigationManager NavigationManager

<PageTitle>Artists</PageTitle>

<RadzenBreadCrumb Class="rz-pb-5">
    <RadzenBreadCrumbItem Path="/" Text="Dashboard"/>
    <RadzenBreadCrumbItem Icon="artist" Text="Artists"/>
</RadzenBreadCrumb>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Artists" TextStyle="TextStyle.DisplayH6" TagName="TagName.H1" style="margin: 0"/>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center"
                         JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenSplitButton Icon="get_app" Text="Export" Click="@ExportClick" Shade="Shade.Lighter">
                    <RadzenSplitButtonItem Text="Excel" Value="xlsx"/>
                    <RadzenSplitButtonItem Text="CSV" Value="csv"/>
                </RadzenSplitButton>
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" />
                <RadzenButton Icon="cell_merge" Disabled="_selectedArtists.Count < 2" Text="Merge" Click="@MergeSelectedButtonClick" ButtonStyle="ButtonStyle.Warning" />
                <RadzenButton Icon="delete" Disabled="!_selectedArtists.Any()" Text="Delete" Click="@DeleteSelectedButtonClick" ButtonStyle="ButtonStyle.Warning" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    @* <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search"/> *@
    <DebounceInput class="rz-w-100"
                   autocomplete="off"
                   @ref="_searchDebounceInput"
                   @bind-Value="@_debounceInputValue"
                   @bind-Value:event="OnInput"
                   DebounceTime="800"
                   MinLength="3"
                   OnValueChanged="@DoSearchAsync"
                   ForceNotifyByEnter="true"
                   ForceNotifyOnBlur="true" />
    <RadzenRow>
        <RadzenDataGrid
            @ref="_grid"
            style="height: 500px;"
            IsLoading=@_isLoading
            Count="@_count"
            Data="@_artists"
            LoadData="@LoadData"
            AllowSorting="true"
            AllowFiltering="true"
            AllowRowSelectOnRowClick = "false"
            AllowPaging="true"
            Page="OnPage"
            PageSize="_defaultPageSize"
            PagerHorizontalAlign="HorizontalAlign.Center"
            ShowPagingSummary="true"
            PageSizeOptions="@_pageSizeOptions"
            PagingSummaryFormat="@ViewConstants.PagingSummaryFormat"
            ColumnWidth="200px"
            SelectionMode="DataGridSelectionMode.Multiple"
            @bind-Value=@_selectedArtists>
            <Columns>
                <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
                    <HeaderTemplate>
                        <RadzenCheckBox
                            TabIndex="-1"
                            TriState="false"
                            TValue="bool?"
                            InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                            Value="@(_selectedArtists.Any() != true ? false : !_artists.All(i => _selectedArtists.Contains(i)) ? null : _artists.Any(i => _selectedArtists.Contains(i)))"
                            Change="@(args => _selectedArtists = args == true ? _selectedArtists.ToList() : [])" />
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenIcon Icon="lock" IconColor="@Colors.Warning" Visible="@(data.IsLocked)" MouseEnter="@(args => ShowTooltip(args, "Artist is locked. Locked artists cannot be deleted.") )" />
                        <RadzenCheckBox
                            TabIndex="-1"
                            TriState="false"
                            Value="@(_selectedArtists.Contains(data))"
                            InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select item" } })"
                            Change="@(_ => { _grid.SelectRow(data); })"
                            Visible="@(!data.IsLocked)"
                            TValue="bool"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(Artist.Name)" Title="Name">
                    <Template Context="data">
                        <RadzenImage Path=@($"/images/{data.ToApiKey()}/35?{CurrentUser?.ApiRequestQuery()}")  Style="margin-right: 5px;" AlternateText="@data.Name"/>
                        <a href="/data/artistedit/@data.ApiKey">@data.Name</a>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(Artist.Directory)" Title="Directory"/>
                <RadzenDataGridColumn Property="@nameof(Artist.AlbumCount)" Title="Albums" Width="80px"/>
                <RadzenDataGridColumn Property="@nameof(Artist.SongCount)" Title="Songs" Width="80px"/>
                <RadzenDataGridColumn Property="@nameof(Artist.CreatedAt)" Title="Created" Filterable="false" Width="120px"/>
                <RadzenDataGridColumn Property="@nameof(Artist.Tags)" Title="Tags" Width="100px"/>
            </Columns>
        </RadzenDataGrid>
    </RadzenRow>
</RadzenStack>

@code {

    RadzenDataGrid<Artist> _grid = null!;
    int _count;
    IEnumerable<Artist> _artists = null!;
    bool _isLoading;
    int _currentPage = 1;
    short _defaultPageSize = 25;
    IEnumerable<int> _pageSizeOptions = [10, 20, 30];
    IMelodeeConfiguration _configuration = new MelodeeConfiguration([]);
    int _toastTime;
    IList<Artist> _selectedArtists = [];

    string _debounceInputValue = "";
    DebounceInput _searchDebounceInput = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _configuration = await ConfigurationFactory.GetConfigurationAsync();
        _toastTime = _configuration.GetValue<int>(SettingRegistry.UserInterfaceToastAutoCloseTime);
        _defaultPageSize = _configuration.DefaultPageSize();
        _pageSizeOptions = _configuration.DefaultPageSizeOptions();
    }

    void OnPage(PagerEventArgs args)
    {
        _currentPage = args.PageIndex + 1;
    }

    async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            Dictionary<string, string>? sorting = null;
            if (args.Sorts.Any())
            {
                sorting = args.Sorts.ToDictionary(x => x.Property, x => x.SortOrder == SortOrder.Ascending ? PagedRequest.OrderAscDirection : PagedRequest.OrderDescDirection);
            }

            Common.Filtering.FilterOperatorInfo[]? filters = null;
            if (_debounceInputValue.Nullify() != null)
            {
                filters =
                [
                    new Common.Filtering.FilterOperatorInfo(nameof(Artist.NameNormalized), FilterOperator.Contains, _debounceInputValue.ToNormalizedString() ?? _debounceInputValue)
                ];
            }
            else if (args.Filters.Any())
            {
                filters = args.Filters.Select(x => new Common.Filtering.FilterOperatorInfo(x.Property,
                        SafeParser.ToEnum<Common.Filtering.FilterOperator>(x.FilterOperator.ToDictionary()),
                        x.FilterValue))
                    .ToArray();
            }

            var result = await ArtistService.ListAsync(new PagedRequest
            {
                FilterBy = filters,
                Page = _currentPage,
                PageSize = _defaultPageSize,
                OrderBy = sorting
            });
            _artists = result.Data;
            _count = SafeParser.ToNumber<int>(result.TotalCount);
        }
        catch (Exception e)
        {
            Logger.Error(e, "Loading Artists");
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }

        _isLoading = false;
    }

    private Task ExportClick()
    {
        throw new NotImplementedException();
    }

    private void AddButtonClick()
    {
        NavigationManager.NavigateTo($"/data/artistedit/{ Guid.Empty }");
    }

    private Task MergeSelectedButtonClick()
    {
        throw new NotImplementedException();
    }

    private async Task DeleteSelectedButtonClick()
    {
        var confirm = await DialogService.Confirm("Are you sure?", "Delete confirmation", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm ?? false)
        {
            var deleteResult = await ArtistService.DeleteAsync(_selectedArtists.Select(x => x.Id).ToArray());
            if (deleteResult.IsSuccess)
            {
                NotificationService.Notify(NotificationMessageForResult(deleteResult, "Deleting Artists", _toastTime));
                await _grid.RefreshDataAsync();
                return;
            }
            NotificationService.Notify(NotificationMessageForResult(deleteResult, "Deleting Artists", _toastTime));
        }
    }

    private void ShowTooltip(ElementReference elementReference, string message)
    {
        TooltipService.Open(elementReference, message);
    }

    private async Task DoSearchAsync(string s)
    {
        await LoadData(new LoadDataArgs { Sorts = [], Filters = [] });
    }

}
