@page "/data/artists"
@inherits MelodeeComponentBase

@using Melodee.Common.Data.Models.Extensions
@using Melodee.Common.Models.Collection
@using Melodee.Common.Models.Collection.Extensions
@using Artist = Melodee.Common.Data.Models.Artist

@inject MainLayoutProxyService MainLayoutProxyService
@inject Serilog.ILogger Logger
@inject IMelodeeConfigurationFactory ConfigurationFactory
@inject ArtistService ArtistService
@inject LibraryService LibraryService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject DefaultImages DefaultImages

<PageTitle>Artists</PageTitle>

<RadzenBreadCrumb Class="rz-pb-5">
    <RadzenBreadCrumbItem Path="/" Text="Dashboard"/>
    <RadzenBreadCrumbItem Icon="artist" Text="Artists"/>
</RadzenBreadCrumb>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Artists" TextStyle="TextStyle.DisplayH6" TagName="TagName.H1" style="margin: 0"/>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6" Visible="CurrentUser?.IsEditor() ?? false">
            <RadzenStack
                Orientation="Orientation.Horizontal"
                AlignItems="AlignItems.Center"
                JustifyContent="JustifyContent.End"
                Gap="0.5rem">
                    <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" />
                    <RadzenButton Icon="cell_merge" Disabled="_selectedArtists.Count < 2" Text="Merge" Click="@MergeSelectedButtonClick" ButtonStyle="ButtonStyle.Warning" />
                    <RadzenButton Icon="delete" Disabled="!_selectedArtists.Any()" Text="Delete" Click="@DeleteSelectedButtonClick" ButtonStyle="ButtonStyle.Warning" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <DebounceInput class="rz-textbox rz-w-100"
                   autocomplete="off"
                   @bind-Value="@_debounceInputValue"
                   @bind-Value:event="OnInput"
                   DebounceTime="800"
                   MinLength="3"
                   OnValueChanged="@DoSearchAsync"
                   ForceNotifyByEnter="true"
                   ForceNotifyOnBlur="true" />
    <RadzenRow>
        <RadzenDataGrid
            @ref="_grid"
            style="height: 500px;"
            IsLoading=@_isLoading
            Count="@_count"
            Data="@_artists"
            LoadData="@LoadData"
            AllowSorting="true"
            AllowFiltering="true"
            AllowRowSelectOnRowClick = "false"
            AllowPaging="true"
            Page="OnPage"
            PageSize="_defaultPageSize"
            PagerHorizontalAlign="HorizontalAlign.Center"
            ShowPagingSummary="true"
            PageSizeOptions="@_pageSizeOptions"
            PagingSummaryFormat="@ViewConstants.PagingSummaryFormat"
            ColumnWidth="200px"
            SelectionMode="DataGridSelectionMode.Multiple"
            @bind-Value=@_selectedArtists>
            <Columns>
                <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
                    <HeaderTemplate>
                        <RadzenCheckBox
                            TabIndex="-1"
                            TriState="false"
                            TValue="bool?"
                            InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                            Value="@(_selectedArtists.Any() != true ? false : !_artists.All(i => _selectedArtists.Contains(i)) ? null : _artists.Any(i => _selectedArtists.Contains(i)))"
                            Change="@(args => _selectedArtists = args == true ? _selectedArtists.ToList() : [])" />
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenIcon Icon="lock" IconColor="@Colors.Warning" Visible="@(data.IsLocked)" MouseEnter="@(args => ShowTooltip(args, "Artist is locked. Locked artists cannot be deleted.") )" />
                        <RadzenCheckBox
                            TabIndex="-1"
                            TriState="false"
                            Value="@(_selectedArtists.Contains(data))"
                            InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select item" } })"
                            Change="@(_ => { _grid.SelectRow(data); })"
                            Visible="@(!data.IsLocked)"
                            TValue="bool"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(ArtistDataInfo.Name)" Title="Name">
                    <Template Context="data">
                        <RadzenButton Style="float:right;margin-top: 7px;" Visible="@(CurrentUser?.IsEditor() ?? false)" Size="ButtonSize.ExtraSmall" Click=@(_ => NavigationManager.NavigateTo($"/data/artistedit/{data.ApiKey}")) Icon="edit" ButtonStyle="ButtonStyle.Secondary" />
                        <RadzenImage Path=@($"/images/{data.ToApiKey()}/35") Style="margin-right: 5px;" AlternateText="@data.Name"/>
                        <RadzenLink Text="@data.Name" Path="@($"/data/artist/{data.ApiKey}")" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(ArtistDataInfo.AlternateNames)"  Title="Alternate Names" Width="200px">
                    <Template Context="data">
                        <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="5px">
                            @foreach (var name in data.AlternateNames?.ToTags() ?? [])
                            {
                                <RadzenBadge IsPill="true" BadgeStyle="BadgeStyle.Primary" Text="@name"/>
                            }
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(ArtistDataInfo.Directory)" Title="Directory"/>
                <RadzenDataGridColumn Property="@nameof(ArtistDataInfo.AlbumCount)" Title="Albums" Width="80px">
                    <Template Context="data">
                        <RadzenText Text="@CurrentUser?.FormatNumber(data.AlbumCount)" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(ArtistDataInfo.SongCount)" Title="Songs" Width="80px">
                    <Template Context="data">
                        <RadzenText Text="@CurrentUser?.FormatNumber(data.SongCount)" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(ArtistDataInfo.CreatedAt)" Title="Created" Filterable="false" Width="120px">
                    <Template Context="data">
                        <RadzenText Text="@CurrentUser?.FormatInstant(data.CreatedAt)" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(ArtistDataInfo.Tags)" Title="Tags" Width="100px">
                    <Template Context="data">
                        <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="5px">
                            @foreach (var name in data.Tags?.ToTags() ?? [])
                            {
                                <RadzenBadge IsPill="true" BadgeStyle="BadgeStyle.Primary" Text="@name"/>
                            }
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenRow>
</RadzenStack>

@code {

    RadzenDataGrid<ArtistDataInfo> _grid = null!;
    int _count;
    IEnumerable<ArtistDataInfo> _artists = null!;
    bool _isLoading;
    int _currentPage = 1;
    short _defaultPageSize = 25;
    IEnumerable<int> _pageSizeOptions = [10, 20, 30];
    IMelodeeConfiguration _configuration = new MelodeeConfiguration([]);
    int _toastTime;
    IList<ArtistDataInfo> _selectedArtists = [];
    IList<ArtistDataInfo> _selectedArtistDataInfos = [];

    string _debounceInputValue = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _configuration = await ConfigurationFactory.GetConfigurationAsync();
        _toastTime = _configuration.GetValue<int>(SettingRegistry.UserInterfaceToastAutoCloseTime);
        _defaultPageSize = _configuration.DefaultPageSize();
        _pageSizeOptions = _configuration.DefaultPageSizeOptions();
    }

    private enum ArtistMergeState
    {
        ToBeMerged,
        ToMergeInto
    }

    readonly Func<ArtistDataInfo, RadzenDropZone<ArtistDataInfo>, bool> _itemSelector = (item, zone)
        => (ArtistMergeState)(item.State ?? ArtistMergeState.ToBeMerged) == (ArtistMergeState)zone.Value;

    readonly Func<RadzenDropZoneItemEventArgs<ArtistDataInfo>, bool> _canDrop = _
        => true;

    void OnDrop(RadzenDropZoneItemEventArgs<ArtistDataInfo> args)
    {
        if (args.FromZone != args.ToZone)
        {
            args.Item.State = (ArtistMergeState)args.ToZone.Value;
        }

        if (args.ToItem != null && args.ToItem != args.Item)
        {
            _selectedArtistDataInfos.Remove(args.Item);
            _selectedArtistDataInfos.Insert(_selectedArtistDataInfos.IndexOf(args.ToItem), args.Item);
        }
    }

    void OnPage(PagerEventArgs args)
    {
        _currentPage = args.PageIndex + 1;
    }

    async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            Dictionary<string, string>? sorting = null;
            if (args.Sorts.Any())
            {
                sorting = args.Sorts.ToDictionary(x => x.Property, x => x.SortOrder == SortOrder.Ascending ? PagedRequest.OrderAscDirection : PagedRequest.OrderDescDirection);
            }

            Common.Filtering.FilterOperatorInfo[]? filters = null;
            if (_debounceInputValue.Nullify() != null)
            {
                filters =
                [
                    new Common.Filtering.FilterOperatorInfo(nameof(Artist.NameNormalized), Common.Filtering.FilterOperator.Contains, _debounceInputValue.ToNormalizedString() ?? _debounceInputValue),
                    new Common.Filtering.FilterOperatorInfo(nameof(Artist.AlternateNames), Common.Filtering.FilterOperator.Contains, _debounceInputValue.ToNormalizedString() ?? _debounceInputValue, Common.Filtering.FilterOperatorInfo.OrJoinOperator)
                ];
            }
            else if (args.Filters.Any())
            {
                filters = args.Filters.Select(x => new Common.Filtering.FilterOperatorInfo(x.Property,
                        SafeParser.ToEnum<Common.Filtering.FilterOperator>(x.FilterOperator.ToDictionary()),
                        x.FilterValue))
                    .ToArray();
            }

            var result = await ArtistService.ListAsync(new PagedRequest
            {
                FilterBy = filters,
                Page = _currentPage,
                PageSize = SafeParser.ToNumber<short>(args.Top),
                OrderBy = sorting
            });
            _artists = result.Data;
            _count = SafeParser.ToNumber<int>(result.TotalCount);
        }
        catch (Exception e)
        {
            Logger.Error(e, "Loading Artists");
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }

        _isLoading = false;
    }

    private void AddButtonClick()
    {
        NavigationManager.NavigateTo($"/data/artistedit/{ Guid.Empty }");
    }

    private async Task MergeSelectedButtonClick()
    {
        _selectedArtistDataInfos = new List<ArtistDataInfo>();
        foreach (var selectedArtist in _selectedArtists)
        {
            var library = await LibraryService.GetAsync(selectedArtist.LibraryId);
            if (library is { IsSuccess: true, Data: not null })
            {
                _selectedArtistDataInfos.Add(selectedArtist);
            }
        }
        await DialogService.OpenAsync("Merge Artists", ds =>
                @<RadzenStack>
                    <RadzenDropZoneContainer TItem="ArtistDataInfo"
                                             Data="_selectedArtistDataInfos"
                                             ItemSelector="@_itemSelector"
                                             CanDrop="@_canDrop"
                                             Drop="@OnDrop">
                        <ChildContent>
                            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                                <RadzenDropZone Value="ArtistMergeState.ToBeMerged" class="rz-display-flex rz-flex-column rz-border-base-300 rz-border-radius-2" Style="flex: 1;">
                                    <RadzenText Text="Merge these artists" TextStyle="TextStyle.Subtitle2"/>
                                </RadzenDropZone>
                                <RadzenDropZone Value="ArtistMergeState.ToMergeInto" class="rz-display-flex rz-flex-column rz-border-base-300 rz-border-radius-2" Style="flex: 1;">
                                    <RadzenText Text="Into this artist" TextStyle="TextStyle.Subtitle2"/>
                                </RadzenDropZone>
                            </RadzenStack>
                        </ChildContent>
                        <Template>
                            <ArtistDataInfoCardComponent Artist="@context"/>
                        </Template>
                    </RadzenDropZoneContainer>
                    <RadzenButton Icon="cell_merge"  Text="Merge" Click="@DoMergeButtonClick" ButtonStyle="ButtonStyle.Primary" />
                </RadzenStack>
            , new DialogOptions
            {
                Resizable = true,
                Width = "800px",
                Height = "600px"
            }
            );
    }

    private async Task DeleteSelectedButtonClick()
    {
        var confirm = await DialogService.Confirm("Are you sure?", "Delete confirmation", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm ?? false)
        {
            var deleteResult = await ArtistService.DeleteAsync(_selectedArtists.Select(x => x.Id).ToArray());
            if (deleteResult.IsSuccess)
            {
                NotificationService.Notify(NotificationMessageForResult(deleteResult, "Deleting Artists", _toastTime));
                await _grid.RefreshDataAsync();
                return;
            }
            NotificationService.Notify(NotificationMessageForResult(deleteResult, "Deleting Artists", _toastTime));
        }
    }

    private void ShowTooltip(ElementReference elementReference, string message)
    {
        TooltipService.Open(elementReference, message);
    }

    private async Task DoSearchAsync(string s)
    {
        await LoadData(new LoadDataArgs { Sorts = [], Filters = [] });
    }

    private async Task DoMergeButtonClick()
    {
        MainLayoutProxyService.ToggleSpinnerVisible();
        DialogService.Close();

        try
        {
            var result = await ArtistService.MergeArtistsAsync(
                _selectedArtistDataInfos.First(x => x.State != null && (ArtistMergeState)x.State == ArtistMergeState.ToMergeInto).Id,
                _selectedArtistDataInfos.Where(x => x.State != null && (ArtistMergeState)x.State == ArtistMergeState.ToBeMerged)
                    .Select(x => x.Id)
                    .ToArray());
            if (result.IsSuccess)
            {
                await _grid.RefreshDataAsync();

            }
            NotificationService.Notify(NotificationMessageForResult(result, "Merged Artists", _toastTime));
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
    }
}

