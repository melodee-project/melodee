@page "/settings"

@using Common.Data.Models
@using Melodee.Common.Configuration.Extensions

@inject MainLayoutProxyService MainLayoutProxyService
@inject Serilog.ILogger Logger
@inject ISettingService SettingService
@inject NotificationService NotificationService

<PageTitle>Settings</PageTitle>


<RadzenDataGrid
    @ref="_grid"
    style="height: 600px"
    IsLoading=@_isLoading
    Count="@_count"
    Data="@_settings"
    LoadData="@LoadData"
    AllowSorting="true"
    AllowFiltering="true"
    AllowPaging="true"
    Page="OnPage"
    PageSize="_defaultPageSize"
    PagerHorizontalAlign="HorizontalAlign.Center"
    ShowPagingSummary="true"
    PageSizeOptions="@_pageSizeOptions"
    PagingSummaryFormat="@PagingSummaryFormat"
    ColumnWidth="200px"
    TItem="Setting"
    EditMode="@DataGridEditMode.Single"
    RowUpdate="@OnUpdateRow">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(Setting.Key)" Title="Key" Width="150px"/>
        <RadzenDataGridColumn Property="@nameof(Setting.Value)" Title="Value" Width="250px">
            <EditTemplate Context="setting">
                <RadzenTextBox @bind-Value="setting.Value" Style="width:250px; display: block" Name="Value"
                               aria-label="Edit Value"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Setting.Comment)" Title="Comment" Width="400px"/>
        <RadzenDataGridColumn
            Context="setting"
            Filterable="false"
            Sortable="false"
            TextAlign="TextAlign.Right"
            Frozen="true"
            Width="75px"
            FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="setting">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                              Size="ButtonSize.Medium" Click="@(args => EditRow(setting))"
                              @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="setting">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                              Size="ButtonSize.Medium" Click="@((args) => SaveRow(setting))" aria-label="Save">
                </RadzenButton>
                <RadzenButton
                    Icon="close"
                    ButtonStyle="ButtonStyle.Light"
                    Variant="Variant.Flat"
                    Size="ButtonSize.Medium"
                    class="rz-my-1 rz-ms-1"
                    Click="@((args) => CancelEdit(setting))"
                    aria-label="Cancel">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    private const string PagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";
    RadzenDataGrid<Setting> _grid = null!;
    int _count;
    IEnumerable<Setting> _settings = null!;
    bool _isLoading = false;
    int _currentPage = 1;
    short _defaultPageSize = 25;
    IEnumerable<int> _pageSizeOptions = [10, 20, 30];
    IMelodeeConfiguration _configuration = new MelodeeConfiguration([]);

    List<Setting> _settingsToUpdate = new List<Setting>();
    int _toastTime;

    void Reset()
    {
        _settingsToUpdate.Clear();
    }

    void Reset(Setting setting)
    {
        _settingsToUpdate.Remove(setting);
    }

    async Task EditRow(Setting setting)
    {
        if (!_grid.IsValid) return;
        Reset();
        _settingsToUpdate.Add(setting);
        await _grid.EditRow(setting);
    }

    async Task OnUpdateRow(Setting setting)
    {
        Reset(setting);
        var result = await SettingService.UpdateAsync(setting).ConfigureAwait(false);
        if (result.IsSuccess)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Duration = _toastTime,
                SummaryContent = ns => @<RadzenText TextStyle="TextStyle.H6">Successfully updated setting!</RadzenText>,
                DetailContent = ns => @<RadzenButton Text="Ok" Click="@(args => ns.Messages.Clear())"/>
            });
        }
    }

    async Task SaveRow(Setting setting)
    {
        await _grid.UpdateRow(setting);
    }

    void CancelEdit(Setting setting)
    {
        Reset(setting);
        _grid.CancelEditRow(setting);
    }

    protected override async Task OnInitializedAsync()
    {
        _configuration = await SettingService.GetMelodeeConfigurationAsync();
        _toastTime = _configuration.GetValue<int>(SettingRegistry.UserInterfaceToastAutoCloseTime);
        _defaultPageSize = _configuration.DefaultPageSize();
        _pageSizeOptions = _configuration.DefaultPageSizeOptions();
    }

    void OnPage(PagerEventArgs args)
    {
        _currentPage = args.PageIndex + 1;
    }

    async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            Dictionary<string, string>? sorting = null;
            if (args.Sorts.Any())
            {
                sorting = args.Sorts.ToDictionary(x => x.Property, x => x.SortOrder == SortOrder.Ascending ? PagedRequest.OrderAscDirection : PagedRequest.OrderDescDirection);
            }

            Common.Filtering.FilterOperatorInfo[]? filters = null;
            if (args.Filters.Any())
            {
                filters = args.Filters.Select(x => new Common.Filtering.FilterOperatorInfo(x.Property,
                        SafeParser.ToEnum<Common.Filtering.FilterOperator>(x.FilterOperator.ToDictionary()),
                        x.FilterValue))
                    .ToArray();
            }

            var result = await SettingService.ListAsync(new PagedRequest
            {
                FilterBy = filters,
                Page = _currentPage,
                PageSize = _defaultPageSize,
                OrderBy = sorting
            });
            _settings = result.Data;
            _count = SafeParser.ToNumber<int>(result.TotalCount);
        }
        catch (Exception e)
        {
            Logger.Error(e, "Loading Settings");
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }

        _isLoading = false;
    }

}


