@page "/admin/jobs"
@inherits MelodeeComponentBase
@using System.Globalization
@using Melodee.Blazor.ViewModels
@using Quartz
@using Quartz.Impl.Matchers
@using IScheduler = Quartz.IScheduler

@inject IScheduler Scheduler

@attribute [Authorize(Roles = "Administrator")]

@if (_jobs.Count == 0)
{
    <p>No jobs found</p>
    <p>Check your configuration and enable the Cron Expressions for Jobs.</p>
}

<RadzenDataList
    AllowVirtualization="false"
    WrapItems="true"
    AllowPaging="false"
    Data="@_jobs"
    TItem="JobStatus">
    <Template Context="jobStatus">
        <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
            <RadzenRow Gap="0">
                <RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5"
                                class="rz-color-on-secondary-lighter">@(jobStatus.Name)</RadzenText>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeLG="7" class="rz-p-4">
                    <RadzenRow Gap="0">
                        <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Last Run
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Body2">@(jobStatus.PreviousFireTime)</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Next Run
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Body2">@(jobStatus.NextFireTime)</RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeLG="2" class="rz-p-4">
                    <RadzenButton Text="Run now" Style="width: 100%"
                                  Size="ButtonSize.Small"
                                  Click="@(_ => RunJob(jobStatus))"/>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </Template>
</RadzenDataList>


@code {

    private readonly List<JobStatus> _jobs = [];

    private async Task RefreshJobs()
    {
        _jobs.Clear();

        var jobGroups = await Scheduler.GetJobGroupNames();

        foreach (var group in jobGroups)
        {
            var groupMatcher = GroupMatcher<JobKey>.GroupContains(group);
            var jobKeys = await Scheduler.GetJobKeys(groupMatcher);
            foreach (var jobKey in jobKeys)
            {
                var triggers = await Scheduler.GetTriggersOfJob(jobKey);
                foreach (var trigger in triggers)
                {
                    var nextFireTime = trigger.GetNextFireTimeUtc();
                    var previousFireTime = trigger.GetPreviousFireTimeUtc();
                    _jobs.Add(new JobStatus(group,
                        jobKey.Name,
                        trigger.Key.Name,
                        trigger.Key.Group,
                        trigger.GetType().Name,
                        Scheduler.GetTriggerState(trigger.Key).ToString()!,
                        nextFireTime?.LocalDateTime.ToString(CultureInfo.InvariantCulture) ?? "---",
                        previousFireTime?.LocalDateTime.ToString(CultureInfo.InvariantCulture) ?? "---"));
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshJobs();
    }

    private async Task RunJob(JobStatus jobStatus)
    {
        await Scheduler.TriggerJob(new JobKey(jobStatus.Name));
    }

}
