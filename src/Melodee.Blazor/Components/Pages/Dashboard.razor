@page "/"
@using Melodee.Common.Models.Collection
@inherits MelodeeComponentBase

@inject StatisticsService StatisticsService
@inject ArtistService ArtistService
@inject AlbumService AlbumService

<PageTitle>Dashboard</PageTitle>

<RadzenStack>
    <RadzenRow>
        <RadzenPanel AllowCollapse="true">
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                    <RadzenIcon Icon="monitoring" class="rz-me-1"/>
                    Statistics
                </RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack
                    Orientation="Orientation.Horizontal"
                    Wrap="FlexWrap.Wrap"
                    JustifyContent="JustifyContent.Left"
                    class="rz-p-2"
                    Gap="2rem">
                    @foreach (var statistic in _statistics)
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Info" Shade="Shade.Dark" Style="min-width: 200px;">
                            <RadzenIcon Icon="@statistic.Icon"/>
                            <div style="width:120px;display:inline-block;text-transform:none;text-align:left;">
                                @($"{statistic.Title}")
                            </div>
                            <div style="width:65px;display:inline-block;text-align:right;">
                                @($"{((int)statistic.Data).ToStringPadLeft(PadLeftValue)}")
                            </div>
                        </RadzenBadge>
                    }
                </RadzenStack>
            </ChildContent>
        </RadzenPanel>
    </RadzenRow>
    <RadzenPanel AllowCollapse="true">
        <HeaderTemplate>
            <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-m-0">
                <RadzenIcon Icon="artist" class="rz-me-1"/>
                Most recently added artists
            </RadzenText>
        </HeaderTemplate>
        <ChildContent>
            <RadzenStack
                Orientation="Orientation.Horizontal"
                Wrap="FlexWrap.Wrap"
                JustifyContent="JustifyContent.Left"
                class="rz-p-2"
                Gap="10px">
                @foreach (var artist in _latestArtists)
                {
                    <ArtistDataInfoCardComponent Artist="@artist"/>
                }
            </RadzenStack>
        </ChildContent>
    </RadzenPanel>
    <RadzenPanel AllowCollapse="true">
        <HeaderTemplate>
            <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-m-0">
                <RadzenIcon Icon="album" class="rz-me-1"/>
                Most recently added albums
            </RadzenText>
        </HeaderTemplate>
        <ChildContent>
            <RadzenStack
                Orientation="Orientation.Horizontal"
                Wrap="FlexWrap.Wrap"
                JustifyContent="JustifyContent.Left"
                class="rz-p-2"
                Gap="10px">
                @foreach (var album in _latestAlbums)
                {
                    <AlbumDataInfoCardComponent Album="@album"/>
                }
            </RadzenStack>
        </ChildContent>
    </RadzenPanel>
</RadzenStack>

@code {

    const short PadLeftValue = 8;

    Statistic[] _statistics = [];

    AlbumDataInfo[] _latestAlbums = [];
    ArtistDataInfo[] _latestArtists = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var statResult = await StatisticsService.GetStatisticsAsync();
        _statistics = statResult?.Data ?? [];

        var albumLatestResult = await AlbumService.ListAsync(new PagedRequest
        {
            PageSize = 12,
            OrderBy = new Dictionary<string, string>
            {
                { nameof(AlbumDataInfo.CreatedAt), PagedRequest.OrderDescDirection }
            }
        });
        _latestAlbums = albumLatestResult.Data.ToArray();

        var artistLatestResult = await ArtistService.ListAsync(new PagedRequest
        {
            PageSize = 12,
            OrderBy = new Dictionary<string, string>
            {
                { nameof(ArtistDataInfo.CreatedAt), PagedRequest.OrderDescDirection }
            }
        });
        _latestArtists = artistLatestResult.Data.ToArray();
    }

    private Task ProcessInbound()
    {
        throw new NotImplementedException();
    }

}
