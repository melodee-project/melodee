@page "/media/album/{LibraryApiKey:guid}/{ApiKey:guid}"
@using Melodee.Blazor.ViewModels
@using Melodee.Common.Data.Models.Extensions
@using Melodee.Common.Enums
@using Melodee.Common.Models.Collection
@using Melodee.Common.Models.Extensions
@using Melodee.Common.Models.SearchEngines
@using Melodee.Common.Plugins.Validation
@using Melodee.Common.Services.Scanning
@using Melodee.Common.Services.SearchEngines
@using SixLabors.ImageSharp
@using ImageInfo = Melodee.Common.Models.ImageInfo

@inherits MelodeeComponentBase

@inject MainLayoutProxyService MainLayoutProxyService
@inject ILogger Logger
@inject LibraryService LibraryService
@inject AlbumDiscoveryService AlbumDiscoveryService
@inject AlbumImageSearchEngineService AlbumImageSearchEngineService
@inject MediaEditService MediaEditService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject DefaultImages DefaultImages
@inject IMelodeeConfigurationFactory ConfigurationFactory
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JsRuntime

@attribute [Authorize(Roles = "Administrator,Editor")]

<PageTitle>@_album.AlbumTitle()</PageTitle>

<RadzenBreadCrumb Class="rz-pb-5">
    <RadzenBreadCrumbItem Path="/" Text="Dashboard"/>
    <RadzenBreadCrumbItem Path="@($"/media/library/{_library.ApiKey}")" Icon="folder" Text="@_library.Name"/>
    <RadzenBreadCrumbItem Icon="album" Text="@_album.AlbumTitle()"/>
</RadzenBreadCrumb>
<RadzenStack>
    <RadzenMenu>
        <RadzenMenuItem Text="Edit" Icon="edit">
            <RadzenMenuItem Text="Edit album" Icon="edit" Value="@MenuItems.EditAlbum" Click="OnMenuItemClicked"></RadzenMenuItem>
            <RadzenMenuItem Text="Move selected songs to next media" Icon="place_item" Value="@MenuItems.MoveSelectedSongs" Click="OnMenuItemClicked"></RadzenMenuItem>
            <RadzenMenuItem Text="Renumber all songs" Icon="format_list_numbered" Value="@MenuItems.RenumberSongs" Click="OnMenuItemClicked"></RadzenMenuItem>
            <RadzenMenuItem Text="Set artist on all songs" Icon="artist" Value="@MenuItems.SetArtistOnAllSongs" Click="OnMenuItemClicked"></RadzenMenuItem>
        </RadzenMenuItem>
        <RadzenMenuItem Text="Delete" Click="DeleteButtonClick" title="Delete the album and all album files. BEWARE!" IconColor="@Colors.Warning" Icon="delete"></RadzenMenuItem>
        @if (_selectedSongs.Count > 0)
        {
            <RadzenMenuItem Text="Delete Selected Songs" Click="OnMenuItemClicked" Value="@MenuItems.DeleteSelectedSongs"  title="Delete the selected songs. BEWARE!" IconColor="@Colors.Warning" Icon="remove"></RadzenMenuItem>
        }
        <RadzenMenuItem Text="Identify" Click="IdentifyButtonClick" title="Identify the album from search providers." Icon="edit"></RadzenMenuItem>
        <RadzenMenuItem Text="Move to Storage" Click="MoveButtonClick" title="Move to Storage library." Icon="move_group"></RadzenMenuItem>
        <RadzenMenuItem Text="Set Cover Image" Click="SetCoverImageButtonClick" title="Set the album cover image." Icon="image"></RadzenMenuItem>
        <RadzenMenuItem Text="Web Search" Icon="public">
            <RadzenMenuItem Text="Album" Click="@(() => DoWebSearch(1))"></RadzenMenuItem>
            <RadzenMenuItem Text="Album + Year" Click="@(() => DoWebSearch(2))"></RadzenMenuItem>
            <RadzenMenuItem Text="Album + Artist" Click="@(() => DoWebSearch(3))"></RadzenMenuItem>
            <RadzenMenuItem Text="Album + Year + Artist" Click="@(() => DoWebSearch(4))"></RadzenMenuItem>
        </RadzenMenuItem>
    </RadzenMenu>
    <RadzenText Text="@($"[{_album.AlbumYear()}] {_album.AlbumTitle()}")"
                TextStyle="TextStyle.DisplayH6"
                TagName="TagName.H1"
                style="margin: 0"/>
</RadzenStack>
<RadzenStack class="rz-mt-3">
    <RadzenRow>
        <RadzenColumn Size="4" SizeMD="2">
            <RadzenStack>
                <RadzenCard>
                    <RadzenTree Change="@OnShowItemChange">
                        <RadzenTreeItem Text="Overview" Selected="true">
                            <Template>
                                <RadzenIcon Icon="overview"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem Text="Contributors">
                            <Template>
                                <RadzenIcon Icon="groups"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem Text="Files">
                            <Template>
                                <RadzenIcon Icon="folder_data"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem Text="Images">
                            <Template>
                                <RadzenIcon Icon="image"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                    </RadzenTree>
                </RadzenCard>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="info" class="rz-me-1"/>
                            Details
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            @if (_album.IsValid)
                            {
                                <CondensedStatistic Label="Status" StatisticStyle="color: var(--rz-success)"
                                                    Statistic="Ok"/>
                            }
                            else
                            {
                                <CondensedStatistic
                                    LabelStyle="@(_album.IsValid ? "" : "color: var(--rz-color-danger);")"
                                    Label="Issues" Statistic="@_album.StatusReasons.ToString()"/>
                            }
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="monitoring" class="rz-me-1"/>
                            Statistics
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            <CondensedStatistic Label="Disc Count"
                                                Statistic="@(_album.MediaCountValue().ToStringPadLeft(3))"/>
                            <CondensedStatistic Label="Song Count"
                                                Statistic="@(_album.SongTotalValue().ToStringPadLeft(4))"/>
                            <CondensedStatistic Label="Created"
                                                Statistic="@(CurrentUser?.FormatDateTimeOffset(_album.Created))"/>
                            <CondensedStatistic Label="Last Updated"
                                                Statistic="@(CurrentUser?.FormatDateTimeOffset(_album.Modified))"/>
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="8" SizeMD="8">
            @if (_showItem == ShowItem.Overview)
            {
                <RadzenRow class="rz-pb-3">
                    <RadzenColumn Size="12" SizeMD="9">
                        <RadzenPanel>
                            <HeaderTemplate>
                                <RadzenText TextStyle="TextStyle.H6"
                                            class="rz-display-flex rz-align-items-center rz-m-0">
                                <RadzenIcon Icon="music_note" class="rz-me-1"/>
                                @($"Songs {(_selectedSongs.Count > 0 ? $" (selected {_selectedSongs.Count})" : string.Empty)}")
                                </RadzenText>
                            </HeaderTemplate>
                            <ChildContent>
                                <table class="rz-mt-1">
                                    <thead>
                                    <tr>
                                        <th scope="col" style="min-width:80px;">#</th>
                                        <th scope="col" style="width:90%;">Title</th>
                                        <th scope="col" style="min-width:125px;">Duration</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var song in (_album.Songs ?? []).OrderBy(x => x.MediaNumber()).ThenBy(x => x.MediaNumber()))
                                    {
                                        <tr>
                                            <td>
                                                <RadzenCheckBox TValue="bool" Value="@(_selectedSongs.Contains(song))" Change="@(args => ToggleSelectedSong(song))" />
                                                @($"{song.MediaNumber().ToStringPadLeft(2)}.{song.SongNumber().ToStringPadLeft(3)}")
                                            </td>
                                            <td>@song.Title()</td>
                                            <td>
                                                @CurrentUser!.FormatDuration(song.Duration().ToDuration())
                                                <span style="cursor: pointer;color: red;" title="Delete Song" @onclick="@(() => DeleteSong(song))">🗑</span>
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </ChildContent>
                        </RadzenPanel>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="3">
                        <RadzenStack>
                            <ArtistDataInfoCardComponent
                                ShowArtistLink="false"
                                Style="width: 375px;"
                                Artist="@_album.Artist.ToArtistDataInfo(_album.Created, 1, _album.SongTotalValue())"/>
                            <RadzenImage
                                Path="@_coverImage"
                                Style="width: 375px; height: auto; margin:auto;display: block;"
                                AlternateText="@_album.AlbumTitle()"/>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            }
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>


@code {

    short _maxResults = 10;

    [Parameter] public Guid LibraryApiKey { get; set; }

    [Parameter] public Guid ApiKey { get; set; }

    readonly List<Song> _selectedSongs = [];

    ShowItem _showItem = ShowItem.Overview;

    string _coverImage = string.Empty;

    private enum ShowItem
    {
        Overview = 1,
        Contributors,
        Files,
        Images
    }

    private enum MenuItems
    {
        MoveSelectedSongs,
        RenumberSongs,
        EditAlbum,
        SetArtistOnAllSongs,
        DeleteSelectedSongs
    }

    Common.Data.Models.Library _library = new()
    {
        Name = string.Empty,
        Path = string.Empty,
        Type = 0,
        CreatedAt = default
    };

    Album _album = new()
    {
        ViaPlugins = [],
        OriginalDirectory = new FileSystemDirectoryInfo
        {
            Path = string.Empty,
            Name = string.Empty
        },
        Directory = new FileSystemDirectoryInfo
        {
            Path = string.Empty,
            Name = string.Empty
        },
        Songs = []
    };

    private void OnShowItemChange(TreeEventArgs arg)
    {
        switch (arg.Text)
        {
            default:
                _showItem = ShowItem.Overview;
                break;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            var libraryResult = await LibraryService.GetByApiKeyAsync(LibraryApiKey);
            _library = libraryResult.Data!;

            _album = await AlbumDiscoveryService.AlbumByUniqueIdAsync(_library.ToFileSystemDirectoryInfo(), ApiKey);

            _coverImage = await _album.CoverImageBase64Async() ?? DefaultImages.AlbumCoverBase64;
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await AlbumDiscoveryService.InitializeAsync();
        await MediaEditService.InitializeAsync();

        var configuration = await ConfigurationFactory.GetConfigurationAsync();
        _maxResults = configuration.GetValue<short?>(SettingRegistry.SearchEngineDefaultPageSize) ?? configuration.GetValue<short>(SettingRegistry.DefaultsPageSize);
    }


    private async Task DeleteButtonClick()
    {
        var confirm = await DialogService.Confirm("Are you sure?", "Delete confirmation", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm ?? false)
        {
            if (_album.Delete())
            {
                NavigationManager.NavigateTo($"/media/library/{_library.ApiKey}", true);
            }
            NotificationService.Notify(NotificationMessageForResult(new OperationResult<bool> { Data = false }, "deleting album", ToastTime));
        }
    }

    private async Task MoveButtonClick()
    {
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            _album.Status = AlbumStatus.Ok;
            _album.StatusReasons = AlbumNeedsAttentionReasons.NotSet;

            var librariesResult = await LibraryService.GetStorageLibrariesAsync();
            if (librariesResult.Data.Length > 1)
            {
                // TODO If more than one Library type library then prompt for which library to move into
                throw new NotImplementedException();
            }

            var storageLibrary = librariesResult.Data.First();
            var moveResult = await LibraryService.MoveAlbumsFromLibraryToLibrary(
                _library.Name,
                storageLibrary.Name,
                a => a.Id == _album.Id,
                true);
            NavigationManager.NavigateTo($"/media/library/{_library.ApiKey}", true);
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
    }

    private async Task IdentifyButtonClick()
    {
        var searchValues = new SearchValue[]
        {
            new()
            {
                Key = nameof(AlbumQuery.Artist),
                Value = _album.Artist.Name
            },
            new()
            {
                Key = nameof(AlbumQuery.ArtistMusicBrainzId),
                Value = _album.Artist.MusicBrainzId?.ToString() ?? string.Empty
            },
            new()
            {
                Key = nameof(AlbumQuery.Name),
                Value = _album.AlbumTitle() ?? string.Empty
            },
            new()
            {
                Key = nameof(AlbumQuery.Year),
                Value = _album.AlbumYear()?.ToString() ?? string.Empty
            }
        };
        await DialogService.OpenAsync("Identify Album", ds =>
            @<IdentifyAlbum
                 OnUpdateCallback="IdentifyAlbumCallback"
                 SearchValues="searchValues"/>);
    }

    private async Task IdentifyAlbumCallback(AlbumDataInfo? arg)
    {
        DialogService.Close();

        if (arg?.AlbumSearchResult != null)
        {
            _album.Artist = _album.Artist with
            {
                MusicBrainzId = arg.AlbumSearchResult.Artist?.MusicBrainzId,
                Name = arg.AlbumSearchResult.Artist?.Name ?? _album.Artist.Name,
                NameNormalized = arg.AlbumSearchResult.Artist?.Name.ToNormalizedString() ?? _album.Artist.NameNormalized,
                SortName = arg.AlbumSearchResult.Artist?.SortName ?? _album.Artist.SortName,
                SpotifyId = arg.AlbumSearchResult.Artist?.SpotifyId,
                SearchEngineResultUniqueId = arg.AlbumSearchResult.Artist?.UniqueId
            };
            _album.SetTagValue(MetaTagIdentifier.Title, arg.AlbumSearchResult.Name, doSetSongValue: false);
            _album.SetTagValue(MetaTagIdentifier.RecordingYear, arg.AlbumSearchResult.Year, doSetSongValue: false);
            if (_album.Images?.Count() == 0)
            {
                var imageSearch = await AlbumImageSearchEngineService.DoSearchAsync(_album.ToAlbumQuery(), _maxResults);
                if (imageSearch.Data?.Length > 0)
                {
                    var imageSearchResult = imageSearch.Data.OrderByDescending(x => x.Rank).FirstOrDefault();
                    if (imageSearchResult != null)
                    {
                        var httpClient = HttpClientFactory.CreateClient();
                        var imageValidator = new ImageValidator(await ConfigurationFactory.GetConfigurationAsync());
                        var albumImageFromSearchFileName = Path.Combine(_album.Directory.FullName(), _album.Directory.GetNextFileNameForType(_maxResults, Common.Data.Models.Album.FrontImageType).Item1);
                        if (await httpClient.DownloadFileAsync(
                                imageSearchResult.MediaUrl,
                                albumImageFromSearchFileName,
                                async (_, newFileInfo, _) => (await imageValidator.ValidateImage(newFileInfo, PictureIdentifier.Front)).Data.IsValid).ConfigureAwait(false))
                        {
                            var newImageInfo = new System.IO.FileInfo(albumImageFromSearchFileName);
                            var imageInfo = await Image.IdentifyAsync(albumImageFromSearchFileName).ConfigureAwait(false);
                            _album.Images = new List<ImageInfo>
                            {
                                new()
                                {
                                    FileInfo = newImageInfo.ToFileSystemInfo(),
                                    PictureIdentifier = PictureIdentifier.Front,
                                    CrcHash = Crc32.Calculate(newImageInfo),
                                    Width = imageInfo.Width,
                                    Height = imageInfo.Height,
                                    SortOrder = 1,
                                    WasEmbeddedInSong = false
                                }
                            };
                        }
                    }
                }
            }
            var result = await MediaEditService.SaveMelodeeAlbum(_album);
            if (result.Data)
            {
                NotificationService.Notify(NotificationMessageForResult(result, "identifying album", ToastTime));
            }
        }
    }

    private Task DeleteSong(Song song)
        => DeleteSongsAction([song]);


    private async Task DeleteSongsAction(Song[] songs)
    {
        _album.Songs = _album.Songs!.Except(songs);
        _album = await MediaEditService.RenumberSongsAsync(_album).ConfigureAwait(false);
        var result = await MediaEditService.SaveMelodeeAlbum(_album);
        if (result.Data)
        {
            NotificationService.Notify(NotificationMessageForResult(result, "deleted song", ToastTime));
        }
    }

    private async Task EditButtonClick(RadzenSplitButtonItem arg)
    {

    }

    private void ToggleSelectedSong(Song song)
    {
        if (_selectedSongs.Contains(song))
        {
            _selectedSongs.Remove(song);
        }
        else
        {
            _selectedSongs.Add(song);
        }
    }

    private async Task DoWebSearch(int searchType)
    {
        var searchTerms = new List<object>();
        var an = _album.Artist.Name;
        var title = _album.AlbumTitle() ?? string.Empty;
        var year = _album.AlbumYear()?.ToString() ?? string.Empty;
        searchTerms.Clear();
        switch (searchType)
        {
            case 4:
                searchTerms.Add(title);
                searchTerms.Add(year);
                searchTerms.Add(an);
                break;

            case 3:
                searchTerms.Add(title);
                searchTerms.Add(an);
                break;

            case 2:
                searchTerms.Clear();
                searchTerms.Add(title);
                searchTerms.Add(year);
                break;

            case 1:
                searchTerms.Clear();
                searchTerms.Add(title);
                break;
        }
        await JsRuntime.InvokeVoidAsync("openInNewTab", Configuration.GenerateWebSearchUrl(searchTerms.ToArray()));
    }

    private async Task OnMenuItemClicked(MenuItemEventArgs arg)
    {
        Console.WriteLine($"++ OnMenuItemClicked arg [{arg}]");
        OperationResult<bool>? result;
        switch ((MenuItems)arg.Value)
        {
            case MenuItems.MoveSelectedSongs:
                _album = await MediaEditService.MoveSelectedSongsToNextMediaAsync(_album, _selectedSongs.ToArray()).ConfigureAwait(false);
                _album = await MediaEditService.RenumberSongsAsync(_album).ConfigureAwait(false);
                result = await MediaEditService.SaveMelodeeAlbum(_album);
                if (result.Data)
                {
                    NotificationService.Notify(NotificationMessageForResult(result, "renumbered songs", ToastTime));
                }
                _selectedSongs.Clear();
                break;

            case MenuItems.RenumberSongs:
                _album = await MediaEditService.RenumberSongsAsync(_album).ConfigureAwait(false);
                result = await MediaEditService.SaveMelodeeAlbum(_album);
                if (result.Data)
                {
                    NotificationService.Notify(NotificationMessageForResult(result, "deleted song", ToastTime));
                }
                break;

            case MenuItems.SetArtistOnAllSongs:
                _album = MediaEditService.SetArtistOnAllSongs(_album);
                result = await MediaEditService.SaveMelodeeAlbum(_album);
                if (result.Data)
                {
                    NotificationService.Notify(NotificationMessageForResult(result, "deleted song", ToastTime));
                }
                break;

            case MenuItems.DeleteSelectedSongs:
                await DeleteSongsAction(_selectedSongs.ToArray());
                _selectedSongs.Clear();
                break;

            default:
                await DialogService.Alert("WIP; sph is working on it");
                break;

        }
    }

    private SearchValue[] SearchValues =>
    [
        new()
        {
            Key = "Artist",
            Value = _album.Artist.Name,
            SortOrder = 1
        },
        new()
        {
            Key = "Year",
            Value = _album.AlbumYear()?.ToString() ?? string.Empty,
            SortOrder = 1
        },
        new()
        {
            Key = "Title",
            Value = _album.AlbumTitle() ?? string.Empty,
            SortOrder = 1
        }
    ];

    private async Task AlbumSearchImageCallback(Components.ImageSearchResult? selectedImageSearchResult)
    {
        MainLayoutProxyService.ToggleSpinnerVisible();

        DialogService.Close();

        try
        {
            if (selectedImageSearchResult != null)
            {
                var httpClient = HttpClientFactory.CreateClient();
                var imageValidator = new ImageValidator(await ConfigurationFactory.GetConfigurationAsync());
                var albumImageFromSearchFileName = Path.Combine(_album.Directory.FullName(), _album.Directory.GetNextFileNameForType(_maxResults, Common.Data.Models.Album.FrontImageType).Item1);

                if (selectedImageSearchResult.ImageBytes != null)
                {
                    await File.WriteAllBytesAsync(albumImageFromSearchFileName, selectedImageSearchResult.ImageBytes);
                    var newImageInfo = new System.IO.FileInfo(albumImageFromSearchFileName);
                    var imageInfo = await Image.IdentifyAsync(albumImageFromSearchFileName).ConfigureAwait(false);
                    _album.Images = new List<ImageInfo>
                    {
                        new()
                        {
                            FileInfo = newImageInfo.ToFileSystemInfo(),
                            PictureIdentifier = PictureIdentifier.Front,
                            CrcHash = Crc32.Calculate(newImageInfo),
                            Width = imageInfo.Width,
                            Height = imageInfo.Height,
                            SortOrder = 1,
                            WasEmbeddedInSong = false
                        }
                    };
                }
                else
                {
                    if (await httpClient.DownloadFileAsync(
                            selectedImageSearchResult.Url,
                            albumImageFromSearchFileName,
                            async (_, newFileInfo, _) => (await imageValidator.ValidateImage(newFileInfo, PictureIdentifier.Front)).Data.IsValid).ConfigureAwait(false))
                    {
                        var newImageInfo = new System.IO.FileInfo(albumImageFromSearchFileName);
                        var imageInfo = await Image.IdentifyAsync(albumImageFromSearchFileName).ConfigureAwait(false);
                        _album.Images = new List<ImageInfo>
                        {
                            new()
                            {
                                FileInfo = newImageInfo.ToFileSystemInfo(),
                                PictureIdentifier = PictureIdentifier.Front,
                                CrcHash = Crc32.Calculate(newImageInfo),
                                Width = imageInfo.Width,
                                Height = imageInfo.Height,
                                SortOrder = 1,
                                WasEmbeddedInSong = false
                            }
                        };
                    }
                }
                var result = await MediaEditService.SaveMelodeeAlbum(_album);
                if (result.Data)
                {
                    NotificationService.Notify(NotificationMessageForResult(result, "set cover image", ToastTime));
                }
                NavigationManager.Refresh(true);
            }
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
    }

    private async Task SetCoverImageButtonClick()
    {
        await DialogService.OpenAsync("Image Search", ds =>
            @<ImageSearchUpload
                 SearchType="ImageSearchType.Album"
                 OnUpdateCallback="AlbumSearchImageCallback"
                 SearchValues="SearchValues"/>);
    }

}

